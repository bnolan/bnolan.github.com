twttr.templates = {
    
user_dropdown: '<p>
        <span id="screen-name">\n {{screen_name_from_server}}\n</span>\n
      </p>
      <ul class="profile-dropdown">
        <li style="list-style: none">\n
        </li>
        <li>
          <a href="{{settings_path}}">{{_i}}Settings{{/i}}</a>
        </li>
        <li style="list-style: none">\n
        </li>
        <li>
          <a href="{{support_path}}">{{_i}}Help{{/i}}</a>
        </li>
        <li style="list-style: none">\n
        </li>
        <li>
          <a href="{{turn_phx_off_path}}">{{_i}}Leave preview{{/i}}</a>
        </li>
        <li style="list-style: none">\n
        </li>
        <li>\n
          <form class="signout-form" action="{{logout_path}}" method="post">
            \n <a class="signout-button" href="#">{{_i}}Sign out{{/i}}</a>\n <input type="\'hidden\'" value="\'{{form_authenticity_token}}\'" name="\'authenticity_token\'">\n
          </form>\n
        </li>
        <li style="list-style: none">\n\n {{#is_admin}}\n
        </li>
        <li>
          <span>{{_i}}Admin Tools{{/i}}</span>
        </li>
        <li style="list-style: none">\n
        </li>
        <li class="admin-panel-link">
          <a href="{{admin_home_path}}" title="Admin panel">Admin panel</a>
        </li>
        <li style="list-style: none">\n {{/is_admin}}\n\n {{#became_user}}\n
        </li>
        <li>
          <a href="{{unbecome_user_path}}" title="Revert to admin">Revert to admin</a>
        </li>
        <li style="list-style: none">\n {{/became_user}}\n
        </li>
      </ul>
      <p>
        ', 
stream_loading: '
      </p>
      <div class="stream-loading">
        \n <img src="/phoenix/img/loader.gif" width="32" height="32" alt="{{_i}}Loading...{{/i}}">\n
      </div>
      <p>
        \n', 
stream_end: '
      </p>
      <div class="stream-end">
        \n <img src="/phoenix/img/tiny-timeline-bird.png" class="stream-end-bird">\n {{{end_text}}}\n
      </div>
      <p>
        \n', 
dashboard_friend_requests: '<a class="button follower-request-link" href="{{follower_requests_path}}">{{button_label}}</a>', 
geo_similar_places: '
      </p>
      <div>
        {{_i}}This place may already exist{{/i}}
      </div>
      <p>
        \n
      </p>
      <div class="geo-similar-places">
        \n
        <div class="geo-map-canvas">\n
        <div class="geo-map-place-bubble">
          \n \n
          <div class="round">
            \n
            <div class="geo-place-title">\n
            <div class="geo-place-details">\n
          </div>\n
        </div>\n
        <div class="geo-creation-actions">
          \n
          <div>
            {{_i}}Did you mean:{{/i}}
          </div>\n \n
          <div>
            \n <button type="button" class="btn btn-default geo-submit">{{_i}}No, just add my place{{/i}}</button>\n <a href="#" class="geo-go-back">{{_i}}Go Back{{/i}}</a>\n <span class="geo-progress">\u0026nbsp;</span>\n
          </div>\n
          <div class="geo-place-creation-error"></div>\n
        </div>\n
      </div>
      <p>
        \n', 
home_dashboard: '
      </p>
      <div class="component">
        \n{{&gt;dashboard_your_profile}}\n
        <hr>
        \n
      </div>
      <p>
        \n\n
      </p>
      <div class="component">
        \n{{&gt;dashboard_footer}}\n
      </div>
      <p>
        ', 
profile_pane: '
      </p>
      <div class="\'profile-pane\'">
        \n \n
        <div class="profile-basics clearfix">
          \n
          <div class="profile-text">
            \n <a href="{{profile_path}}">\n <img src="/'{{right_image_size}}/'" alt="\'{{name}}\'" width="\'128\'" class="\'thumb\'" data-user-id="\'{{id}}\'">\n</a> \n {{&gt;full_name}}\n
            <div class="screen-name-and-location">
              <a href="{{profile_path}}" class="screen-name screen-name-{{screen_name}} pill"><strong>@{{screen_name}}</strong> <span>{{_i}}view full profile \u0026rarr;{{/i}}</span></a>
            </div>\n
            <div class="location">
              {{#location}}{{location}}{{/location}}
            </div>\n
          </div>\n
          <div class="user-info">
            \n <span class="bio">{{#description}}{{description}}{{/description}}</span> {{#url}}<a href="{{url}}" target="_blank">{{url}}</a>{{/url}}\n
          </div>\n\n {{&gt;user_stats}}\n
        </div>\n
      </div>
      <p>
        ', 
stream_whale_end: '
      </p>
      <div class="stream-whale-end">
        \n
        <div class="title">
          {{{text}}}
        </div>\n
        <div>
          \n {{_i}}Twitter may be over capacity or experiencing a momentary hiccup. <a href="#" class="try-again-after-whale">Try again</a> or visit <a target="_blank" href="{{status_path}}">Twitter Status</a> for more information.{{/i}}\n
        </div>\n
      </div>
      <p>
        \n', 
delete_list_button: '
      </p>
      <div class="button delete-list-button" title="{{_i}}Delete{{/i}}" data-screen-name="{{#user}}{{screen_name}}{{/user}}" data-list-id="{{id}}">
        <b class="label">{{_i}}Delete{{/i}}</b>
      </div>
      <p>
        \n', 
geo_failure_try_again: '{{message}}\n\u0026#32;\n<a href="#" class="geo_enable_webclient">{{_i}}Try again{{/i}}</a>\n{{&gt;geo_disable_geo}}', 
mute_users: '
      </p>
      <div class="muted-users">
        \n
        <div class="input-autocomplete">
          \n <input type="text" size="20" class="mute-input"> <a href="#" class="button">{{_i}}Add{{/i}}</a>\n
        </div>\n
        <h4>
          {{_i}}Current List:{{/i}}
        </h4>\n
        <ul class="muted-user-list"></ul>\n
      </div>
      <p>
        ', place_page_users_title: "{{#poi}}\n {{_i}}Twitter / Recent people at {{{placeName}}}{{/i}}\n{{/poi}}\n{{^poi}}\n {{_i}}Twitter / Recent people in {{{placeName}}}{{/i}}\n{{/poi}}\n", user: "<img src='{{profile_image_url}}' alt='{{name}}' class='thumb user-profile-link' data-user-id='{{id}}'>\n<span class='user-name'>\n <a class='user-profile-link' data-user-id='{{id}}' href='#' title='{{name}}'><strong>{{screen_name}}</strong></a>\n <span class='full-name'>{{name}}</span>\n</span>\n", stream_follower_request: "
      </p>
      <div data-user-id='{{id}}' class='user-content-medium clearfix'>
        \n <img src='{{profile_image_url}}' alt='{{name}}' class='user-content-image user-profile-link' data-user-id='{{id}}'>\n
        <div class="\&quot;user-content-rest\&quot;">
          \n <span class='user-name'>\n <a class='user-profile-link' data-user-id='{{id}}' href='#' title='{{name}}'><strong>{{screen_name}}</strong></a>\n <span class='full-name'>{{name}}</span>\n {{#verified}}\n \n {{/verified}}\n {{#protected}}\n <img src="/&quot;/phoenix/img/protected_small.gif/&quot;">\n {{/protected}}\n</span> \n
          <div class="\&quot;user-description\&quot;">
            {{{linkified_description}}}
          </div>\n
          <div class='user-meta'></div>\n
        </div>\n
        <div class="\&quot;button-container\&quot;" style="\&quot;float:right\&quot;">
          \n
          <div class="\&quot;button">
            <b>{{_i}}Accept{{/i}}</b>
          </div>\n
          <div class="\&quot;button">
            {{_i}}Decline{{/i}}
          </div>\n
        </div>\n
      </div>
      <p>
        \n", 
email_already_verified_banner: '
      </p>
      <div class="banner-outer">
        \n
        <div class="banner">
          \n
          <div class="banner-inside email-already-verified-banner">
            \n <a class="\'pane-close\'" href="/'#/'">{{_i}}close{{/i}} <span>\u0026times;</span></a>\n \n
            <h5>
              {{already_verified_message}}
            </h5>\n
          </div>\n
        </div>\n
      </div>
      <p>
        \n', tweet_user_image_48: "{{#user}}\n<img height="\&quot;48\&quot;" width="\&quot;48\&quot;" src='{{profile_image_url}}' alt='{{name}}' class='user-profile-link' data-user-id='{{id}}'>\n{{/user}}\n", stream_message: "
      </p>
      <div>
        {{screenName}}
      </div>
      <p>
        ", 
stream: '
      </p>
      <div class="stream">
        \n
        <div class="stream-items"></div>\n
      </div>
      <p>
        ', rate_limit_page: "
      </p>
      <div class="\&quot;four-twenty\&quot;">
        \n {{#render_page_content}}\n
        <h2>
          {{_i}}Uh-oh! You're being rate-limited!{{/i}}
        </h2>\n\n
        <p class='rate-limit-message'>
          \n {{_i}}While we appreciate your enthusiasm, in order to control abuse, we limit how often you can search.{{/i}}\n
        </p>\n\n
        <p class='rate-limit-message'>
          \n {{_i}}For locations where many people share the same IP address (e.g., corporations and conferences), our rate limits may be too strict. If you believe you are using Twitter normally, please <a href="/&quot;{{support_path}}/&quot;">let us know</a>.{{/i}}\n
        </p>\n\n
        <p>
          {{&gt;dashboard_footer}}
        </p>\n {{/render_page_content}}\n
      </div>
      <p>
        ", 
machine_translated_tweet: '
      </p>
      <div class="machine-translated-tweet">
        \n
        <div class="machine-translated-text">
          {{{translated_text}}}
        </div>\n
        <div class="machine-translated-meta">
          {{_i}}Translation powered by Google Translate{{/i}}
        </div>\n
      </div>
      <p>
        \n', 
other_profile_activity: '
      </p>
      <div class="your-activity following-activity other-profile">
        \n
        <h2>
          <a href="{{user_following_path}}" class="title-link">{{_i}}Following{{/i}} <span class="\'user-stat-link\'">{{friends_count_commaized}}</span></a>
        </h2>\n
      </div>
      <p>
        ', britt_tweet: "{{_i}}Late night hacking on {{superlative}} things with @{{user}}.{{/i}}\n{{^is_before_midnight}}\n {{_i}}Time to head home.{{/i}}\n{{/is_before_midnight}}\n{{something_about_addi}}\n", 
geo_similar_place_item: '
      </p>
      <ul>
        <li class="result-place-{{id}}">\n <a href="#">{{formatted_name}}</a><br>
          \n <span class="geo-place-details">{{full_address}}</span>\n
        </li>
        <li style="list-style: none">\n\n', dashboard_trends: "
        </li>
      </ul>
      <div class="\&quot;trends-inner\&quot;">
        \n
        <h2>
          {{_i}}Trends{{/i}}
        </h2>\n
        <h3>
          <span class="\&quot;trend-location\&quot;">{{_i}}Worldwide{{/i}}</span>\u0026nbsp;\u0026middot;<span class='trend-toggle'><a href='#'>{{_i}}change{{/i}}</a></span>
        </h3>\n
        <ul class='trends'></ul>\n
      </div>
      <p>
        ", phone_setup_prompt: "
      </p>
      <div>
        {{_i}}Before you can receive @{{screen_name}}'s Tweets as text messages, you need to activate your phone. Do this now?{{/i}}
        <div>
          \n{{&gt;prompt}}\n", 
bg_img_css: '', message_drawer: "
          <div class='message {{type}}'>
            <div class='message-inside'>
              <span>{{{text}}}</span>{{#close_button}}<a class='dismiss' href='#'>\u0026times;</a>{{/close_button}}
            </div>
          </div>\n", retweeters: "
          <h3 class='retweets_count'>
            {{{retweeted_by_count}}}
          </h3>\n
          <div class="\&quot;meta-links">
            \n
            <div style="margin-left: 2em" class='retweeters'>
              \n {{#retweeters}}\n {{&gt;user_thumb_list_item}}\n {{/retweeters}}\n
            </div>\n
          </div>\n", 
user_detailed_list_item: '
          <ul>
            <li class="user-detailed-list-item" data-user-id="{{id}}">\n <a href="{{profile_path}}" data-user-id="{{id}}" class="user-thumb user-screen-name"><img src="/'{{profile_image_url}}/'" alt="{{screen_name}}"></a>\n
              <div class="user-details">
                \n
                <div class="user-name-info">
                  \n <a class="user-screen-name" data-user-id="{{id}}" href="/'{{profile_path}}/'">{{screen_name}}</a>\n <span class="user-full-name">{{name}}</span>\n {{#verified}}\n \n {{/verified}}\n {{#protected}}\n <img src="/phoenix/img/protected_small.gif">\n {{/protected}}\n <span class="user-follow-state" data-user-id="{{id}}">\n {{^following}}\n \u0026middot; <a href="#" class="user-follow-link follow-action" data-user-id="{{id}}">{{_i}}Follow{{/i}}</a>\n {{/following}}\n {{#recently_followed}}\n \u0026middot; <a href="#" class="user-unfollow-link unfollow-action" data-user-id="{{id}}">{{_i}}Unfollow{{/i}}</a>\n {{/recently_followed}}\n</span> \n
                </div>\n {{#location}}\n
                <div class="location">
                  \n {{_i}}Location:{{/i}}\u0026nbsp;<span class="location">{{location}}</span>\n
                </div>\n {{/location}}\n {{#description}}\n
                <div class="bio">
                  \n <span class="bio">{{description}}</span>\n
                </div>\n {{/description}}\n
              </div>\n
            </li>
            <li style="list-style: none">', 
user_css: '\n<noscript>\n {{&gt;bg_img_css}}\n</noscript>', trend_item: "
            </li>
            <li class="\&quot;trend-item">\n\t<a href='{{trend_search_path}}' class='trend-link'>{{name}}</a>\n\t{{#is_sponsored}}\n <a href='{{trend_search_path}}' class='tweet-label promoted-label'>\n {{#promoted_content}}\n {{#advertiser_name}}\n {{_i}}Promoted by {{advertiser_name}}{{/i}}\n {{/advertiser_name}}\n {{^advertiser_name}}\n {{_i}}Promoted{{/i}}\n {{/advertiser_name}}\n {{/promoted_content}}\n</a> \n {{/is_sponsored}}\n
            </li>
            <li style="list-style: none">", place_business_unclaimed: "
              <h2>
                {{_i}}Are you the owner of <strong>{{place_name}}</strong>?{{/i}}
              </h2>\n{{_i}}See who's visiting your place and what they're saying about it! Promote your presence and increase traffic to your profile.{{/i}}\n<br>
              \n<a href="/&quot;#/&quot;">{{_i}}Claim this place \u0026rarr;{{/i}}</a>", 
checkbox_dropdown: '
              <div class="drop-down" style="margin-left: 2em; visibility: hidden">
                \n {{{items}}}\n
              </div>', 
checkbox_list_item: '
            </li>
            <li class="{{class}}">\n {{#icon}}\n \n {{{label}}}\n {{/icon}}\n {{^icon}}\n <img width="14" height="14" title="waiting" alt="waiting" style="display: none; float:left" src="/images/spinner.gif" class="loading-spinner">\n <input id="list_{{id}}" type="checkbox" style="float:left">\n <span style="display:block">\n {{{label}}}\n {{#isPrivate}}\n \n {{/isPrivate}}\n</span> \n {{/icon}}\n
            </li>
            <li style="list-style: none">', 
latest_tweet_timestamp: '<a href="{{permalink_path}}" class="\'latest-tweet-timestamp\'" title="{{explicit_timestamp}}"><span class="_timestamp" data-time="{{actual_timestamp}}" data-long-form="true">{{full_timestamp}}</span></a>', 
edit_list_button: '
              <div class="button edit-list-button" data-screen-name="{{#user}}{{screen_name}}{{/user}}" data-list-id="{{id}}" title="{{_i}}Edit{{/i}}">
                <b class="label">{{_i}}Edit{{/i}}</b>
              </div>\n', 
user_small_list_item: '
            </li>
            <li class="user-small-list-item" data-user-id="{{id}}">\n <a href="{{profile_path}}" class="user-thumb"><img src="/'{{profile_image_url}}/'" alt="{{screen_name}}"></a>\n {{#dismissable}}\n <a class="dismiss" href="#" title="{{_i}}Hide{{/i}}">\u0026times;</a>\n {{/dismissable}}\n
              <div class="user-name-info">
                \n <a class="user-screen-name" href="/'{{profile_path}}/'">{{screen_name}}</a>\n {{#verified}}\n \n {{/verified}}\n {{#protected}}\n \n {{/protected}}\n <span class="user-follow-state" data-user-id="{{id}}">\n {{^following}}\n \u0026middot; <a href="#" class="user-follow-link follow-action" data-user-id="{{id}}">{{_i}}Follow{{/i}}</a>\n {{/following}}\n {{#recently_followed}}\n \u0026middot; <a href="#" class="user-unfollow-link unfollow-action" data-user-id="{{id}}">{{_i}}Unfollow{{/i}}</a>\n {{/recently_followed}}\n</span> \n <span class="user-full-name">{{name}}</span>\n
              </div>\n
            </li>
            <li style="list-style: none">\n', 
reply_dialog_footer: '
              <div class="tweet twttr-dialog-reply-footer">
                \n <img src="{{profile_image_url}}" title="{{screen_name}}">\n
                <p>
                  \n <span class="twttr-reply-screenname">{{screen_name}}</span>\n {{{text}}}\n
                </p>\n
              </div>\n', 
geo_confirm_place_creation: '
              <div>
                {{_i}}Add this place{{/i}}
              </div>\n
              <div class="geo-confirm-place-creation">
                \n
                <div class="geo-map-canvas">\n \n \n \n \n \n \n \n \n \n
                <table class="geo-creation-actions" cellspacing="0" cellpadding="0">
                  <tr>
                    <td class="geo-place-creation-col1">
                      {{_i}}Name{{/i}}
                    </td>
                    <td>
                      \n <input class="geo-place-creation-name" type="text" title="{{_i}}Type the name of a place{{/i}}">\n
                    </td>
                  </tr>
                  <tr>
                    <td class="geo-place-creation-col1 geo-place-creation-row2">
                      {{_i}}Address{{/i}}
                    </td>
                    <td class="geo-place-creation-row2">
                      \n <input class="geo-place-creation-address help-focusable" type="text" title="{{_i}}Optional{{/i}}">\n
                    </td>
                  </tr>
                  <tr>
                    <td></td>
                    <td>
                      \n
                      <div class="geo-place-creation-hint">
                        {{_i}}"795 Folsom St" or "24th St and Noe"{{/i}}
                      </div>\n
                      <div class="geo-place-creation-city">
                        {{city_name}}
                      </div>\n <button type="button" class="btn btn-default geo-submit">{{_i}}Add this place{{/i}}</button>\n <a href="#" class="geo-go-back">{{_i}}Back{{/i}}</a>\n <span class="geo-progress">\u0026nbsp;</span>\n
                      <div class="geo-place-creation-error"></div>\n
                    </td>
                  </tr>
                </table>\n
              </div>\n', 
geo_ie_google_toolbar_banner: '
              <div id="geo_browser_help_banner" class="geo_ie_gtb">
                \n
                <div>
                  {{_i}}Before Twitter can get your location...{{/i}}
                </div>\n
                <div>
                  <img src="/images/geo_browser_help_banner_1.png">{{_i}}Check "Remember for this site"{{/i}}
                </div>\n
                <div>
                  <img src="/images/geo_browser_help_banner_2.png">{{_i}}Click "Share my location"{{/i}}
                </div>\n
              </div>\n', 
list_actions: '
              <div class="list-actions list-actions-{{id}}">
                \n {{#is_own_list}}\n
                <div class="buttons">
                  \n {{&gt;edit_list_button}}\n {{&gt;delete_list_button}}\n
                </div>\n {{/is_own_list}}\n {{^is_own_list}}\n
                <div class="follow-state">
                  \n {{#following}}<span class="you-follow">{{_i}}Following{{/i}}\u0026nbsp;\u0026middot;</span> <a href="/'#/'" class="unfollow-list-link" data-screen-name="{{#user}}{{screen_name}}{{/user}}" data-list-id="{{id}}">{{_i}}Unfollow{{/i}}</a>{{/following}}\n {{^following}}
                  <div class="button follow-list-button" data-screen-name="{{#user}}{{screen_name}}{{/user}}" data-list-id="{{id}}">
                    <strong>{{_i}}Follow this list{{/i}}</strong>
                  </div>{{/following}}\n
                </div>\n {{/is_own_list}}\n
              </div>\n', 
tweet_geo_text: '{{#has_geo}}\n<a class="tweet-geo-text" data-tweet-id="{{id}}">\n {{_i}}from {{place_name}}{{/i}}\n</a>\n{{/has_geo}}\n', 
dashboard_footer: '
              <div class="footer inline-list">
                \n <!-- TODO: {{_i}}we might be removing some of these{{/i}} -->\n
                <p>
                  \n <a href="{{about_path}}">{{_i}}About{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{support_path}}">{{_i}}Help{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{blog_path}}">{{_i}}Blog{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{status_path}}">{{_i}}Status{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{jobs_path}}">{{_i}}Jobs{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{tos_path}}">{{_i}}Terms{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{privacy_path}}">{{_i}}Privacy{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="#" id="keyboard-shortcut-trigger" name="keyboard-shortcut-trigger">{{_i}}Shortcuts{{/i}}</a>\n
                </p>\n
                <p>
                  \n <a href="{{businesses_path}}">{{_i}}Businesses{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{partnerships_path}}">{{_i}}Media{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{developers_path}}">{{_i}}Developers{{/i}}</a>\n <span class="dot">\u0026middot;</span>\n <a href="{{goodies_path}}">{{_i}}Widgets{{/i}}</a>\n <span class="dot">\u0026middot;</span> \u0026copy; {{year}} Twitter\n
                </p>\n {{#is_mobile}}\n
                <p class="mobile-option">
                  \n {{_i}}View Twitter in:{{/i}} {{_i}}Standard{{/i}} - <a href="{#mobile_path}">{{_i}}Mobile{{/i}}</a>\n
                </p>\n {{/is_mobile}}\n
              </div>\n', 
place_page: '
              <div class="main-content">
                \n {{{noscript}}}\n
                <div class="search-header">
                  \n
                  <div class="back-to-home">
                    \n <a href="{{index_path}}">{{_i}}\u0026larr; Back to Home{{/i}}</a>\n
                  </div>\n
                </div>\n
                <div class="geo-place-page-title">
                  \n
                  <h2>
                    \n {{#poi}}\n {{_i}}At <strong>{{name}}</strong>{{/i}}\n {{/poi}}\n {{^poi}}\n {{_i}}In <strong>{{name}}</strong>{{/i}}\n {{/poi}}\n
                  </h2>\n
                  <div class="geo-place-page-details">
                    \n {{#full_address}}\n {{full_address}}<span class="geo_map_link_separator">|</span>\n {{/full_address}}\n {{#map_link}}\n <a target="_blank" href="{{map_link}}">{{_i}}full map{{/i}}</a>\n {{/map_link}}\n
                    <div>
                      {{phone}}
                    </div>\n {{#location_service_down}}\n {{_i}}Location service is temporarily unavailable{{/i}}\n {{/location_service_down}}\n
                  </div>\n
                </div>\n {{#show_map}}\n
                <div class="geo-place-page-map-container">
                  \n
                  <div id="geo_place_page_map_canvas"></div>\n
                </div>\n {{/show_map}}\n
                <ul class="stream-tabs">
                  <li style="list-style: none">\n
                  </li>
                  <li class="stream-tab stream-tab-tweets {{#active_tab_tweets}}active{{/active_tab_tweets}}">\n <a class="tab-text" href="{{place_path}}">{{_i}}All Tweets{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n
                  </li>
                  <li class="stream-tab stream-tab-links {{#active_tab_links}}active{{/active_tab_links}}">\n <a class="tab-text" href="{{place_links_path}}">{{_i}}Tweets with links{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n
                  </li>
                </ul>\n {{&gt;stream_manager}}\n {{{end_noscript}}}\n
              </div>\n
              <div class="geo-map-place-bubble">
                \n \n
                <div class="round">
                  \n
                  <div class="geo-place-title">\n
                  <div class="geo-place-details">\n
                </div>\n
              </div>\n
              <div class="dashboard place-dashboard"></div>\n{{&gt;details_pane_container}}', recent_lists: "
              <div class='recently-listed-in'>
                \n {{_i}}Recently listed in:{{/i}}\n
                <div style="margin-left: 2em" class='recent-lists inline-list'>
                  \n {{{list_names}}}\n
                </div>\n
              </div>", 
details_pane_container: '
              <div class="details-pane-outer">
                \n
                <div class="details-pane-shell">
                  \n
                  <div class="details-pane">
                    \n {{{pane}}}\n
                  </div>\n
                </div>\n
              </div>', 
more_lists: '
              <div class="more-lists">
                \n {{#user}}\n
                <h2>
                  {{_i}}More lists by @{{screen_name}} <a href="{{user_lists_path}}">\u0026rarr;</a>{{/i}}
                </h2>\n {{/user}}\n {{#lists}}\n
                <ul class="list-of-lists">
                  <li style="list-style: none">\n {{#items}}\n
                  </li>
                  <li>
                    <a href="{{user_list_path}}">{{name}}</a>
                  </li>
                  <li style="list-style: none">\n {{/items}}\n
                  </li>
                </ul>\n {{/lists}}\n
              </div>', user_stats: "
              <ul class='user-stats clearfix'>
                <li style="list-style: none">\n{{#can_view}}\n
                </li>
                <li>
                  <a class='user-stats-count' href="/&quot;{{profile_path}}/&quot;">{{_i}}{{statuses_count_commaized}}<span class='user-stats-stat'>Tweets</span>{{/i}}</a>
                </li>
                <li style="list-style: none">\n{{/can_view}}\n
                </li>
                <li>
                  <a class='user-stats-count' href="/&quot;{{user_following_path}}/&quot;">{{_i}}{{friends_count_commaized}}<span class='user-stats-stat'>Following</span>{{/i}}</a>
                </li>
                <li style="list-style: none">\n
                </li>
                <li>
                  <a class='user-stats-count' href="/&quot;{{user_followers_path}}/&quot;">{{_i}}{{followers_count_commaized}}<span class='user-stats-stat'>Followers</span>{{/i}}</a>
                </li>
                <li style="list-style: none">\n
                </li>
                <li>
                  <a class='user-stats-count' href="/&quot;{{memberships_path}}/&quot;">{{_i}}{{listed_count_commaized}}<span class='user-stats-stat'>Listed</span>{{/i}}</a>
                </li>
                <li style="list-style: none">\n
                </li>
              </ul>\n", 
stream_list: '
              <div class="stream-list">
                \n {{#user}}\n
                <div class="list-image">
                  \n <img src="{{profile_image_url}}" width="36" height="36">\n
                </div>\n {{/user}}\n
                <div class="list-content">
                  \n <a class="list-name" href="{{user_list_path}}">{{full_name}}</a>\n {{^is_public}}\n \n {{/is_public}}\n <span class="list-description">{{description}}</span>\n
                  <div class="list-buttons buttons">
                    \n {{#is_own_list}}\n {{&gt;edit_list_button}}\n {{&gt;delete_list_button}}\n {{/is_own_list}}\n {{^is_own_list}}\n {{#following}}\n
                    <div class="button unfollow-list-button" data-screen-name="{{#user}}{{screen_name}}{{/user}}" data-list-id="{{id}}"></div>\n {{/following}}\n {{^following}}\n
                    <div class="button follow-list-button" data-screen-name="{{#user}}{{screen_name}}{{/user}}" data-list-id="{{id}}"></div>\n {{/following}}\n {{/is_own_list}}\n
                  </div>\n
                </div>\n
              </div>', 
stream_link: '
            </li>
            <li class="stream-link" data-item-id="{{id}}">\n <a title="\'{{name}}\'" href="{{{href}}}">\n {{#icon_class}}\n \n {{/icon_class}}\n <b class="item-name">\n {{name}}\n</b> \n {{#show_delete}}\n \n {{/show_delete}}\n {{#is_private}}\n \n {{/is_private}}\n</a> \n
            </li>
            <li style="list-style: none">\n', search_stream_title: "<span>\n {{_i}}Search results for <strong>{{query}}</strong>{{/i}}\n</span>\n
              <div class='delete-saved-search'>
                \n <a href='#' class='delete-saved-search-x'></a>\n <a href='#'>{{_i}}Remove saved search{{/i}}</a>\n
              </div>", 
dropdown: '
              <div class="drop-down" style="margin-left: 2em; visibility: hidden">
                \n {{{items}}}\n
              </div>', 
profile_header: '{{%TRANSLATION-HINT mode=profile_tabs}}\n\n
              <div class="profile-header">
                \n
                <div class="profile-info clearfix">
                  \n
                  <div class="profile-image-container">
                    \n <a href="{{bigger_profile_image_url}}" class="\'profile-picture\'" target="_blank"><img src="{{reasonably_small_profile_image_url}}" alt="{{name}}"></a>\n
                  </div>\n
                  <div class="profile-details">
                    \n {{&gt;full_name}}\n
                    <div class="screen-name-and-location">
                      <span class="screen-name screen-name-{{screen_name}} pill">@{{screen_name}}</span> {{location}}
                    </div>\n
                    <div class="bio">
                      {{description}}
                    </div>\n
                    <div class="url">
                      <a target="_blank" rel="me nofollow" href="{{url}}">{{url}}</a>
                    </div>\n
                  </div>\n
                </div>\n
                <div class="profile-actions-container">\n
                <ul class="stream-tabs">
                  <li style="list-style: none">\n
                  </li>
                  <li class="stream-tab stream-tab-tweets {{#active_tab_tweets}}active{{/active_tab_tweets}}">\n <a class="tab-text" href="{{profile_path}}">{{_i}}Timeline{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n {{#can_view}}\n
                  </li>
                  <li class="stream-tab stream-tab-favorites {{#active_tab_favorites}}active{{/active_tab_favorites}}">\n <a class="tab-text" href="{{user_favorites_path}}">{{_i}}Favorites{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n {{/can_view}}\n
                  </li>
                  <li class="stream-tab stream-tab-following {{#active_tab_following}}active{{/active_tab_following}}">\n <a class="tab-text" href="{{user_following_path}}">{{_i}}Following{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n
                  </li>
                  <li class="stream-tab stream-tab-followers {{#active_tab_followers}}active{{/active_tab_followers}}">\n <a class="tab-text" href="{{user_followers_path}}">{{_i}}Followers{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n {{#has_pending_requests}}\n
                  </li>
                  <li class="stream-tab stream-tab-pending {{#active_tab_pending}}active{{/active_tab_pending}}">\n <a class="tab-text pending-follow" title="\'{{_i}}Follower" href="{{follower_requests_path}}">{{_i}}Requests{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n {{/has_pending_requests}}\n
                  </li>
                  <li class="stream-tab stream-tab-lists dropdown-link {{#active_tab_lists}}active{{/active_tab_lists}}">\n
                    <p class="tab-text">
                      {{_i}}Lists{{/i}}
                    </p>\n
                  </li>
                  <li style="list-style: none">\n
                  </li>
                </ul>\n
              </div>\n', 
geo_city_search: '
              <form id="place_search_form" name="place_search_form">
                \n \n \n \n \n \n \n
                <table class="geo_place_search_table">
                  <tr>
                    <td class="geo_place_search_col1 geo_place_search_place">
                      {{_i}}City{{/i}}
                    </td>
                    <td class="geo_place_search_place">
                      \n <input id="place_search_query" type="text" autocomplete="off" class="round-left help-focusable" title="{{_i}}Enter a city, state{{/i}}"><span class="place_search_submit round-right" title="{{_i}}Search{{/i}}">\u0026nbsp;</span>\n
                      <ul class="round places_list place_search_dropdown"></ul>\n
                    </td>
                  </tr>
                  <tr>
                    <td></td>
                    <td>
                      \n
                      <div id="place_search_results"></div>\n
                    </td>
                  </tr>
                </table>\n
              </form>\n', 
stream_manager: '
              <div class="stream-manager">
                \n {{#tweets}}\n
                <div class="stream-title"></div>\n
                <div class="stream">
                  \n {{{tweets}}}\n
                </div>\n {{/tweets}}\n
              </div>', 
geo_add_location_geo_disabled: '<span class="crosshairs">\u0026nbsp;</span>\n<a class="show_geo_dialog" href="#">{{_i}}Add your location{{/i}}</a>', 
default_dropdown_divider: '
              <hr class="dropdown-divider">
              \n', place_page_links_title: "{{#poi}}\n {{_i}}Twitter / Tweets with links at {{{placeName}}}{{/i}}\n{{/poi}}\n{{^poi}}\n {{_i}}Twitter / Tweets with links in {{{placeName}}}{{/i}}\n{{/poi}}", geo_autocomplete_item: '{{#is_poi}}\n
            </li>
            <li>\n <span class="place_icon">\u0026nbsp;</span>{{formatted_name}}\n <span class="place_details">{{details}}</span>\n
            </li>
            <li style="list-style: none">\n{{/is_poi}}\n{{^is_poi}}\n
            </li>
            <li>\n <span class="place_noicon">{{formatted_name}}</span>\n
            </li>
            <li style="list-style: none">\n{{/is_poi}}', "404_page": '
              <div class="four-oh-four">
                \n {{#render_page_content}}\n
                <h2>
                  {{_i}}Sorry, that page doesn\u2019t exist!{{/i}}
                </h2>\n
                <form class="user-search-form" method="get" action="/search/users">
                  \n <label for="q">{{_i}}Search for a username, first or last name:{{/i}}</label>\n <input type="text" class="user-search-query" name="q"><input type="submit" value="Search" class="user-search-button button">\n
                </form>\n
                <p>
                  {{&gt;dashboard_footer}}
                </p>\n {{/render_page_content}}\n
              </div>', 
geo_detection_failed_set_manually: '{{_i}}We couldn\'t find you!{{/i}}\n\u0026#32;\n<a href="#" class="geo_add_manual">{{_i}}Add Location{{/i}}</a>\n{{&gt;geo_disable_geo}}', tweet_labels: "{{#is_top_tweet}}\n <span class='tweet-label top-tweet-label'>{{_i}}Top Tweet{{/i}}</span>\n{{/is_top_tweet}}\n{{#is_sponsored}}\n <a href="/&quot;{{help_promoted_tweets_path}}/&quot;" target="\&quot;_blank\&quot;" class='tweet-label promoted-label'>{{_i}}Promoted by {{advertiser_name}}{{/i}}</a>\n{{/is_sponsored}}", 
local_trends: '
              <dl class="local-trends-list">
                <dt>
                  \n
                </dt>
                <dt>
                  {{_i}}Countries{{/i}}
                </dt>
                <dt>
                  \n {{#country_locations}}\n {{&gt;local_trend_location}}\n {{/country_locations}}\n
                </dt>
              </dl>\n
              <dl class="local-trends-list">
                <dt>
                  \n
                </dt>
                <dt>
                  {{_i}}Cities{{/i}}
                </dt>
                <dt>
                  \n {{#city_locations}}\n {{&gt;local_trend_location}}\n {{/city_locations}}\n
                </dt>
              </dl>\n', people_results: "
              <h2>
                {{_i}}People results for\u0026nbsp;<strong>{{query}}</strong>{{/i}}
              </h2>\n
              <div style="margin-left: 2em" class='people-results clearfix'>
                \n {{#found_people}}\n {{&gt;user_small_list}}\n {{/found_people}}\n
              </div>\n<a href="/&quot;{{user_search_path}}/&quot;">{{_i}}More people results \u0026rarr;{{/i}}</a>", 
protected_user: '
              <div class="protected-box">
                \n
                <h1 class="logged-out">
                  {{_i}}@{{screen_name}}\'s account is private.{{/i}}
                </h1>\n
                <p>
                  {{_i}}Only confirmed followers have access to @{{screen_name}}\'s Tweets. You need to send a request before you can start following this account.{{/i}}
                </p>\n
              </div>', 
dialog: '
              <div style="visibility: hidden;">
                \n
                <div class="twttr-dialog">
                  \n
                  <div class="twttr-dialog-header">
                    \n
                    <h3>
                      {{{title}}}
                    </h3>
                    <div class="twttr-dialog-close">
                      <b>\u0026times;</b>
                    </div>\n
                  </div>\n
                  <div class="twttr-dialog-inside">
                    \n
                    <div class="twttr-dialog-body clearfix">
                      \n
                      <div class="twttr-dialog-content">
                        \n {{{content}}}\n
                      </div>\n
                    </div>\n
                    <div class="twttr-dialog-footer clearfix">
                      \n {{{footer}}}\n
                    </div>\n
                  </div>\n
                </div>\n
              </div>\n', 
dashboard_profile_stats: '
              <div class="\'dashboard-profile-annotations">
                \n
                <h2 class="dashboard-profile-title">
                  <img src="{{profile_image_url}}" alt="{{name}}" width="24" class="profile-dashboard">{{screen_name}}
                </h2>\n {{#translator_level}}\n <a class="\'dashboard-profile-translator\'" href="/'{{translate_path}}/'">\n <em>{{_i}}Translator{{/i}}</em>\n <span>{{_i}}LEVEL {{translator_level}}{{/i}}</span>\n</a> \n {{/translator_level}}\n
              </div>\n\n{{&gt;user_stats}}', 
posting_tweet_box: '
              <form method="post" action="/status/update">
                \n
                <div class="tweet-box">
                  \n
                  <h2>
                    {{_i}}What\u2019s happening?{{/i}}
                  </h2>\n
                  <div class="text-area">
                    <textarea name="status" style="width: 482px; height: 36px;">
      </textarea>
                  </div>\n
                  <div class="tweet-button-container">
                    <a class="tweet-button button" href="#"><input type="submit" value="{{_i}}Tweet{{/i}}"></a>
                  </div>\n
                </div>\n
              </form>', 
welcome_to_phoenix_banner: '
              <div class="welcome-banner-outer banner-outer">
                \n
                <div class="welcome-banner banner">
                  \n
                  <div class="welcome-banner-inside banner-inside">
                    \n <a class="\'pane-close\'" href="/'#/'">{{_i}}Close{{/i}}\u0026nbsp;<span>\u0026times;</span></a>\n <span>\n {{_i}}Welcome to <a href="{{welcome_search_results_path}}">#NewTwitter</a>! Read up on <a target="_blank" href="{{whats_new_path}}">what\u2019s new</a>. You can also <a href="{{turn_phx_off_path}}" class="use-old-twitter">leave the preview</a> and come back later.{{/i}}\n</span> \n
                  </div>\n
                </div>\n
              </div>\n', user_detailed_list: "{{#items}}\n {{&gt;user_detailed_list_item}}\n{{/items}}", 
tweet_source: '<span class="tweet-source">{{_i}}via {{{source}}}{{/i}}</span>', tweet_actions: "<span class='tweet-actions' data-tweet-id="\&quot;{{id}}\&quot;">\n\n {{^favorited}}\n <a href='#' class='favorite-action'><span><b>{{_i}}Favorite{{/i}}</b></span></a>\n {{/favorited}}\n {{#favorited}}\n <a href='#' class='unfavorite-action' data-favorited="\&quot;true\&quot;"><span><b>{{_i}}Unfavorite{{/i}}</b></span></a>\n {{/favorited}}\n\n {{^current_user_retweet}}\n {{#allowed_to_retweet}}\n <a href='#' class='retweet-action'><span><b>{{_i}}Retweet{{/i}}</b></span></a>\n {{/allowed_to_retweet}}\n {{/current_user_retweet}}\n {{#current_user_retweet}}\n <a href='#' class='unretweet-action' data-retweeted="\&quot;true\&quot;"><span><b>{{_i}}Undo Retweet{{/i}}</b></span></a>\n {{/current_user_retweet}}\n\n <a href='#' class='reply-action' data-screen-name="\&quot;{{#user}}{{screen_name}}{{/user}}\&quot;"><span><b>{{_i}}Reply{{/i}}</b></span></a>\n {{#is_owned_by_current_user}}\n <a href="/&quot;#/&quot;" class='delete-action'><span><b>{{_i}}Delete{{/i}}</b></span></a>\n {{/is_owned_by_current_user}}\n\n</span>", details_pane: "
              <div class="\&quot;inner-pane\&quot;">
                \n
                <div class='pane-toolbar pane-built-in'>
                  \n {{#popable}}\n <a class='pane-back toolbar-control' href='#'><span>\u0026larr;</span> {{back_label}}</a>\n {{/popable}}\n {{#closable}}\n <a class='pane-close toolbar-control' href='#'>{{_i}}close{{/i}} <span>\u0026times;</span></a>\n {{/closable}}\n<br style='clear: both'>
                  \n
                </div>\n
                <div class="\&quot;pane-components\&quot;"></div>\n
              </div>\n", 
home_page: '
              <div class="main-content">
                \n {{#render_page_content}}\n
                <div class="home-header">
                  \n
                  <div class="main-tweet-box">
                    \n {{&gt;posting_tweet_box}}\n
                  </div>\n
                  <ul class="stream-tabs">
                    <li style="list-style: none">\n
                    </li>
                    <li class="stream-tab stream-tab-home {{#active_tab_home}}active{{/active_tab_home}}">\n <a class="tab-text" title="\'{{_i}}All" you="" href="{{index_path}}">{{_i}}Timeline{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n
                    </li>
                    <li class="stream-tab stream-tab-mentions {{#active_tab_mentions}}active{{/active_tab_mentions}}">\n <a class="tab-text" title="\'{{_i}}Mentions{{/i}}\'" href="{{mentions_path}}">@{{_i}}Mentions{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n <!-- here once stood an html comment fight btwn @ded and @k -->\n
                    </li>
                    <li class="stream-tab stream-tab-retweets dropdown-link {{#active_tab_retweets}}active{{/active_tab_retweets}}">\n <a class="tab-text" href="#">{{_i}}Retweets{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n
                    </li>
                    <li class="stream-tab stream-tab-searches dropdown-link {{#active_tab_searches}}active{{/active_tab_searches}}">\n <a class="tab-text" href="#">{{_i}}Searches{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n
                    </li>
                    <li class="stream-tab stream-tab-lists dropdown-link {{#active_tab_lists}}active{{/active_tab_lists}}">\n <a class="tab-text" href="#">{{_i}}Lists{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n
                    </li>
                  </ul>\n
                </div>\n {{&gt;stream_manager}}\n {{/render_page_content}}\n
              </div>\n
              <div class="dashboard">
                \n {{#render_page_content}}\n {{#current_user}}\n {{&gt;home_dashboard}}\n {{/current_user}}\n {{/render_page_content}}\n
              </div>\n\n{{&gt;details_pane_container}}\n', 
place_tweets: '
              <div class="related-tweets">
                \n
                <h3>
                  {{_i}}Tweets at {{place_name}}{{/i}}
                </h3>\n {{#tweets}}\n {{&gt;simple_tweet}}\n {{/tweets}}\n {{#place_path}}\n <a class="place-tweets-footer-link more-link" href="{{place_path}}">\n {{_i}}View all Tweets at this place \u0026rarr;{{/i}}\n {{/place_path}}\n</a> \n
              </div>\n', 
what_the_trend: '
              <div class="what-the-trend">
                \n <span class="what-the-trending">{{_i}}TRENDING:{{/i}}</span> {{#blurb}}{{text}}{{/blurb}}\n
                <div class="what-the-trend-source">
                  \n \u0026nbsp; {{_i}}Source:\u0026nbsp;<a href="{{#links}}{{url}}{{/links}}" target="_blank">What\u0026nbsp;the\u0026nbsp;Trend?</a>{{/i}}\n
                </div>\n
              </div>', user_thumb_list: "
              <div style="margin-left: 2em" class='inline-list'>
                \n {{#items}}\n {{&gt;user_thumb_list_item}}\n {{/items}}\n
              </div>\n", tweet_meta: "
              <div class='tweet-meta'>
                \n <span class='icons'>\n {{#is_sponsored}}\n {{#retweet_count}}\n <em>{{retweet_count_text}}</em>\n {{/retweet_count}}\n {{/is_sponsored}}\n {{^is_sponsored}}\n {{#was_retweeted}}\n {{#retweeting_status}}\n {{#user}}<em>{{_i}}by {{screen_name}}{{/i}}</em>{{/user}}\n {{/retweeting_status}}\n {{/was_retweeted}}\n {{/is_sponsored}}\n</span>
                <div class="\&quot;extra-icons\&quot;">
                  \n {{#is_reply}}\n <span class='reply-icon icon'>@</span>\n {{/is_reply}}\n \n {{#has_geo}}\n {{#has_geo_point}}{{/has_geo_point}}\n {{/has_geo}}\n
                </div>\n \n
              </div>", 
recent_list: '
            </li>
            <li class="recent-list-item">\n <a href="{{user_list_path}}" data-user-id="{{id}}">{{name}}</a>\n
            </li>
            <li style="list-style: none">\n', 
first_time_dialog: '
              <div style="visibility: hidden;">
                \n
                <div class="twttr-dialog" style="top: 142px !important;">
                  \n
                  <div class="twttr-dialog-inside">
                    \n
                    <div class="twttr-dialog-body clearfix">
                      \n
                      <div class="twttr-dialog-content twttr-dialog-first-time">
                        \n
                        <div>
                          \n
                          <h2 class="first-time">
                            {{_i}}Everything in one place.{{/i}}
                          </h2>\n
                          <p class="first-time-text">
                            \n {{_i}}Preview <strong>pictures</strong> <strong>videos</strong> <strong class="text-replies">replies</strong> right from Twitter!{{/i}}\n
                          </p>\n
                          <p>
                            \n {{_i}}Click on the arrow button in a Tweet to view rich media and related content in a details pane.{{/i}}\n
                          </p>\n
                          <div class="image-container first-time">
                            \n <img src="/phoenix/img/promo-screenshot.png">\n
                          </div>\n
                          <div class="button ok-thanks">
                            <strong>{{_i}}OK, thanks!{{/i}}</strong>
                          </div>\n
                        </div>\n
                      </div>\n
                    </div>\n
                  </div>\n
                </div>\n
              </div>\n', 
list_page: '
              <div class="main-content">
                \n {{{noscript}}}\n {{#list}}\n
                <div class="list-header user-sidebar-color">
                  \n
                  <div class="list-info">
                    \n
                    <h2 class="full-name">
                      {{name}}
                    </h2>\n
                    <p class="description">
                      {{description}}
                    </p>\n
                    <hr>
                    \n
                    <div class="things-below-the-hr">
                      \n
                      <div class="\'list-creator">
                        \n {{#user}}\n <img id="\'profile-picture\'" src="{{profile_image_url}}" alt="{{name}}" name="\'profile-picture\'">\n {{/user}}\n
                        <p>
                          \n {{_i}}A <strong>{{#is_public}}public{{/is_public}}{{^is_public}}private{{/is_public}}</strong> list{{/i}}\n<br>
                          \n {{#user}}\n <span>{{_i}}Curated by <a href="{{profile_path}}">{{name}}</a>{{/i}}\n {{/user}}\n</span>
                        </p>\n
                      </div>\n
                      <div class="list-actions-component">
                        \n
                      </div>\n
                    </div>\n
                  </div>\n <!-- todo: put the list actions here with display:none rather than appending them in js ( twttr.components.pages.List.renderListInfo() ) -->\n
                  <ul class="stream-tabs">
                    <li style="list-style: none">\n
                    </li>
                    <li class="stream-tab stream-tab-tweets {{#active_tab_tweets}}active{{/active_tab_tweets}}">\n <a class="tab-text" href="{{user_list_path}}">{{_i}}Tweets{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n
                    </li>
                    <li class="stream-tab stream-tab-members {{#active_tab_members}}active{{/active_tab_members}}">\n <a class="tab-text" href="{{list_members_path}}">{{_i}}Following: <strong>{{member_count}}</strong>{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n
                    </li>
                    <li class="stream-tab stream-tab-followers {{#active_tab_followers}}active{{/active_tab_followers}}">\n <a class="tab-text" href="{{list_subscribers_path}}">{{_i}}Followers: <strong>{{subscriber_count}}</strong>{{/i}}</a>\n
                    </li>
                    <li style="list-style: none">\n
                    </li>
                  </ul>\n
                </div>\n {{&gt;stream_manager}}\n {{/list}}\n {{{end_noscript}}}\n
              </div>\n
              <div class="dashboard"></div>\n{{&gt;details_pane_container}}', pill_css: ".profile-style-{{screen_name}} a {\n {{#profile_link_color}}\n color: #{{profile_link_color}} !important;\n {{/profile_link_color}}\n}\n\na:hover .geo-pin, body.user-style-{{screen_name}} .stream-item:hover .geo-pin, .place_link span.place_icon {\n background-color: #{{profile_link_color}};\n}", 
geo_promo_dialog: '
              <div id="geo_promo_dialog_content">
                \n
                <div class="tiny-map">
                  <img src="/images/tiny-map.gif">
                </div>\n
                <div id="geo_dialog_descr">
                  \n {{_i}}Ever had something you wanted to share ("fireworks!", "party!", "ice cream truck!", or "quicksand...") that would be better with a location?{{/i}}\u0026#32;\n {{_i}}By turning on this feature, you can include location information like neighborhood, town, or exact point when you tweet.{{/i}}<br>
                  <br>
                  \n {{_i}}When you tweet with a location, Twitter stores that location.{{/i}}\u0026#32;\n {{_i}}You can switch location on/off before each Tweet and always have the option to delete your location history.{{/i}}\u0026#32;\n <a id="geo_learn_more" href="http://twitter.zendesk.com/forums/26810/entries/78525" target="_blank" name="geo_learn_more">{{_i}}Learn more{{/i}}</a>\n
                </div>\n
                <div>
                  \n <button id="geo_turn_location_on" class="btn btn-default">{{_i}}Turn location on{{/i}}</button>\n <a href="#" id="geo_not_now" class="geo_dialog_close" name="geo_not_now">{{_i}}Not now{{/i}}</a>\n <span class="geo-progress">\u0026nbsp;</span>\n
                </div>\n
                <div class="geo-unable-to-turn-location-on">
                  \n {{_i}}Unable to turn location on at this time. Please try again later.{{/i}}\n
                </div>\n
              </div>', 
geo_map_big: '
              <div class="tweet_geo_big">
                \n{{#place}}\n
                <div class="geo_map_place_details">
                  \n
                  <div class="geo_map_place_name">
                    {{name}}
                  </div>\n
                  <div>
                    {{full_address}}
                  </div>\n
                  <div>
                    {{phone}}
                  </div>\n {{#place_path}}\n
                  <div>
                    \n <a class="geo_map_place_page_link" href="{{place_path}}">\n {{_i}}View more about this place \u0026rarr;{{/i}}\n</a> \n
                  </div>\n {{/place_path}}\n
                </div>\n{{/place}}\n{{^place}}\n {{#user}}\n
                <div class="geo_map_place_details">
                  \n
                  <div class="geo_map_place_name">
                    {{_i}}@{{screen_name}}\'s Tweet location{{/i}}
                  </div>\n
                </div>\n {{/user}}\n{{/place}}\n
                <div class="map_canvas"></div>\n
              </div>\n', dashboard_profile: "{{&gt;dashboard_profile_stats}}\n
              <hr>
              \n{{&gt;dashboard_who_to_follow}}\n
              <hr>
              \n{{&gt;dashboard_promo}}", 
geo_add_location_geo_enabled: '<span class="crosshairs">\u0026nbsp;</span>\n<a class="geo_enable_webclient" href="#">{{_i}}Add your location{{/i}}</a>', 
related_tweets: '
              <div class="related-tweets">
                \n
                <h3>
                  {{_i}}{{{niceGroupName}}}{{/i}}
                </h3>\n {{#tweetResults}}\n {{&gt;simple_tweet}}\n {{/tweetResults}}\n {{#linkResults}}\n {{&gt;link_list}}\n {{/linkResults}}\n {{#picResults}}\n
                <div class="related-images-container"></div>\n {{/picResults}}\n
              </div>', message_notification: "{{#message}}\n
              <div data-sender-id='{{sender_screen_name}}' data-message-id="\&quot;{{id}}\&quot;" class='notification'>
                \n <a class='dismiss' href='#'>\u0026times;</a>\n
                <h1>
                  {{_i}}New Message from {{{sender_screen_name}}}{{/i}}
                </h1>\n
                <div class='message-text'>
                  {{{text}}}
                </div>\n
                <div class="\&quot;message-notification-reply-box\&quot;">
                  \n
                  <div class="\&quot;message-notification-reply-editor\&quot;"></div>\n
                  <div class="\&quot;message-notification-reply-button">
                    {{_i}}Send{{/i}}
                  </div>\n
                </div>\n
              </div>\n{{/message}}", 
geo_search_result_item: '{{#is_poi}}\n
            </li>
            <li id="result_place_{{id}}">\n <span class="geo-place-search-result-icon">\u0026nbsp;</span><a href="#">{{name}}</a><br>
              \n <span class="geo-place-details">{{full_address}}</span>\n
            </li>
            <li style="list-style: none">\n{{/is_poi}}\n{{^is_poi}}\n
            </li>
            <li id="result_place_{{id}}">\n <a href="#">{{name}}</a><br>
              \n <span class="geo-place-details">{{full_address}}</span>\n
            </li>
            <li style="list-style: none">\n{{/is_poi}}\n', 
geo_dropdown_item: '{{#is_poi}}\n
            </li>
            <li class="place_{{id}}">\n <span class="place_item_icon">\u0026nbsp;</span>\n <span class="place_icon">\u0026nbsp;</span> {{formatted_name}}\n <span class="place_details">{{details}}</span>\n
            </li>
            <li style="list-style: none">\n{{/is_poi}}\n{{^is_poi}}\n
            </li>
            <li class="place_{{id}}">\n <span class="place_item_icon">\u0026nbsp;</span>\n <span class="place_noicon">{{formatted_name}}</span>\n
            </li>
            <li style="list-style: none">\n{{/is_poi}}\n', 
geo_chrome_banner: '
              <div id="geo_browser_help_banner" class="geo_chrome">
                \n
                <div>
                  {{_i}}Click "Allow" to let Twitter get your location.{{/i}}
                </div>\n
              </div>\n', 
list_dialog: '
              <div class="list-editor">
                \n
                <div class="field">
                  \n <label for="list-name">{{_i}}List name{{/i}}</label>\n <input type="text" class="text" name="name" value="{{name}}">\n
                </div>\n
                <div class="field" style="display:none">
                  \n <label for="list-link">{{_i}}List link{{/i}}</label>\n <span>{{full_name}}</span>\n
                </div>\n
                <hr>
                \n\n
                <div class="field">
                  \n <label for="description">{{_i}}Description{{/i}}</label>\n 
                  <textarea name="description">
      {{description}}
      </textarea>\n <span class="help-text">{{_i}}Under 100 characters, optional{{/i}}</span>\n
                </div>\n
                <hr>
                \n\n
                <div class="field">
                  \n <label for="mode">{{_i}}Privacy{{/i}}</label>\n
                  <div class="options">
                    \n <label for="list-public-radio">\n <input class="radio" type="radio" name="mode" id="list-public-radio" value="public">\n <b>{{_i}}Public{{/i}}</b> \u0026middot; {{_i}}Anyone can follow this list{{/i}}\n</label> \n <label for="list-private-radio">\n <input class="radio" type="radio" name="mode" id="list-private-radio" value="private">\n <b>{{_i}}Private{{/i}}</b> \u0026middot; {{_i}}Only you can access this list{{/i}}\n</label> \n
                  </div>\n
                </div>\n
                <hr>
                \n\n
                <div class="save">
                  \n
                  <div class="button update-list-button" data-list-id="{{id}}">
                    {{_i}}Save list{{/i}}
                  </div>\n
                </div>\n\n
              </div>', 
place_business_claimed: '
              <h2>
                {{_i}}<strong>{{place_name}}</strong> has been claimed by{{/i}}
              </h2>\n
              <div class="geo-place-page-owner">
                \n {{#user_list}}\n {{&gt;user_small_list}}\n {{/user_list}}\n
              </div>\n{{#tweet}}\n
              <div class="tweet latest-tweet geo-place-page-latest-tweet" data-tweet-id="{{id}}" data-item-id="{{id}}" data-screen_name="\'{{#user}}{{screen_name}}{{/user}}\'">
                \n
                <div class="tweet-content">
                  \n
                  <div class="tweet-row">
                    \n {{&gt;latest_tweet_timestamp}}: {{&gt;tweet_text}}\n
                  </div>\n
                </div>\n
              </div>\n{{/tweet}}\n', 
your_activity: '{{&gt;profile_activity}}\n\n{{#favorites_count_commaized}}\n
              <div class="your-activity favorites-activity">
                \n
                <h2>
                  \n <a href="{{user_favorites_path}}" class="title-link">{{_i}}Favorites{{/i}} <span class="\'user-stat-link\'">{{favorites_count_commaized}}</span></a>\n
                </h2>\n
                <div class="\'latest-favorite\'"></div>\n
              </div>\n{{/favorites_count_commaized}}\n\n
              <div class="your-activity lists-activity">
                \n
                <h2>
                  \n <a href="{{memberships_path}}" class="title-link">{{_i}}Listed{{/i}} <span class="\'user-stat-link\'">{{listed_count_commaized}}</span></a>\n
                </h2>\n
              </div>\n', tweet_text_large: "
              <div class='tweet-text tweet-text-large'>
                {{{linkified_text}}}
              </div>", 
pane_header: '
              <div class="header">
                \n <em>{{pane_header_text}}</em>\n
                <div class="back-button button">
                  {{_i}}\u0026larr; Back{{/i}}
                </div>\n
              </div>', 
user_thumb_list_item: '
            </li>
            <li class="user-thumb-list-member">\n <a href="{{profile_path}}" class="user-profile-link" data-user-id="{{id}}"><img src="{{mini_profile_image_url}}" height="24" width="24" title="{{screen_name}}"></a>\n
            </li>
            <li style="list-style: none">', user_small_list: "{{#items}}\n {{&gt;user_small_list_item}}\n{{/items}}", 
tweet_dogear: '
              <div class="tweet-dogear {{dogear_css_classes}}"></div>', 
newest_list_members: '
              <div class="newest-list-members">
                \n
                <h2>
                  {{_i}}Recently Following{{/i}}
                </h2>\n {{#list}}\n
                <h3 class="recently-followed">
                  {{_i}}This list\'s most recently followed accounts \u0026middot; <a href="{{list_members_path}}">View all following</a>{{/i}}
                </h3>\n {{/list}}\n
                <div style="margin-left: 2em" class="\'list-members\'">
                  \n {{#members}}\n {{&gt;user_small_list}}\n {{/members}}\n
                </div>\n
              </div>', 
place_users_page: '
              <div class="main-content">
                \n {{{noscript}}}\n
                <div class="search-header">
                  \n
                  <div class="back-to-home">
                    \n <a href="{{place_path}}">{{_i}}\u0026larr; Back to {{name}}{{/i}}</a>\n
                  </div>\n
                </div>\n
                <div class="geo-place-page-title">
                  \n
                  <h2>
                    \n {{#poi}}\n {{_i}}Recent people at <strong>{{name}}</strong>{{/i}}\n {{/poi}}\n {{^poi}}\n {{_i}}Recent people in <strong>{{name}}</strong>{{/i}}\n {{/poi}}\n
                  </h2>\n
                  <div class="geo-place-page-details">
                    \n {{#location_service_down}}\n {{_i}}Location service is temporarily unavailable{{/i}}\n {{/location_service_down}}\n
                  </div>\n
                </div>\n
                <ul class="stream-tabs">
                  <li style="list-style: none">\n
                  </li>
                  <li class="stream-tab stream-tab-all {{#active_tab_all}}active{{/active_tab_all}}">\n <a class="tab-text" href="{{place_users_path}}">{{_i}}All{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n
                  </li>
                  <li class="stream-tab stream-tab-following {{#active_tab_following}}active{{/active_tab_following}}">\n <a class="tab-text" href="{{place_users_following_path}}">{{_i}}Following{{/i}}</a>\n
                  </li>
                  <li style="list-style: none">\n
                  </li>
                </ul>\n {{&gt;stream_manager}}\n {{{end_noscript}}}\n
              </div>\n
              <div class="dashboard place-dashboard"></div>\n{{&gt;details_pane_container}}', 
permalink_page: '
              <div class="permalink">
                \n
                <div class="components-above"></div>\n
                <div class="components-middle">
                  \n {{#render_page_content}}\n {{#tweet}}\n {{&gt;permalink_tweet}}\n {{/tweet}}\n {{/render_page_content}}\n
                </div>\n
                <div class="components-below"></div>\n
              </div>', 
mentioned_in_tweet: '
              <div class="mentioned-in-tweet">
                \n
                <h3>
                  {{_i}}Mentioned in this tweet{{/i}}
                </h3>\n
                <div style="margin-left: 2em" class="clearfix">
                  \n {{#mentioned_users}}\n {{&gt;user_detailed_list}}\n {{/mentioned_users}}\n
                </div>\n
              </div>\n', 
permalink_tweet: '{{#can_view}}\n
              <div class="tweet permalink-tweet {{css_classes}}" data-tweet-id="{{id}}" data-item-id="{{id}}" data-screen-name="\'{{#user}}{{screen_name}}{{/user}}\'">
                \n
                <div class="tweet-row">
                  \n {{#user}}\n {{&gt;tweet_user_block}}\n {{/user}}\n
                  <div class="tweet-corner">
                    \n {{&gt;tweet_meta}}\n
                  </div>\n
                </div>\n
                <div class="tweet-row">
                  \n {{&gt;tweet_text_large}}\n
                </div>\n
                <div class="tweet-row">
                  \n {{&gt;tweet_timestamp}}\n {{&gt;tweet_contributor}}\n {{&gt;tweet_source}}\n {{&gt;tweet_actions}}\n
                </div>\n
              </div>\n{{/can_view}}\n{{^can_view}}\n {{_i}}This person has protected their Tweets.{{/i}}\n{{/can_view}}\n', place_page_users_following_title: "{{#poi}}\n {{_i}}Twitter / Recent people you are following at {{{placeName}}}{{/i}}\n{{/poi}}\n{{^poi}}\n {{_i}}Twitter / Recent people you are following in {{{placeName}}}{{/i}}\n{{/poi}}\n", 
simple_tweet: '
              <div class="stream-item">
                \n
                <div class="\'more\'">
                  \u0026raquo;
                </div>\n
                <div class="stream-item-content tweet stream-tweet simple-tweet {{css_classes}}" data-tweet-id="{{id}}" data-item-id="{{id}}" data-user-id="{{id}}">
                  \n {{&gt;tweet_dogear}}\n
                  <div class="tweet-image simple-tweet-image">
                    \n {{&gt;tweet_user_image_32}}\n
                  </div>\n
                  <div class="tweet-content simple-tweet-content">
                    \n
                    <div class="tweet-row">
                      \n {{&gt;tweet_user_name}}\n
                      <div class="tweet-corner">
                        \n {{&gt;tweet_meta}}\n
                      </div>\n
                    </div>\n
                    <div class="tweet-row">
                      \n {{&gt;tweet_text}}\n
                    </div>\n
                    <div class="tweet-row">
                      \n {{&gt;tweet_geo_text}}\n
                    </div>\n
                    <div class="tweet-row">
                      \n {{&gt;tweet_timestamp}}\n {{&gt;tweet_actions}}\n
                    </div>\n
                    <div class="tweet-row">
                      \n {{&gt;tweet_labels}}\n
                    </div>\n
                  </div>\n
                </div>\n
              </div>', 
dashboard_your_profile: '
              <div class="tweet-activity">
                \n
                <div class="follower-request"></div>\n
                <h2>
                  <a href="{{profile_path}}" class="title-link">{{_i}}Your Tweets{{/i}}<span class="tweet-count user-stat-link">{{statuses_count_commaized}}</span></a>
                </h2>\n{{#status}}\n {{&gt;latest_tweet}}\n{{/status}}\n
              </div>', 
no_list_members: '
              <p class="no-members">
                {{_i}}This list doesn\u2019t follow any users yet. It probably will soon, though.{{/i}}
              </p>\n', 
who_to_follow_dropdown: '
              <div class="wtf-dropdown profile-actions">
                \n <a href="#" class="dismiss">\u0026times;</a>\n
                <h2>
                  {{_i}}Since you followed {{user}}, you might also want to follow:{{/i}}
                </h2>\n
                <div style="margin-left: 2em" class="recommended-followers wtf-component">
                  \n {{#recommended_followers}}\n {{&gt;user_small_list}}\n {{/recommended_followers}}\n
                </div>\n
              </div>', 
stream_tweet_box: '
              <div class="stream-tweet-box">
                \n
                <div class="tweet-area"></div>\n\n
                <div class="tweet-button-container">
                  \n <span class="tweet-counter">140</span>\n <a class="tweet-button button" href="#">{{_i}}Tweet{{/i}}</a>\n
                </div>\n
              </div>', 
stream_item: '
              <div class="\'stream-item\'" data-item-id="{{item_id}}" data-item-type="{{item_type}}">
                \n {{{item_html}}}\n
              </div>', 
sign_up_call_out: '
              <div class="signup-call-out">
                \n
                <h1>
                  <span>{{_i}}Get short, timely messages from {{name}}.{{/i}}</span>
                </h1>\n
                <h2>
                  {{_i}}Twitter is a rich source of instantly updated information. It\'s easy to stay updated on an incredibly wide variety of topics. {{/i}} {{_i}}<strong><a href="/'{{signup_path}}?follow={{screen_name}}/'">Join today</a></strong> and <strong>follow @{{screen_name}}</strong>.{{/i}}
                </h2>\n
                <div id="profilebutton">
                  \n
                  <form action="{{signup_path}}" id="account_signup_form" method="get" name="account_signup_form">
                    \n <input id="follow" name="follow" type="hidden" value="{{screen_name}}">\n <input class="profilesubmit promotional" id="profile_submit" name="commit" type="submit" value="{{_i}}Get started now \u0026raquo;{{/i}}">\n
                  </form>\n
                  <p id="profilebox-mobile">
                    \n <span class="sms-follow-instructions">{{_i}}Get updates via SMS by texting <strong>follow {{screen_name}}</strong> to <strong>40404</strong> in the United States{{/i}}</span><br>
                    \n <a id="sms_codes_link" name="sms_codes_link"><span>{{_i}}Codes for other countries{{/i}}</span></a>\n
                  </p>\n
                </div>\n
              </div>', message_thread_preview: "
              <div class='message-thread-preview stream-item-content' data-screen-name="\&quot;{{#other_person}}{{screen_name}}{{/other_person}}\&quot;">
                \n
                <div class="\&quot;more\&quot;">
                  {{_i}}\u00bb{{/i}}
                </div>\n
                <div class='message-inner'>
                  \n {{#other_person}}\n <img src='{{profile_image_url}}' alt='{{name}}' class='thumb' data-user-id='{{id}}'>\n <span class='user-name'><strong>{{screen_name}}</strong> <b class='full-name'>{{name}}</b></span>\n {{/other_person}}\n
                  <div class='message-content'>
                    \n {{#last_message}}\n <span class='created-at'><span class="\&quot;_timestamp\&quot;" data-time="\&quot;{{actual_timestamp}}\&quot;" data-long-form="\&quot;true\&quot;" data-include-sec="\&quot;true\&quot;">{{timestamp}}</span></span>\n {{/last_message}}\n
                    <div class="\&quot;message-count\&quot;">
                      {{message_count}}
                    </div>\n
                  </div>\n
                </div>\n
              </div>\n", 
in_reply_to: '
              <div class="in-reply-to" data-replied-tweet-id="{{id}}">
                \n {{&gt;simple_tweet}}\n
                <fieldset class="in-reply-to-border">
                  \n <legend class="in-reply-to-text">\n {{_i}}in reply to{{/i}}\u0026nbsp;<a class="\'user-profile-link\'" data-user-id="\'{{#user}}{{id}}{{/user}}\'" href="{{#user}}{{profile_path}}{{/user}}">@{{#user}}{{screen_name}}{{/user}}\u0026nbsp;\u0026uarr;</a>\n</legend> \n
                </fieldset>\n
              </div>\n', dashboard_user: "
              <div class='home-dashboard dashboard'>
                \n {{&gt;user_stats}}\n
                <hr class="\&quot;wtf-component\&quot;">
                \n {{&gt;who_to_follow}}\n
                <div class='definition'>
                  \n
                  <p id="\&quot;promo\&quot;"></p>\n
                </div>\n
              </div>", tweet_user_image_32: "{{#user}}\n<img height="\&quot;32\&quot;" width="\&quot;32\&quot;" src='{{profile_image_url}}' alt='{{name}}' class='user-profile-link' data-user-id='{{id}}'>\n{{/user}}\n", 
stream_user_buttons: '
              <div class="stream-user-buttons">
                \n <!-- don\'t render follow button if it\'s you -->\n {{^is_current_user}}\n {{^following}}\n {{#follow_request_sent}}\n
                <div class="pending-request">
                  \n <span>{{_i}}pending{{/i}}</span>\n <a href="#">{{_i}}(cancel){{/i}}</a>\n
                </div>\n {{/follow_request_sent}}\n {{^follow_request_sent}}\n
                <div class="button follow-button" data-user-id="{{id}}"></div>\n {{/follow_request_sent}}\n {{/following}}\n {{#following}}\n
                <div class="button unfollow-button" data-user-id="{{id}}"></div>\n {{/following}}\n {{/is_current_user}}\n\n
                <div class="button list-action-button" data-user-id="{{id}}">
                  \n \n \n
                </div>\n
              </div>\n', 
sms_codes: '
              <div id="sms_codes" style="display:block">
                \n \n \n \n \n \n \n \n \n \n \n\n \n \n\n \n \n\n \n \n\n \n \n\n \n \n\n \n \n\n \n \n\n\n
                <table celpadding="0" celspacing="0">
                  <tbody>
                    <tr>
                      <th class="sms-country">
                        {{_i}}Country{{/i}}
                      </th>
                      <th class="sms-code">
                        {{_i}}Code{{/i}}
                      </th>
                      <th class="sms-network">
                        {{_i}}For customers of{{/i}}
                      </th>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}Australia{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">0198089488</span>\n <span class="sms-network">{{_i}}Telstra{{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}Canada{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">21212</span>\n <span class="sms-network">{{_i}}(any){{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}United Kingdom{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">86444</span>\n <span class="sms-network">{{_i}}Vodafone, Orange, 3, O2{{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}Indonesia{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">89887</span>\n <span class="sms-network">{{_i}}AXIS, 3, Telkomsel{{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}Ireland{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">51210</span>\n <span class="sms-network">{{_i}}O2{{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}India{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">53000</span>\n <span class="sms-network">{{_i}}Bharti Airtel{{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}New Zealand{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">8987</span>\n <span class="sms-network">{{_i}}Vodafone, Telecom NZ{{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                    <tr>
                      <td class="sms-country">
                        {{_i}}United States{{/i}}
                      </td>
                      <td class="sms-code-network" colspan="2">
                        \n
                        <ul>
                          <li style="list-style: none">\n
                          </li>
                          <li>\n <span class="sms-code">40404</span>\n <span class="sms-network">{{_i}}(any){{/i}}</span>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                        </ul>\n
                      </td>
                    </tr>
                  </tbody>
                </table>\n
              </div>', 
profile_page: '
              <div class="main-content">
                \n {{#render_page_content}}\n {{^logged_in}}\n {{#profile_user}}\n {{&gt;sign_up_call_out}}\n {{/profile_user}}\n {{/logged_in}}\n {{#profile_user}}\n {{&gt;profile_header}}\n {{/profile_user}}\n {{&gt;stream_manager}}\n {{/render_page_content}}\n
              </div>\n
              <div class="dashboard profile-dashboard">
                \n {{#render_page_content}}\n {{#rendering_on_server}}\n {{#profile_user}}\n {{&gt;profile_dashboard}}\n {{/profile_user}}\n {{/rendering_on_server}}\n {{/render_page_content}}\n
              </div>\n{{&gt;details_pane_container}}', local_trend_location: "
              <dl>
                <dd>
                  <a href='#' data-woeid="\&quot;{{woeid}}\&quot;">{{name}}</a>
                </dd>
                <dt>
                  ", 
no_lists: '
                </dt>
                <dd>
                  <div class="empty-drop-down">
                    \n
                    <div class="no-lists title">
                      {{_i}}You don\'t have any lists yet.{{/i}}
                    </div>\n
                    <p class="no-lists info">
                      \n {{_i}}Create a custom timeline of Tweets by adding users to a list (<a href="{{lists_help_path}}">see how</a>). You can also follow lists curated by others.{{/i}}\n
                    </p>\n
                  </div>', 
geo_firefox_banner: '
                  <div id="geo_browser_help_banner" class="geo_firefox">
                    \n
                    <div>
                      {{_i}}Before Twitter can get your location...{{/i}}
                    </div>\n
                    <div>
                      <img src="/images/geo_browser_help_banner_1.png">{{_i}}Check "Remember for this site"{{/i}}
                    </div>\n
                    <div>
                      <img src="/images/geo_browser_help_banner_2.png">{{_i}}Click "Share Location"{{/i}}
                    </div>\n
                  </div>\n', 
send_message_box: '
                  <div class="tweet-box condensed">
                    \n
                    <h2>
                      {{_i}}Send{{/i}}\u0026nbsp;{{screen_name}} {{_i}}a message{{/i}}
                    </h2>\n
                    <div class="send-message-box"></div>\n
                  </div>', 
link_list: '{{%IMPLICIT-ITERATOR iterator=link}}\n
                  <ul class="thumbs">
                    <li style="list-style: none">\n {{#links}}\n
                    </li>
                    <li>
                      <a href="{{link}}" target="_blank">{{link}}</a>
                    </li>
                    <li style="list-style: none">\n {{/links}}\n
                    </li>
                  </ul>', 
latest_tweet: '
                  <div class="tweet latest-tweet" data-tweet-id="{{id}}" data-item-id="{{id}}" data-screen-name="\'{{#user}}{{screen_name}}{{/user}}\'">
                    \n
                    <div class="tweet-image">
                      \n <a href="{{#user}}{{profile_path}}{{/user}}">{{&gt;tweet_user_image_48}}</a>\n
                    </div>\n
                    <div class="tweet-content">
                      \n
                      <div class="tweet-row">
                        \n {{&gt;latest_tweet_timestamp}}:\n {{#was_retweeted}}\n \n {{{retweet_source_screen_name_link}}}\n {{/was_retweeted}}\n \u0026#32;{{&gt;tweet_text}}\n
                      </div>\n
                    </div>\n
                  </div>\n', 
japanese_ad: '<iframe allowtransparency="true" src="http://pages.quantumads.com/imp2/49.php" width="300" height="185" style="border:0px;margin:0px;overflow:hidden" frameborder="0" scrolling="no"></iframe>\n', 
profile_list_tags: '
                  <div class="list-tags">
                    \n
                    <hr>
                    \n <span class="your-lists">{{_i}}Your Lists:{{/i}}</span>\n {{#items}}\n <span class="{{class}}">\n <a href="{{uri}}">\n {{{name}}}\n {{#isPrivate}}\n \n {{/isPrivate}}\n</a> \n</span> \n {{/items}}\n
                  </div>', 
web_search_results: '
                  <h2>
                    {{_i}}Web results for <strong>{{query}}</strong>{{/i}}
                  </h2>\n
                  <ul class="web-search-results">
                    <li style="list-style: none">\n{{#results}}\n
                    </li>
                    <li>\n <a href="{{Url}}" class="result-title" target="_blank"><span class="result-title-text">{{{Title}}}</span>\n <span class="result-link" target="_blank">{{DisplayUrl}}</span></a>\n
                    </li>
                    <li style="list-style: none">\n{{/results}}\n
                    </li>
                  </ul>\n<a href="{{more_results_url}}" target="_blank">{{_i}}More web results from Bing \u0026rarr;{{/i}}</a>', 
user_admin_tools: '
                  <ul>
                    <li class="user-admin-tools">
                      <form class="become-user-form" action="{{become_user_path}}" method="post">
                        <a class="become-user-button" href="#">Become @{{screen_name}}</a>
                      </form>
                    </li>
                    <li style="list-style: none">\n
                    </li>
                    <li class="user-admin-tools">
                      <a href="{{admin_find_path}}" title="{{_i}}Investigate!{{/i}}" target="_blank">Investigate @{{screen_name}}</a>
                    </li>
                    <li style="list-style: none">\n', 
geo_progress: '<span class="crosshairs">\u0026nbsp;</span>\n<span class="geo_progress">{{message}}</span>\n{{&gt;geo_disable_geo}}', 
next_steps: '
                      <div class="next-steps">
                        \n
                        <div class="next-steps-content">
                          \n
                          <h2>
                            {{_i}}What to do now{{/i}}
                          </h2>\n
                          <ol>
                            <li style="list-style: none">\n
                            </li>
                            <li>\n {{_i}}Tell us what <strong>you\u0026rsquo;re</strong> doing in the box above{{/i}}\n
                              <p class="next-steps-note">
                                \n {{#protected_account}}\n {{_i}}Your Tweets are protected and only available to your followers. You can make your Tweets public on your <a href="{{settings_path}}">account page</a>.{{/i}}\n {{/protected_account}}\n {{^protected_account}}\n {{_i}}Note that your Tweets will be available publicly. You can make your Tweets private on your <a href="{{settings_path}}">account page</a>.{{/i}}\n {{/protected_account}}\n
                              </p>\n
                            </li>
                            <li style="list-style: none">\n
                            </li>
                            <li>\n {{_i}}<a href="{{find_and_follow_path}}">Find some friends</a> and follow what <strong>they\u0026rsquo;re</strong> doing{{/i}}\n
                            </li>
                            <li style="list-style: none">\n
                            </li>
                            <li>\n {{_i}}<a href="{{devices_path}}">Turn on your mobile phone</a> to update your friends on the go{{/i}}\n
                            </li>
                            <li style="list-style: none">\n
                            </li>
                          </ol>\n
                        </div>\n
                      </div>\n', 
default_dropdown_item: '
                    </li>
                    <li class="{{class}}">
                      <b class="item-name">{{{label}}}</b>
                    </li>
                    <li style="list-style: none">\n', 
details_pane_tweet: '
                      <div class="tweet details-pane-tweet {{css_classes}}" data-tweet-id="{{id}}" data-screen-name="{{#user}}{{screen_name}}{{/user}}">
                        \n {{&gt;tweet_dogear}}\n
                        <div class="tweet-row">
                          \n {{#user}}\n {{&gt;tweet_user_block}}\n {{/user}}\n
                        </div>\n
                        <div class="tweet-row">
                          \n {{&gt;tweet_text_large}}\n
                        </div>\n
                        <div class="tweet-row">
                          \n {{&gt;tweet_timestamp}}\n {{&gt;tweet_contributor}}\n {{&gt;tweet_source}}\n {{&gt;tweet_actions}}\n
                        </div>\n
                      </div>\n', 
profile_rss: '\n\n\n', 
profile_dashboard: '
                      <div class="component">
                        \n{{&gt;dashboard_profile_stats}}\n
                        <hr>
                        \n
                      </div>\n
                      <div class="component">
                        \n{{&gt;dashboard_footer}}\n
                      </div>', message: "
                      <div class='message' data-message-id="\&quot;{{id}}\&quot;" data-thread-id="\&quot;{{thread_id}}\&quot;">
                        \n
                        <div class='message-inner'>
                          \n {{#sender}}\n <img src='{{profile_image_url}}' alt='{{name}}' class='thumb user-profile-link' data-user-id='{{id}}'>\n <span class='user-name'>\n <a class='user-profile-link' data-user-id='{{id}}' href='#' title='{{name}}'>{{screen_name}}</a>\n</span> \n {{/sender}}\n
                          <div class='message-content'>
                            \n
                            <div class='linked-text'>
                              {{{linkified_text}}}
                            </div>\n
                            <div class='message-footer'>
                              \n <span class='created-at'><span class="\&quot;_timestamp\&quot;" data-time="\&quot;{{actual_timestamp}}\&quot;" data-long-form="\&quot;true\&quot;" data-include-sec="\&quot;true\&quot;">{{timestamp}}</span></span>\n <a class='delete-action' href="/&quot;#/&quot;"> <b>{{_i}}Delete{{/i}}</b></a>\n
                            </div>\n
                          </div>\n
                        </div>\n
                      </div>", 
prompt: '
                      <div class="twttr-prompt">
                        \n
                        <div class="button twttr-prompt-ok">
                          {{ok}}
                        </div>\n
                        <div class="button twttr-prompt-cancel">
                          {{cancel}}
                        </div>\n
                      </div>', place_page_tweets_title: "{{#poi}}\n {{_i}}Twitter / Tweets at {{{placeName}}}{{/i}}\n{{/poi}}\n{{^poi}}\n {{_i}}Twitter / Tweets in {{{placeName}}}{{/i}}\n{{/poi}}\n", 
geo_place_search: '
                      <form id="place_search_form" name="place_search_form">
                        \n \n \n \n \n \n \n \n \n \n \n \n \n
                        <table class="geo_place_search_table">
                          <tr>
                            <td class="geo_place_search_col1 geo_place_search_city">
                              {{_i}}City{{/i}}
                            </td>
                            <td class="geo_place_search_city">
                              {{city}}\u0026#32;\u0026nbsp;<a href="#" id="change_city" name="change_city">{{_i}}Change{{/i}}</a>
                            </td>
                          </tr>
                          <tr>
                            <td class="geo_place_search_col1 geo_place_search_place">
                              {{_i}}Place Name{{/i}}
                            </td>
                            <td class="geo_place_search_place">
                              \n <input id="place_search_query" type="text" autocomplete="off" class="round-left help-focusable" title="{{_i}}Type the name of a place{{/i}}"><span class="place_search_submit round-right" title="{{_i}}Search{{/i}}">\u0026nbsp;</span>\n
                              <ul class="round places_list place_search_dropdown"></ul>\n
                            </td>
                          </tr>
                          <tr>
                            <td></td>
                            <td class="geo_place_search_hint">
                              {{_i}}Optional{{/i}}
                            </td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>
                              \n
                              <div id="place_search_results"></div>\n <button type="button" class="btn btn-default" id="place_search_done">{{_i}}Done{{/i}}</button>\n <button type="button" class="btn" id="place_search_cancel" style="display:none">{{_i}}Cancel{{/i}}</button>\n
                            </td>
                          </tr>
                        </table>\n
                      </form>\n', 
message_thread: '
                      <div class="messages-pane" data-thread-id="{{thread_id}}">
                        \n {{#items}}\n {{&gt;message}}\n {{/items}}\n
                      </div>', dashboard: "
                      <div class='dashboard'></div>", 
dashboard_who_to_follow: '
                      <div class="wtf-inner">
                        \n {{^screenName}}\n
                        <h2 class="wtf-component">
                          {{_i}}Who to follow{{/i}}
                        </h2>\n
                        <h3>
                          {{_i}}Suggestions for you{{/i}}\u0026#32;\u0026middot; <a href="#" class="refresh-suggestions">{{_i}}refresh{{/i}}</a>
                        </h3>\n {{/screenName}}\n {{#screenName}}\n
                        <h2 class="wtf-component">
                          {{_i}}Similar to @{{screenName}}{{/i}}
                        </h2>\n {{/screenName}}\n
                        <div style="margin-left: 2em" class="\'recommended-followers">
                          \n {{#recommended_followers}}\n {{&gt;user_small_list}}\n {{/recommended_followers}}\n
                        </div>\n {{#screenName}}\n <!-- <div class="wtf-links"><a href="{{twitter_suggests_path}}">{{_i}}View all similar accounts{{/i}}\u0026#32;\u0026rarr;</a></div> -->\n {{/screenName}}\n {{^screenName}}\n
                        <div class="wtf-links">
                          <a href="{{twitter_suggests_path}}">{{_i}}View all suggestions{{/i}}</a><span class="view-more"><a href="{{invitations_suggestions_path}}">{{_i}}Browse interests{{/i}}</a> \u0026middot; <a href="https://twitter.com/invitations/find_on_contacts">{{_i}}Find friends{{/i}}</a></span>
                        </div>\n {{/screenName}}\n
                      </div>', 
new_tweets_bar: '
                      <div class="new-tweets-bar">
                        {{_i}}{{tweets_count_phrase}}{{/i}}
                      </div>\n', 
search_page: '
                      <div class="main-content">
                        \n {{{noscript}}}\n
                        <div class="search-header">
                          \n
                          <div class="back-to-home">
                            \n <a href="{{index_path}}">{{_i}}\u0026larr; Back to Home{{/i}}</a>\n
                          </div>\n
                          <div class="delete-search">
                            \n
                            <div class="button delete-search-button" style="display:none">
                              \n <strong>{{_i}}Delete this saved search{{/i}}</strong>\n
                            </div>\n
                          </div>\n
                          <div class="save-search">
                            \n
                            <div class="button save-search-button" style="display:none">
                              \n <strong>{{_i}}Save this search{{/i}}</strong>\n
                            </div>\n
                          </div>\n
                        </div>\n
                        <div class="search-title">
                          \n
                          <h2>
                            {{_i}}Results for <strong class="search-query">{{pretty_query}}</strong>{{/i}}
                          </h2>\n
                        </div>\n
                        <ul class="stream-tabs">
                          <li style="list-style: none">\n
                          </li>
                          <li class="stream-tab stream-tab-tweets {{#active_tab_tweets}}active{{/active_tab_tweets}}">\n <a class="tab-text" href="{{search_results_path}}">{{_i}}Tweets{{/i}}</a>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                          <li class="stream-tab stream-tab-links {{#active_tab_links}}active{{/active_tab_links}}">\n <a class="tab-text" href="{{search_links_path}}">{{_i}}Tweets with links{{/i}}</a>\n
                          </li>
                          <li style="list-style: none">\n
                          </li>
                          <li class="stream-tab stream-tab-nearby {{#active_tab_nearby}}active{{/active_tab_nearby}}">\n <a class="tab-text" href="{{search_nearby_path}}">{{_i}}Tweets near you{{/i}}</a>\n
                          </li>
                          <li style="list-style: none">\n {{^is_place_search}}\n
                          </li>
                          <li class="stream-tab stream-tab-people {{#active_tab_people}}active{{/active_tab_people}}">\n <a class="tab-text" href="{{user_search_path}}">{{_i}}People{{/i}}</a>\n
                          </li>
                          <li style="list-style: none">\n {{/is_place_search}}\n
                          </li>
                        </ul>\n {{&gt;stream_manager}}\n {{{end_noscript}}}\n
                      </div>\n
                      <div class="dashboard search-dashboard"></div>\n{{&gt;details_pane_container}}', 
frame_busting: '<script type="text/javascript">
      if(window.top!==window.self){document.write="";window.top.location=window.self.location;setTimeout(function(){document.body.innerHTML=""},1);window.self.onload=function(){document.body.innerHTML=""}};
                      </script>\n', 
geo_place_content: '\n{{&gt;geo_disable_geo}}', 
profile_activity: '{{%TRANSLATION-HINT mode=user_stats}}\n\n
                      <div class="your-activity following-activity">
                        \n
                        <h2>
                          <a href="{{user_following_path}}" class="title-link">{{_i}}Following{{/i}} <span class="\'user-stat-link\'">{{friends_count_commaized}}</span></a>
                        </h2>\n
                      </div>\n\n
                      <div class="your-activity new-followers-activity">
                        \n
                        <h2>
                          \n <a href="{{user_followers_path}}" class="title-link">{{_i}}Followers{{/i}} <span class="\'user-stat-link\'">{{followers_count_commaized}}</span></a>\n
                        </h2>\n
                      </div>', tweet_user_name: "{{#user}}\n<span class='tweet-user-name'>\n <a class='tweet-screen-name user-profile-link' data-user-id='{{id}}' href='{{profile_path}}' title='{{name}}'>{{screen_name}}</a>\n <span class='tweet-full-name'>{{name}}</span>\n</span>\n{{/user}}", tweet_pane: "
                      <div class='tweet-pane'>
                        \n {{#tweet}}\n {{&gt;details_pane_tweet}}\n {{/tweet}}\n
                      </div>", 
tipsy: '
                      <div class="tooltip">
                        \n <b>\n {{title}}\n</b> \n
                      </div>', 
geo_where_is_place: '
                      <div>
                        {{_i}}Where is "{{place_name}}"?{{/i}}
                      </div>\n
                      <div class="geo-query-map">
                        \n <input type="text" title="{{_i}}Move map to...{{/i}}"><span title="{{_i}}Move map{{/i}}">\u0026nbsp;</span>\n
                        <div class="geo-query-map-error">\n
                      </div>\n
                      <div class="geo-where-is-place">
                        \n
                        <div class="geo-map-canvas">\n
                        <div class="geo-move-pin-hint">
                          \n
                          <div class="geo-creation-hint-arrow">\n
                          <div class="geo-creation-hint-bubble">
                            \n {{_i}}Does this look right?<br>
                            If not, move the pin to edit the location.{{/i}}\n
                          </div>\n
                        </div>\n
                        <div class="geo-drop-pin-hint">
                          \n
                          <div class="geo-creation-hint-bubble">
                            \n {{_i}}Move the pin onto the map to add this place.{{/i}}\n
                          </div>\n
                          <div class="geo-creation-hint-arrow">\n
                        </div>\n
                        <div class="geo-droppable-pin">\n
                        <div class="geo-creation-actions">
                          \n <button type="button" class="btn btn-default btn-disabled geo-submit">{{_i}}Next{{/i}}</button>\n <span class="geo-progress">\u0026nbsp;</span>\n
                          <div class="geo-place-creation-error">\n
                        </div>\n
                      </div>\n\n', 
follower_request_stream_controls: '<span class="accept-all-follower-requests-button">{{_i}}Accept all{{/i}}</span>\n|\n<span class="decline-all-follower-requests-button">{{_i}}Decline all{{/i}}</span>\n', 
media_not_displayed: '
                      <div class="\'media-not-displayed\'">
                        \n
                        <h2>
                          {{_i}}Media not displayed.{{/i}}
                        </h2>\n
                        <p>
                          {{_i}}This Tweet is from someone you\'re not following. The media they\'re mentioning could be anything, even something you might find offensive.{{/i}}
                        </p>\n<br>
                        \n
                        <div class="button display-this-media">
                          \n {{_i}}Display media{{/i}}\n
                        </div>\n<br>
                        \n {{#logged_in}}\n
                        <p>
                          {{_i}}or...{{/i}}
                        </p>\n <a href="#" class="always-display-media">{{_i}}Always display media{{/i}}</a>\n
                        <p>
                          {{_i}}(even from people you don\'t follow){{/i}}
                        </p>\n <small>{{_i}}Tip: You can turn off auto-display anytime in Settings.{{/i}}</small>\n {{/logged_in}}\n
                      </div>\n', 
tweet_contributor: '{{#contributor}}\n <span class="tweet-contributors">{{_i}}by <a href="{{profile_path}}" class="user-profile-link" data-screen-name="{{screen_name}}">{{screen_name}}</a>{{/i}}</span>\n{{/contributor}}', list_stream_title: "<span>\n {{full_name}}\n</span>\n{{#showTitleLink}}\n <a class='go-to-list-page' href='{{user_list_path}}'>\n {{_i}}View list page \u0026rarr;{{/i}}\n</a> \n{{/showTitleLink}}", 
no_saved_searches: '
                      <div class="empty-drop-down">
                        \n
                        <div class="no-saved-searches title">
                          {{_i}}You haven\'t saved any searches yet.{{/i}}
                        </div>\n
                        <p class="no-saved-searches info">
                          \n {{_i}}Click on "Save this search" from the results page to quickly access the latest Tweets about a topic or query, right from here. <a href="{{saved_searches_help_path}}">Learn More</a>{{/i}}\n
                        </p>\n
                      </div>', 
place_people: '
                      <h2>
                        \n{{#poi}}\n {{_i}}Recent people at <strong>{{name}}</strong>{{/i}}\n{{/poi}}\n{{^poi}}\n {{_i}}Recent people in <strong>{{name}}</strong>{{/i}}\n{{/poi}}\n
                      </h2>\n{{#user_thumbs}}\n {{&gt;user_thumb_list}}\n{{/user_thumbs}}\n
                      <div style="clear:both;"></div>\n
                      <div>
                        \n <a href="{{place_users_path}}">{{_i}}View all recent people \u0026rarr;{{/i}}</a>\n
                      </div>\n', 
keyboard_shortcuts: '
                      <div class="t-section t-tpl-33-67" id="keyboard-shortcut-menu">
                        \n
                        <div class="t-unit t-first">
                          \n
                          <dl>
                            <dt>
                              \n
                            </dt>
                            <dt>
                              {{_i}}Actions{{/i}}
                            </dt>
                            <dt>
                              \n
                            </dt>
                            <dd>
                              <strong>f :</strong> <em>{{_i}}favorite{{/i}}</em>
                            </dd>
                            <dt>
                              \n
                            </dt>
                            <dd>
                              <strong>r :</strong> <em>{{_i}}reply{{/i}}</em>
                            </dd>
                            <dt>
                              \n
                            </dt>
                            <dd>
                              <strong>t :</strong> <em>{{_i}}retweet{{/i}}</em>
                            </dd>
                            <dt>
                              \n
                            </dt>
                            <dd>
                              <strong>m :</strong> <em>{{_i}}direct message{{/i}}</em>
                            </dd>
                            <dt>
                              \n
                            </dt>
                            <dd>
                              <strong>n :</strong> <em>{{_i}}new Tweet{{/i}}</em>
                            </dd>
                            <dt>
                              \n
                            </dt>
                          </dl>\n
                        </div>\n
                        <div class="t-unit">
                          \n\n
                          <div class="t-section t-tpl-50-50">
                            \n\n
                            <div class="t-unit t-first">
                              \n\n
                              <dl>
                                <dt>
                                  \n
                                </dt>
                                <dt>
                                  {{_i}}Navigation{{/i}}
                                </dt>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>? :</strong> <em>{{_i}}this menu{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>j :</strong> <em>{{_i}}next Tweet{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>k :</strong> <em>{{_i}}previous Tweet{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>space :</strong> <em>{{_i}}page down{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>/ :</strong> <em>{{_i}}search{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>. :</strong> <em>{{_i}}refresh Tweets and{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong><span style="visibility:hidden">. :</span></strong> <em>{{_i}}back to top{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                              </dl>\n\n
                            </div>\n
                            <div class="t-unit">
                              \n
                              <dl>
                                <dt>
                                  \n
                                </dt>
                                <dt>
                                  {{_i}}Timelines{{/i}}
                                </dt>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>g h :</strong> <em>{{_i}}<u>h</u>ome{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>g r :</strong> <em>{{_i}}<u>r</u>eplies / mentions{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>g p :</strong> <em>{{_i}}<u>p</u>rofile{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>g f :</strong> <em>{{_i}}<u>f</u>avorites{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>g m :</strong> <em>{{_i}}<u>m</u>essages{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                                <dd>
                                  <strong>g u :</strong> <em>{{_i}}go to <u>u</u>ser{{/i}}</em>
                                </dd>
                                <dt>
                                  \n
                                </dt>
                              </dl>\n
                            </div>\n
                          </div>\n
                        </div>\n
                      </div>\n', 
geo_disable_geo: '\u0026#32;\n<a href="#" class="geo_disable_webclient"><span>\u0026nbsp;</span></a>', tweet_geo: "", dashboard_promo: "
                      <div class='definition'>
                        \n
                        <p class="\&quot;promo\&quot;">
                          {{{promo_contents}}}
                        </p>\n
                      </div>", 
verify_email_banner: '
                      <div class="banner-outer banner-border">
                        \n
                        <div class="banner">
                          \n
                          <div class="banner-inside verify-email-banner">
                            \n
                            <div class="first-banner-row">
                              \n <span class="title">{{_i}}Confirm your email address to access all of Twitter\'s features.{{/i}}</span>\n <span>{{_i}}A confirmation message was sent to <strong>{{email}}</strong>.{{/i}}</span>\n
                            </div>\n
                            <div class="second-banner-row">
                              \n <a href="#" class="\'resend-confirmation-email-link\'">{{_i}}Resend confirmation{{/i}}</a> \u0026middot; <a href="{{change_email_path}}">{{_i}}Update email address{{/i}}</a> \u0026middot; <a href="{{email_help_path}}">{{_i}}Learn more{{/i}}\u0026nbsp; \u0026rsaquo;</a>\n
                            </div>\n
                          </div>\n
                        </div>\n
                      </div>\n', 
tweet_box: '
                      <div class="tweet-box condensed">
                        \n {{#show_title}}\n
                        <div class="tweet-box-title">
                          \n
                          <h2>
                            {{title}}
                          </h2>\n
                        </div>\n {{/show_title}}\n
                        <div class="text-area"></div>\n
                        <div class="tweet-button-container">
                          \n {{#show_geo}}\n \n {{/show_geo}}\n <img src="/images/spinner.gif" class="tweet-spinner" style="display: none;">\n <span class="tweet-counter">140</span>\n <a href="#" class="tweet-button button">{{button_text}}</a>\n
                        </div>\n
                      </div>\n', 
suspended_banner: '
                      <div class="banner-outer warning">
                        \n
                        <div class="banner">
                          \n
                          <div class="banner-inside verify-email-banner">
                            \n
                            <div class="first-banner-row">
                              \n <span class="title">{{_i}}This account is currently suspended.{{/i}}</span>\n <span>{{_i}}If we have suspended your account by mistake, please let us know by visiting <a href="{{suspended_help_path}}">Suspended Accounts</a>.{{/i}}</span>\n
                            </div>\n
                          </div>\n
                        </div>\n
                      </div>\n', 
messages_page: '
                      <div class="main-content messages-main-content">
                        \n {{{noscript}}}\n
                        <div class="messages-header header">
                          \n
                          <h1>
                            {{_i}}Messages{{/i}}
                          </h1>
                          <div class="new-message-button button">
                            {{_i}}New Message{{/i}}
                          </div>\n
                        </div>\n {{&gt;stream_manager}}\n {{{end_noscript}}}\n
                      </div>\n{{&gt;details_pane_container}}\n', tweet_user_block: "
                      <div class="\&quot;tweet-user-block\&quot;">
                        \n <a href='{{profile_path}}'><img src='{{profile_image_url}}' alt='{{name}}' class='tweet-user-block-image user-profile-link' data-user-id='{{id}}'></a>\n
                        <div class='tweet-user-block-name'>
                          \n <a class='tweet-user-block-screen-name user-profile-link' data-user-id='{{id}}' href='{{profile_path}}' title='{{name}}'>@{{screen_name}}</a>\n <span class='tweet-user-block-full-name'>{{name}}</span>\n
                        </div>\n
                      </div>\n", 
tweet_timestamp: '<a href="{{permalink_path}}" class="\'tweet-timestamp\'" title="{{explicit_timestamp}}">{{#user}}{{#protected}}{{/protected}}{{/user}}<span class="_timestamp" data-time="{{actual_timestamp}}" data-long-form="true">{{full_timestamp}}</span></a>', 
tweet_short_timestamp: '<a href="{{permalink_path}}" class="\'tweet-timestamp\'" title="{{explicit_timestamp}}"><span class="_timestamp" data-time="{{actual_timestamp}}">{{short_timestamp}}</span></a>', stream_user: "
                      <div data-user-id='{{id}}' class='stream-item-content user-content-medium clearfix' data-screen-name="\&quot;{{screen_name}}\&quot;">
                        \n <img src='{{profile_image_url}}' alt='{{name}}' class='user-content-image user-profile-link' data-user-id='{{id}}'>\n
                        <div class="\&quot;user-content-rest\&quot;">
                          \n <span class='user-name'>\n <a class='user-profile-link' data-user-id='{{id}}' href='#' title='{{name}}'><strong>{{screen_name}}</strong></a>\n <span class='full-name'>{{name}}</span>\n {{#verified}}\n \n {{/verified}}\n {{#protected}}\n \n {{/protected}}\n</span> \n
                          <div class="\&quot;user-description\&quot;">
                            {{{linkified_description}}}
                          </div>\n
                          <div class='user-meta'></div>\n
                        </div>\n {{&gt;stream_user_buttons}}\n
                      </div>\n", 
full_name: '
                      <div class="full-name">
                        \n
                        <h2>
                          {{name}}
                        </h2>\n {{#verified}}\n \n {{/verified}}\n {{#protected}}\n \n {{/protected}}\n
                      </div>', 
add_people: '
                      <div class="no-members">
                        \n
                        <h3>
                          {{_i}}Find people to add to your list:{{/i}}
                        </h3>\n <input type="text" name="q" id="q" class="medium">\n <input type="hidden" value="people" name="category">\n <input type="hidden" value="users" name="source">\n
                        <div class="button search-for-list-people">
                          {{_i}}Search{{/i}}
                        </div>\n
                        <p class="instruction">
                          {{_i}}Search for a username, first or last name, business or brand{{/i}}
                        </p>\n
                        <p class="tip">
                          {{_i}}You can also add people from your <a href="{{following_path}}">Following</a> page or anyone\u2019s profile page.{{/i}}
                        </p>\n
                      </div>', 
bouncing_email_banner: '
                      <div class="banner-outer banner-border">
                        \n
                        <div class="banner">
                          \n
                          <div class="banner-inside verify-email-banner">
                            \n
                            <div class="first-banner-row">
                              \n <span class="title">{{_i}}Is your email address active?{{/i}}</span>\n <span>{{_i}}We\'ve tried to send emails to \'<strong>{{email}}</strong>\', but they are not getting delivered.{{/i}}</span>\n
                            </div>\n
                            <div class="second-banner-row">
                              \n
                              <p>
                                {{_i}}Please <a href="{{change_email_path}}">update your email settings</a> or <a href="{{resend_confirmation_email_path}}">try sending a message again</a> to your current address.{{/i}}
                              </p>\n
                            </div>\n
                          </div>\n
                        </div>\n
                      </div>\n', tweet_text: "
                      <div class='tweet-text'>
                        {{{linkified_text}}}
                      </div>", 
stream_tweet: '
                      <div class="\'more\'">
                        \u0026raquo;
                      </div>\n
                      <div class="stream-item-content tweet stream-tweet {{css_classes}}" data-tweet-id="{{id}}" data-item-id="{{id}}" data-user-id="{{id}}">
                        \n {{&gt;tweet_dogear}}\n
                        <div class="tweet-image">
                          \n {{&gt;tweet_user_image_48}}\n
                        </div>\n
                        <div class="tweet-content">
                          \n
                          <div class="tweet-row">
                            \n {{&gt;tweet_user_name}}\n
                            <div class="tweet-corner">
                              \n {{&gt;tweet_meta}}\n
                            </div>\n
                          </div>\n
                          <div class="tweet-row">
                            \n {{&gt;tweet_text}}\n
                          </div>\n
                          <div class="tweet-row">
                            \n {{&gt;tweet_geo_text}}\n
                          </div>\n
                          <div class="tweet-row">
                            \n {{&gt;tweet_timestamp}}\n {{&gt;tweet_actions}}\n
                          </div>\n
                          <div class="tweet-row">
                            \n {{&gt;tweet_labels}}\n
                          </div>\n
                        </div>\n
                      </div>', 
rss_feeds: '
                      <div class="inner-feeds">
                        \n{{#feeds}}\n<img src="/phoenix/img/rss.gif">\n<a type="application/rss+xml" rel="alternate" href="{{href}}">{{title}}</a>\n{{/feeds}}\n
                      </div>', 
recent_tweets: '
                      <div class="recent-tweets">
                        \n
                        <h3 class="profile-title">
                          {{_i}}Recent Tweets{{/i}}
                        </h3>\n {{#items}}\n {{&gt;simple_tweet}}\n {{/items}}\n <a href="{{profile_path}}" class="more-link" target="_blank">{{_i}}More Tweets from @{{screen_name}} \u0026rarr;{{/i}}</a>\n
                      </div>', latest_favorite: "
                      <div class="\&quot;latest-favorite-inner\&quot;" data-item-id="\&quot;{{id}}\&quot;">
                        \n{{#user}}\n<span class='tweet-user-name'>\n <a class='tweet-screen-name user-profile-link' data-user-id='{{id}}' href='{{profile_path}}' title='{{name}}'>{{screen_name}}</a>\n</span>\n{{/user}}\n{{&gt;tweet_text}}\n
                      </div>", 
detached_email_banner: '
                      <div class="banner-outer banner-border">
                        \n
                        <div class="banner">
                          \n
                          <div class="banner-inside verify-email-banner">
                            \n
                            <div class="first-banner-row">
                              \n <span class="title">{{_i}}New email address required.{{/i}}</span>\n <span>{{_i}}Twitter has removed the email address from your account, by request of the email owner.{{/i}}</span>\n
                            </div>\n
                            <div class="second-banner-row">
                              \n
                              <p>
                                {{_i}}Please <a href="{{change_email_path}}">enter a new email address</a> where you can be reached.{{/i}}\u0026nbsp;<a href="{{email_help_path}}">{{_i}}Learn more{{/i}}\u0026nbsp; \u0026rsaquo;</a>
                              </p>\n
                            </div>\n
                          </div>\n
                        </div>\n
                      </div>\n', follow_list: "
                      <h3>
                        {{header}}
                      </h3>\n{{#follow_list}}\n {{{follow_list}}}\n{{/follow_list}}", google_analytics: "<script type="\&quot;text/javascript\&quot;">
      \n\n  var _gaq = _gaq || [];\n  _gaq.push(['_setAccount', 'UA-30775-6']);\n  _gaq.push(\n    ['_trackPageview'],\n    ['_setDomainName', 'twitter.com']\n  );\n\n  (function() {\n    var ga = document.createElement('script');\n    ga.type = 'text/javascript';\n    ga.async = true;\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0];\n    s.parentNode.insertBefore(ga, s);\n  }());\n\n  twttr.trackPageView = function(pathName) {\n    var event = ['_trackPageview'];\n    if (pathName) {\n      event.push(pathName);\n    }\n    _gaq.push(event);\n  };\n\n
                      </script>", 
geo_map_small: '
                      <div class="tweet_geo_small">
                        \n{{#place}}\n
                        <div class="map_canvas geo_map_tweets_at_this_place_link" data-tweet-id="{{tweet_id}}" data-place-id="{{id}}" data-place-name="{{full_name}}"></div>\n
                        <div class="geo_map_place_details">
                          \n
                          <div class="geo_map_place_name">
                            {{_i}}from {{name}}{{/i}}
                          </div>\n
                          <div>
                            {{address}}
                          </div>\n
                          <div>
                            {{container}}
                          </div>\n
                          <div>
                            {{phone}}
                          </div>\n
                          <div>
                            \n <a class="geo_map_tweets_at_this_place_link" href="#" data-tweet-id="{{tweet_id}}" data-place-id="{{id}}" data-place-name="{{full_name}}">\n {{_i}}View Tweets at this place{{/i}}\n</a> \n
                          </div>\n
                        </div>\n{{/place}}\n{{^place}}\n
                        <div class="map_canvas geo_map_tweets_at_this_place_link"></div>\n{{/place}}\n
                      </div>\n', 
profile_actions: '{{%TRANSLATION-HINT mode=actions}}\n\n
                      <div class="profile-actions profile-actions-{{id}} clearfix">
                        \n\n
                        <div class="buttons">
                          \n {{#followed_by}}
                          <div class="button direct-message-action">
                            {{_i}}Message{{/i}}
                          </div>{{/followed_by}}\n {{#show_list_options}}\n
                          <div class="button list-action-button" data-user-id="{{id}}">
                            \n \n
                          </div>\n {{/show_list_options}}\n {{^is_current_user}}\n
                          <div class="button profile-actions-button" data-user-id="{{id}}">
                            \n \n
                          </div>\n {{/is_current_user}}\n
                        </div>\n\n
                        <div class="follow-state">
                          \n {{#can_view}}\n {{#is_current_user}}\n <span class="thats-you"><a href="{{settings_path}}">{{_i}}Edit your profile{{/i}}\u0026nbsp;\u0026rarr;</a></span>\n {{/is_current_user}}\n\n {{^is_current_user}}\n {{#following}}\n <a href="/'#/'" class="button profile-unfollow-link" data-user-id="{{id}}">\n \n <em class="wrapper">\n <b>{{_i}}Following{{/i}}</b>\n <b class="unfollow">{{_i}}Unfollow{{/i}}</b>\n</em> \n</a> \n {{/following}}\n {{^following}}\n {{#blocking}}\n \n <span class="you-blocked">\n {{#reported}}\n {{_i}}Blocked and reported for spam{{/i}}\n {{/reported}}\n {{^reported}}\n {{_i}}Blocked{{/i}}\n {{/reported}}\n \u0026#32;\u0026mdash;\u0026#32;\n <a href="#" class="profile-unblock-link" data-user-id="{{id}}">{{_i}}Undo{{/i}}</a>\n {{#reported}}\n <a href="{{spam_learn_more_path}}" target="_blank" class="spam-learn-more-link">{{_i}}Learn more{{/i}}</a>\n {{/reported}}\n \n {{/blocking}}\n {{^blocking}}\n</span>
                          <div class="button profile-follow-button" data-user-id="{{id}}">
                            <span class="you-blocked">\n <strong>{{_i}}Follow{{/i}}</strong>\n</span>
                          </div>\n {{/blocking}}\n {{/following}}\n {{/is_current_user}}\n {{/can_view}}\n\n {{^can_view}}\n {{#follow_request_sent}}\n <span class="you-requested">{{_i}}Your follow request has been sent{{/i}}\u0026nbsp;\u0026middot;</span>\n <a href="/'#/'" class="cancel-request-link" data-user-id="{{id}}">{{_i}}Cancel request{{/i}}</a>\n {{/follow_request_sent}}\n {{^follow_request_sent}}\n {{#logged_in}}\n
                          <div class="button follow-request-button" data-user-id="{{id}}">
                            \n <strong>{{_i}}Send follow request{{/i}}</strong>\n
                          </div>\n {{/logged_in}}\n {{/follow_request_sent}}\n {{/can_view}}\n
                        </div>\n\n {{#show_device_notifications}}\n \n {{/show_device_notifications}}\n {{#following}}\n \n {{/following}}\n
                      </div>\n'
                    </li>
                  </ul>
                </dd>
              </dl>
            </li>
          </ul>
        </div>
      </div>

};
/*
 * jQuery JavaScript Library v1.4.2
 * http://jquery.com/
 *
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2010, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Sat Feb 13 22:33:48 2010 -0500
 */
 (function(window, undefined) {
    var jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context)
    },
    _jQuery = window.jQuery,
    _$ = window.$,
    document = window.document,
    rootjQuery,
    quickExpr = /^[^<]*(<[\w\W]+>)[^>]*$|^#([\w-]+)$/,
    isSimple = /^.[^:#\[\.,]*$/,
    rnotwhite = /\S/,
    rtrim = /^(\s|\u00A0)+|(\s|\u00A0)+$/g,
    rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
    userAgent = navigator.userAgent,
    browserMatch,
    readyBound = false,
    readyList = [],
    DOMContentLoaded,
    toString = Object.prototype.toString,
    hasOwnProperty = Object.prototype.hasOwnProperty,
    push = Array.prototype.push,
    slice = Array.prototype.slice,
    indexOf = Array.prototype.indexOf;
    jQuery.fn = jQuery.prototype = {
        init: function(selector, context) {
            var match,
            elem,
            ret,
            doc;
            if (!selector) {
                return this
            }
            if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this
            }
            if (selector === "body" && !context) {
                this.context = document;
                this[0] = document.body;
                this.selector = "body";
                this.length = 1;
                return this
            }
            if (typeof selector === "string") {
                match = quickExpr.exec(selector);
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        doc = (context ? context.ownerDocument || context: document);
                        ret = rsingleTag.exec(selector);
                        if (ret) {
                            if (jQuery.isPlainObject(context)) {
                                selector = [document.createElement(ret[1])];
                                jQuery.fn.attr.call(selector, context, true)
                            } else {
                                selector = [doc.createElement(ret[1])]
                            }
                        } else {
                            ret = buildFragment([match[1]], [doc]);
                            selector = (ret.cacheable ? ret.fragment.cloneNode(true) : ret.fragment).childNodes
                        }
                        return jQuery.merge(this, selector)
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem) {
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector)
                            }
                            this.length = 1;
                            this[0] = elem
                        }
                        this.context = document;
                        this.selector = selector;
                        return this
                    }
                } else {
                    if (!context && /^\w+$/.test(selector)) {
                        this.selector = selector;
                        this.context = document;
                        selector = document.getElementsByTagName(selector);
                        return jQuery.merge(this, selector)
                    } else {
                        if (!context || context.jquery) {
                            return (context || rootjQuery).find(selector)
                        } else {
                            return jQuery(context).find(selector)
                        }
                    }
                }
            } else {
                if (jQuery.isFunction(selector)) {
                    return rootjQuery.ready(selector)
                }
            }
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context
            }
            return jQuery.makeArray(selector, this)
        },
        selector: "",
        jquery: "1.4.2",
        length: 0,
        size: function() {
            return this.length
        },
        toArray: function() {
            return slice.call(this, 0)
        },
        get: function(num) {
            return num == null ? this.toArray() : (num < 0 ? this.slice(num)[0] : this[num])
        },
        pushStack: function(elems, name, selector) {
            var ret = jQuery();
            if (jQuery.isArray(elems)) {
                push.apply(ret, elems)
            } else {
                jQuery.merge(ret, elems)
            }
            ret.prevObject = this;
            ret.context = this.context;
            if (name === "find") {
                ret.selector = this.selector + (this.selector ? " ": "") + selector
            } else {
                if (name) {
                    ret.selector = this.selector + "." + name + "(" + selector + ")"
                }
            }
            return ret
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args)
        },
        ready: function(fn) {
            jQuery.bindReady();
            if (jQuery.isReady) {
                fn.call(document, jQuery)
            } else {
                if (readyList) {
                    readyList.push(fn)
                }
            }
            return this
        },
        eq: function(i) {
            return i === -1 ? this.slice(i) : this.slice(i, +i + 1)
        },
        first: function() {
            return this.eq(0)
        },
        last: function() {
            return this.eq( - 1)
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments), "slice", slice.call(arguments).join(","))
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this,
            function(elem, i) {
                return callback.call(elem, i, elem)
            }))
        },
        end: function() {
            return this.prevObject || jQuery(null)
        },
        push: push,
        sort: [].sort,
        splice: [].splice
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function() {
        var target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false,
        options,
        name,
        src,
        copy;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i = 2
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {}
        }
        if (length === i) {
            target = this; --i
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || jQuery.isArray(copy))) {
                        var clone = src && (jQuery.isPlainObject(src) || jQuery.isArray(src)) ? src: jQuery.isArray(copy) ? [] : {};
                        target[name] = jQuery.extend(deep, clone, copy)
                    } else {
                        if (copy !== undefined) {
                            target[name] = copy
                        }
                    }
                }
            }
        }
        return target
    };
    jQuery.extend({
        noConflict: function(deep) {
            window.$ = _$;
            if (deep) {
                window.jQuery = _jQuery
            }
            return jQuery
        },
        isReady: false,
        ready: function() {
            if (!jQuery.isReady) {
                if (!document.body) {
                    return setTimeout(jQuery.ready, 13)
                }
                jQuery.isReady = true;
                if (readyList) {
                    var fn,
                    i = 0;
                    while ((fn = readyList[i++])) {
                        fn.call(document, jQuery)
                    }
                    readyList = null
                }
                if (jQuery.fn.triggerHandler) {
                    jQuery(document).triggerHandler("ready")
                }
            }
        },
        bindReady: function() {
            if (readyBound) {
                return
            }
            readyBound = true;
            if (document.readyState === "complete") {
                return jQuery.ready()
            }
            if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                window.addEventListener("load", jQuery.ready, false)
            } else {
                if (document.attachEvent) {
                    document.attachEvent("onreadystatechange", DOMContentLoaded);
                    window.attachEvent("onload", jQuery.ready);
                    var toplevel = false;
                    try {
                        toplevel = window.frameElement == null
                    } catch(e) {}
                    if (document.documentElement.doScroll && toplevel) {
                        doScrollCheck()
                    }
                }
            }
        },
        isFunction: function(obj) {
            return toString.call(obj) === "[object Function]"
        },
        isArray: function(obj) {
            return toString.call(obj) === "[object Array]"
        },
        isPlainObject: function(obj) {
            if (!obj || toString.call(obj) !== "[object Object]" || obj.nodeType || obj.setInterval) {
                return false
            }
            if (obj.constructor && !hasOwnProperty.call(obj, "constructor") && !hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false
            }
            var key;
            for (key in obj) {}
            return key === undefined || hasOwnProperty.call(obj, key)
        },
        isEmptyObject: function(obj) {
            for (var name in obj) {
                return false
            }
            return true
        },
        error: function(msg) {
            throw msg
        },
        parseJSON: function(data) {
            if (typeof data !== "string" || !data) {
                return null
            }
            data = jQuery.trim(data);
            if (/^[\],:{}\s]*$/.test(data.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                return window.JSON && window.JSON.parse ? window.JSON.parse(data) : (new Function("return " + data))()
            } else {
                jQuery.error("Invalid JSON: " + data)
            }
        },
        noop: function() {},
        globalEval: function(data) {
            if (data && rnotwhite.test(data)) {
                var head = document.getElementsByTagName("head")[0] || document.documentElement,
                script = document.createElement("script");
                script.type = "text/javascript";
                if (jQuery.support.scriptEval) {
                    script.appendChild(document.createTextNode(data))
                } else {
                    script.text = data
                }
                head.insertBefore(script, head.firstChild);
                head.removeChild(script)
            }
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase()
        },
        each: function(object, callback, args) {
            var name,
            i = 0,
            length = object.length,
            isObj = length === undefined || jQuery.isFunction(object);
            if (args) {
                if (isObj) {
                    for (name in object) {
                        if (callback.apply(object[name], args) === false) {
                            break
                        }
                    }
                } else {
                    for (; i < length;) {
                        if (callback.apply(object[i++], args) === false) {
                            break
                        }
                    }
                }
            } else {
                if (isObj) {
                    for (name in object) {
                        if (callback.call(object[name], name, object[name]) === false) {
                            break
                        }
                    }
                } else {
                    for (var value = object[0]; i < length && callback.call(value, i, value) !== false; value = object[++i]) {}
                }
            }
            return object
        },
        trim: function(text) {
            return (text || "").replace(rtrim, "")
        },
        makeArray: function(array, results) {
            var ret = results || [];
            if (array != null) {
                if (array.length == null || typeof array === "string" || jQuery.isFunction(array) || (typeof array !== "function" && array.setInterval)) {
                    push.call(ret, array)
                } else {
                    jQuery.merge(ret, array)
                }
            }
            return ret
        },
        inArray: function(elem, array) {
            if (array.indexOf) {
                return array.indexOf(elem)
            }
            for (var i = 0, length = array.length; i < length; i++) {
                if (array[i] === elem) {
                    return i
                }
            }
            return - 1
        },
        merge: function(first, second) {
            var i = first.length,
            j = 0;
            if (typeof second.length === "number") {
                for (var l = second.length; j < l; j++) {
                    first[i++] = second[j]
                }
            } else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++]
                }
            }
            first.length = i;
            return first
        },
        grep: function(elems, callback, inv) {
            var ret = [];
            for (var i = 0, length = elems.length; i < length; i++) {
                if (!inv !== !callback(elems[i], i)) {
                    ret.push(elems[i])
                }
            }
            return ret
        },
        map: function(elems, callback, arg) {
            var ret = [],
            value;
            for (var i = 0, length = elems.length; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                    ret[ret.length] = value
                }
            }
            return ret.concat.apply([], ret)
        },
        guid: 1,
        proxy: function(fn, proxy, thisObject) {
            if (arguments.length === 2) {
                if (typeof proxy === "string") {
                    thisObject = fn;
                    fn = thisObject[proxy];
                    proxy = undefined
                } else {
                    if (proxy && !jQuery.isFunction(proxy)) {
                        thisObject = proxy;
                        proxy = undefined
                    }
                }
            }
            if (!proxy && fn) {
                proxy = function() {
                    return fn.apply(thisObject || this, arguments)
                }
            }
            if (fn) {
                proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++
            }
            return proxy
        },
        uaMatch: function(ua) {
            ua = ua.toLowerCase();
            var match = /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version)?[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || !/compatible/.test(ua) && /(mozilla)(?:.*? rv:([\w.]+))?/.exec(ua) || [];
            return {
                browser: match[1] || "",
                version: match[2] || "0"
            }
        },
        browser: {}
    });
    browserMatch = jQuery.uaMatch(userAgent);
    if (browserMatch.browser) {
        jQuery.browser[browserMatch.browser] = true;
        jQuery.browser.version = browserMatch.version
    }
    if (jQuery.browser.webkit) {
        jQuery.browser.safari = true
    }
    if (indexOf) {
        jQuery.inArray = function(elem, array) {
            return indexOf.call(array, elem)
        }
    }
    rootjQuery = jQuery(document);
    if (document.addEventListener) {
        DOMContentLoaded = function() {
            document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
            jQuery.ready()
        }
    } else {
        if (document.attachEvent) {
            DOMContentLoaded = function() {
                if (document.readyState === "complete") {
                    document.detachEvent("onreadystatechange", DOMContentLoaded);
                    jQuery.ready()
                }
            }
        }
    }
    function doScrollCheck() {
        if (jQuery.isReady) {
            return
        }
        try {
            document.documentElement.doScroll("left")
        } catch(error) {
            setTimeout(doScrollCheck, 1);
            return
        }
        jQuery.ready()
    }
    function evalScript(i, elem) {
        if (elem.src) {
            jQuery.ajax({
                url: elem.src,
                async: false,
                dataType: "script"
            })
        } else {
            jQuery.globalEval(elem.text || elem.textContent || elem.innerHTML || "")
        }
        if (elem.parentNode) {
            elem.parentNode.removeChild(elem)
        }
    }
    function access(elems, key, value, exec, fn, pass) {
        var length = elems.length;
        if (typeof key === "object") {
            for (var k in key) {
                access(elems, k, key[k], exec, fn, value)
            }
            return elems
        }
        if (value !== undefined) {
            exec = !pass && exec && jQuery.isFunction(value);
            for (var i = 0; i < length; i++) {
                fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass)
            }
            return elems
        }
        return length ? fn(elems[0], key) : undefined
    }
    function now() {
        return (new Date).getTime()
    } (function() {
        jQuery.support = {};
        var root = document.documentElement,
        script = document.createElement("script"),
        div = document.createElement("div"),
        id = "script" + now();
        div.style.display = "none";
        div.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        var all = div.getElementsByTagName("*"),
        a = div.getElementsByTagName("a")[0];
        if (!all || !all.length || !a) {
            return
        }
        jQuery.support = {
            leadingWhitespace: div.firstChild.nodeType === 3,
            tbody: !div.getElementsByTagName("tbody").length,
            htmlSerialize: !!div.getElementsByTagName("link").length,
            style: /red/.test(a.getAttribute("style")),
            hrefNormalized: a.getAttribute("href") === "/a",
            opacity: /^0.55$/.test(a.style.opacity),
            cssFloat: !!a.style.cssFloat,
            checkOn: div.getElementsByTagName("input")[0].value === "on",
            optSelected: document.createElement("select").appendChild(document.createElement("option")).selected,
            parentNode: div.removeChild(div.appendChild(document.createElement("div"))).parentNode === null,
            deleteExpando: true,
            checkClone: false,
            scriptEval: false,
            noCloneEvent: true,
            boxModel: null
        };
        script.type = "text/javascript";
        try {
            script.appendChild(document.createTextNode("window." + id + "=1;"))
        } catch(e) {}
        root.insertBefore(script, root.firstChild);
        if (window[id]) {
            jQuery.support.scriptEval = true;
            delete window[id]
        }
        try {
            delete script.test
        } catch(e) {
            jQuery.support.deleteExpando = false
        }
        root.removeChild(script);
        if (div.attachEvent && div.fireEvent) {
            div.attachEvent("onclick",
            function click() {
                jQuery.support.noCloneEvent = false;
                div.detachEvent("onclick", click)
            });
            div.cloneNode(true).fireEvent("onclick")
        }
        div = document.createElement("div");
        div.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";
        var fragment = document.createDocumentFragment();
        fragment.appendChild(div.firstChild);
        jQuery.support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        jQuery(function() {
            var div = document.createElement("div");
            div.style.width = div.style.paddingLeft = "1px";
            document.body.appendChild(div);
            jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;
            document.body.removeChild(div).style.display = "none";
            div = null
        });
        var eventSupported = function(eventName) {
            var el = document.createElement("div");
            eventName = "on" + eventName;
            var isSupported = (eventName in el);
            if (!isSupported) {
                el.setAttribute(eventName, "return;");
                isSupported = typeof el[eventName] === "function"
            }
            el = null;
            return isSupported
        };
        jQuery.support.submitBubbles = eventSupported("submit");
        jQuery.support.changeBubbles = eventSupported("change");
        root = script = div = all = a = null
    })();
    jQuery.props = {
        "for": "htmlFor",
        "class": "className",
        readonly: "readOnly",
        maxlength: "maxLength",
        cellspacing: "cellSpacing",
        rowspan: "rowSpan",
        colspan: "colSpan",
        tabindex: "tabIndex",
        usemap: "useMap",
        frameborder: "frameBorder"
    };
    var expando = "jQuery" + now(),
    uuid = 0,
    windowData = {};
    jQuery.extend({
        cache: {},
        expando: expando,
        noData: {
            embed: true,
            object: true,
            applet: true
        },
        data: function(elem, name, data) {
            if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                return
            }
            elem = elem == window ? windowData: elem;
            var id = elem[expando],
            cache = jQuery.cache,
            thisCache;
            if (!id && typeof name === "string" && data === undefined) {
                return null
            }
            if (!id) {
                id = ++uuid
            }
            if (typeof name === "object") {
                elem[expando] = id;
                thisCache = cache[id] = jQuery.extend(true, {},
                name)
            } else {
                if (!cache[id]) {
                    elem[expando] = id;
                    cache[id] = {}
                }
            }
            thisCache = cache[id];
            if (data !== undefined) {
                thisCache[name] = data
            }
            return typeof name === "string" ? thisCache[name] : thisCache
        },
        removeData: function(elem, name) {
            if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                return
            }
            elem = elem == window ? windowData: elem;
            var id = elem[expando],
            cache = jQuery.cache,
            thisCache = cache[id];
            if (name) {
                if (thisCache) {
                    delete thisCache[name];
                    if (jQuery.isEmptyObject(thisCache)) {
                        jQuery.removeData(elem)
                    }
                }
            } else {
                if (jQuery.support.deleteExpando) {
                    delete elem[jQuery.expando]
                } else {
                    if (elem.removeAttribute) {
                        elem.removeAttribute(jQuery.expando)
                    }
                }
                delete cache[id]
            }
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            if (typeof key === "undefined" && this.length) {
                return jQuery.data(this[0])
            } else {
                if (typeof key === "object") {
                    return this.each(function() {
                        jQuery.data(this, key)
                    })
                }
            }
            var parts = key.split(".");
            parts[1] = parts[1] ? "." + parts[1] : "";
            if (value === undefined) {
                var data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
                if (data === undefined && this.length) {
                    data = jQuery.data(this[0], key)
                }
                return data === undefined && parts[1] ? this.data(parts[0]) : data
            } else {
                return this.trigger("setData" + parts[1] + "!", [parts[0], value]).each(function() {
                    jQuery.data(this, key, value)
                })
            }
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key)
            })
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            if (!elem) {
                return
            }
            type = (type || "fx") + "queue";
            var q = jQuery.data(elem, type);
            if (!data) {
                return q || []
            }
            if (!q || jQuery.isArray(data)) {
                q = jQuery.data(elem, type, jQuery.makeArray(data))
            } else {
                q.push(data)
            }
            return q
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type),
            fn = queue.shift();
            if (fn === "inprogress") {
                fn = queue.shift()
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress")
                }
                fn.call(elem,
                function() {
                    jQuery.dequeue(elem, type)
                })
            }
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            if (typeof type !== "string") {
                data = type;
                type = "fx"
            }
            if (data === undefined) {
                return jQuery.queue(this[0], type)
            }
            return this.each(function(i, elem) {
                var queue = jQuery.queue(this, type, data);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type)
                }
            })
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type)
            })
        },
        delay: function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time: time;
            type = type || "fx";
            return this.queue(type,
            function() {
                var elem = this;
                setTimeout(function() {
                    jQuery.dequeue(elem, type)
                },
                time)
            })
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", [])
        }
    });
    var rclass = /[\n\t]/g,
    rspace = /\s+/,
    rreturn = /\r/g,
    rspecialurl = /href|src|style/,
    rtype = /(button|input)/i,
    rfocusable = /(button|input|object|select|textarea)/i,
    rclickable = /^(a|area)$/i,
    rradiocheck = /radio|checkbox/;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, name, value, true, jQuery.attr)
        },
        removeAttr: function(name, fn) {
            return this.each(function() {
                jQuery.attr(this, name, "");
                if (this.nodeType === 1) {
                    this.removeAttribute(name)
                }
            })
        },
        addClass: function(value) {
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.addClass(value.call(this, i, self.attr("class")))
                })
            }
            if (value && typeof value === "string") {
                var classNames = (value || "").split(rspace);
                for (var i = 0, l = this.length; i < l; i++) {
                    var elem = this[i];
                    if (elem.nodeType === 1) {
                        if (!elem.className) {
                            elem.className = value
                        } else {
                            var className = " " + elem.className + " ",
                            setClass = elem.className;
                            for (var c = 0, cl = classNames.length; c < cl; c++) {
                                if (className.indexOf(" " + classNames[c] + " ") < 0) {
                                    setClass += " " + classNames[c]
                                }
                            }
                            elem.className = jQuery.trim(setClass)
                        }
                    }
                }
            }
            return this
        },
        removeClass: function(value) {
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.removeClass(value.call(this, i, self.attr("class")))
                })
            }
            if ((value && typeof value === "string") || value === undefined) {
                var classNames = (value || "").split(rspace);
                for (var i = 0, l = this.length; i < l; i++) {
                    var elem = this[i];
                    if (elem.nodeType === 1 && elem.className) {
                        if (value) {
                            var className = (" " + elem.className + " ").replace(rclass, " ");
                            for (var c = 0, cl = classNames.length; c < cl; c++) {
                                className = className.replace(" " + classNames[c] + " ", " ")
                            }
                            elem.className = jQuery.trim(className)
                        } else {
                            elem.className = ""
                        }
                    }
                }
            }
            return this
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value,
            isBool = typeof stateVal === "boolean";
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.toggleClass(value.call(this, i, self.attr("class"), stateVal), stateVal)
                })
            }
            return this.each(function() {
                if (type === "string") {
                    var className,
                    i = 0,
                    self = jQuery(this),
                    state = stateVal,
                    classNames = value.split(rspace);
                    while ((className = classNames[i++])) {
                        state = isBool ? state: !self.hasClass(className);
                        self[state ? "addClass": "removeClass"](className)
                    }
                } else {
                    if (type === "undefined" || type === "boolean") {
                        if (this.className) {
                            jQuery.data(this, "__className__", this.className)
                        }
                        this.className = this.className || value === false ? "": jQuery.data(this, "__className__") || ""
                    }
                }
            })
        },
        hasClass: function(selector) {
            var className = " " + selector + " ";
            for (var i = 0, l = this.length; i < l; i++) {
                if ((" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1) {
                    return true
                }
            }
            return false
        },
        val: function(value) {
            if (value === undefined) {
                var elem = this[0];
                if (elem) {
                    if (jQuery.nodeName(elem, "option")) {
                        return (elem.attributes.value || {}).specified ? elem.value: elem.text
                    }
                    if (jQuery.nodeName(elem, "select")) {
                        var index = elem.selectedIndex,
                        values = [],
                        options = elem.options,
                        one = elem.type === "select-one";
                        if (index < 0) {
                            return null
                        }
                        for (var i = one ? index: 0, max = one ? index + 1: options.length; i < max; i++) {
                            var option = options[i];
                            if (option.selected) {
                                value = jQuery(option).val();
                                if (one) {
                                    return value
                                }
                                values.push(value)
                            }
                        }
                        return values
                    }
                    if (rradiocheck.test(elem.type) && !jQuery.support.checkOn) {
                        return elem.getAttribute("value") === null ? "on": elem.value
                    }
                    return (elem.value || "").replace(rreturn, "")
                }
                return undefined
            }
            var isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var self = jQuery(this),
                val = value;
                if (this.nodeType !== 1) {
                    return
                }
                if (isFunction) {
                    val = value.call(this, i, self.val())
                }
                if (typeof val === "number") {
                    val += ""
                }
                if (jQuery.isArray(val) && rradiocheck.test(this.type)) {
                    this.checked = jQuery.inArray(self.val(), val) >= 0
                } else {
                    if (jQuery.nodeName(this, "select")) {
                        var values = jQuery.makeArray(val);
                        jQuery("option", this).each(function() {
                            this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0
                        });
                        if (!values.length) {
                            this.selectedIndex = -1
                        }
                    } else {
                        this.value = val
                    }
                }
            })
        }
    });
    jQuery.extend({
        attrFn: {
            val: true,
            css: true,
            html: true,
            text: true,
            data: true,
            width: true,
            height: true,
            offset: true
        },
        attr: function(elem, name, value, pass) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                return undefined
            }
            if (pass && name in jQuery.attrFn) {
                return jQuery(elem)[name](value)
            }
            var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc(elem),
            set = value !== undefined;
            name = notxml && jQuery.props[name] || name;
            if (elem.nodeType === 1) {
                var special = rspecialurl.test(name);
                if (name === "selected" && !jQuery.support.optSelected) {
                    var parent = elem.parentNode;
                    if (parent) {
                        parent.selectedIndex;
                        if (parent.parentNode) {
                            parent.parentNode.selectedIndex
                        }
                    }
                }
                if (name in elem && notxml && !special) {
                    if (set) {
                        if (name === "type" && rtype.test(elem.nodeName) && elem.parentNode) {
                            jQuery.error("type property can't be changed")
                        }
                        elem[name] = value
                    }
                    if (jQuery.nodeName(elem, "form") && elem.getAttributeNode(name)) {
                        return elem.getAttributeNode(name).nodeValue
                    }
                    if (name === "tabIndex") {
                        var attributeNode = elem.getAttributeNode("tabIndex");
                        return attributeNode && attributeNode.specified ? attributeNode.value: rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0: undefined
                    }
                    return elem[name]
                }
                if (!jQuery.support.style && notxml && name === "style") {
                    if (set) {
                        elem.style.cssText = "" + value
                    }
                    return elem.style.cssText
                }
                if (set) {
                    elem.setAttribute(name, "" + value)
                }
                var attr = !jQuery.support.hrefNormalized && notxml && special ? elem.getAttribute(name, 2) : elem.getAttribute(name);
                return attr === null ? undefined: attr
            }
            return jQuery.style(elem, name, value)
        }
    });
    var rnamespaces = /\.(.*)$/,
    fcleanup = function(nm) {
        return nm.replace(/[^\w\s\.\|`]/g,
        function(ch) {
            return "\\" + ch
        })
    };
    jQuery.event = {
        add: function(elem, types, handler, data) {
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return
            }
            if (elem.setInterval && (elem !== window && !elem.frameElement)) {
                elem = window
            }
            var handleObjIn,
            handleObj;
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++
            }
            var elemData = jQuery.data(elem);
            if (!elemData) {
                return
            }
            var events = elemData.events = elemData.events || {},
            eventHandle = elemData.handle,
            eventHandle;
            if (!eventHandle) {
                elemData.handle = eventHandle = function() {
                    return typeof jQuery !== "undefined" && !jQuery.event.triggered ? jQuery.event.handle.apply(eventHandle.elem, arguments) : undefined
                }
            }
            eventHandle.elem = elem;
            types = types.split(" ");
            var type,
            i = 0,
            namespaces;
            while ((type = types[i++])) {
                handleObj = handleObjIn ? jQuery.extend({},
                handleObjIn) : {
                    handler: handler,
                    data: data
                };
                if (type.indexOf(".") > -1) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    handleObj.namespace = namespaces.slice(0).sort().join(".")
                } else {
                    namespaces = [];
                    handleObj.namespace = ""
                }
                handleObj.type = type;
                handleObj.guid = handler.guid;
                var handlers = events[type],
                special = jQuery.event.special[type] || {};
                if (!handlers) {
                    handlers = events[type] = [];
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false)
                        } else {
                            if (elem.attachEvent) {
                                elem.attachEvent("on" + type, eventHandle)
                            }
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid
                    }
                }
                handlers.push(handleObj);
                jQuery.event.global[type] = true
            }
            elem = null
        },
        global: {},
        remove: function(elem, types, handler, pos) {
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return
            }
            var ret,
            type,
            fn,
            i = 0,
            all,
            namespaces,
            namespace,
            special,
            eventType,
            handleObj,
            origType,
            elemData = jQuery.data(elem),
            events = elemData && elemData.events;
            if (!elemData || !events) {
                return
            }
            if (types && types.type) {
                handler = types.handler;
                types = types.type
            }
            if (!types || typeof types === "string" && types.charAt(0) === ".") {
                types = types || "";
                for (type in events) {
                    jQuery.event.remove(elem, type + types)
                }
                return
            }
            types = types.split(" ");
            while ((type = types[i++])) {
                origType = type;
                handleObj = null;
                all = type.indexOf(".") < 0;
                namespaces = [];
                if (!all) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    namespace = new RegExp("(^|\\.)" + jQuery.map(namespaces.slice(0).sort(), fcleanup).join("\\.(?:.*\\.)?") + "(\\.|$)")
                }
                eventType = events[type];
                if (!eventType) {
                    continue
                }
                if (!handler) {
                    for (var j = 0; j < eventType.length; j++) {
                        handleObj = eventType[j];
                        if (all || namespace.test(handleObj.namespace)) {
                            jQuery.event.remove(elem, origType, handleObj.handler, j);
                            eventType.splice(j--, 1)
                        }
                    }
                    continue
                }
                special = jQuery.event.special[type] || {};
                for (var j = pos || 0; j < eventType.length; j++) {
                    handleObj = eventType[j];
                    if (handler.guid === handleObj.guid) {
                        if (all || namespace.test(handleObj.namespace)) {
                            if (pos == null) {
                                eventType.splice(j--, 1)
                            }
                            if (special.remove) {
                                special.remove.call(elem, handleObj)
                            }
                        }
                        if (pos != null) {
                            break
                        }
                    }
                }
                if (eventType.length === 0 || pos != null && eventType.length === 1) {
                    if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
                        removeEvent(elem, type, elemData.handle)
                    }
                    ret = null;
                    delete events[type]
                }
            }
            if (jQuery.isEmptyObject(events)) {
                var handle = elemData.handle;
                if (handle) {
                    handle.elem = null
                }
                delete elemData.events;
                delete elemData.handle;
                if (jQuery.isEmptyObject(elemData)) {
                    jQuery.removeData(elem)
                }
            }
        },
        trigger: function(event, data, elem) {
            var type = event.type || event,
            bubbling = arguments[3];
            if (!bubbling) {
                event = typeof event === "object" ? event[expando] ? event: jQuery.extend(jQuery.Event(type), event) : jQuery.Event(type);
                if (type.indexOf("!") >= 0) {
                    event.type = type = type.slice(0, -1);
                    event.exclusive = true
                }
                if (!elem) {
                    event.stopPropagation();
                    if (jQuery.event.global[type]) {
                        jQuery.each(jQuery.cache,
                        function() {
                            if (this.events && this.events[type]) {
                                jQuery.event.trigger(event, data, this.handle.elem)
                            }
                        })
                    }
                }
                if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                    return undefined
                }
                event.result = undefined;
                event.target = elem;
                data = jQuery.makeArray(data);
                data.unshift(event)
            }
            event.currentTarget = elem;
            var handle = jQuery.data(elem, "handle");
            if (handle) {
                handle.apply(elem, data)
            }
            var parent = elem.parentNode || elem.ownerDocument;
            try {
                if (! (elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()])) {
                    if (elem["on" + type] && elem["on" + type].apply(elem, data) === false) {
                        event.result = false
                    }
                }
            } catch(e) {}
            if (!event.isPropagationStopped() && parent) {
                jQuery.event.trigger(event, data, parent, true)
            } else {
                if (!event.isDefaultPrevented()) {
                    var target = event.target,
                    old,
                    isClick = jQuery.nodeName(target, "a") && type === "click",
                    special = jQuery.event.special[type] || {};
                    if ((!special._default || special._default.call(elem, event) === false) && !isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()])) {
                        try {
                            if (target[type]) {
                                old = target["on" + type];
                                if (old) {
                                    target["on" + type] = null
                                }
                                jQuery.event.triggered = true;
                                target[type]()
                            }
                        } catch(e) {}
                        if (old) {
                            target["on" + type] = old
                        }
                        jQuery.event.triggered = false
                    }
                }
            }
        },
        handle: function(event) {
            var all,
            handlers,
            namespaces,
            namespace,
            events;
            event = arguments[0] = jQuery.event.fix(event || window.event);
            event.currentTarget = this;
            all = event.type.indexOf(".") < 0 && !event.exclusive;
            if (!all) {
                namespaces = event.type.split(".");
                event.type = namespaces.shift();
                namespace = new RegExp("(^|\\.)" + namespaces.slice(0).sort().join("\\.(?:.*\\.)?") + "(\\.|$)")
            }
            var events = jQuery.data(this, "events"),
            handlers = events[event.type];
            if (events && handlers) {
                handlers = handlers.slice(0);
                for (var j = 0, l = handlers.length; j < l; j++) {
                    var handleObj = handlers[j];
                    if (all || namespace.test(handleObj.namespace)) {
                        event.handler = handleObj.handler;
                        event.data = handleObj.data;
                        event.handleObj = handleObj;
                        var ret = handleObj.handler.apply(this, arguments);
                        if (ret !== undefined) {
                            event.result = ret;
                            if (ret === false) {
                                event.preventDefault();
                                event.stopPropagation()
                            }
                        }
                        if (event.isImmediatePropagationStopped()) {
                            break
                        }
                    }
                }
            }
            return event.result
        },
        props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
        fix: function(event) {
            if (event[expando]) {
                return event
            }
            var originalEvent = event;
            event = jQuery.Event(originalEvent);
            for (var i = this.props.length, prop; i;) {
                prop = this.props[--i];
                event[prop] = originalEvent[prop]
            }
            if (!event.target) {
                event.target = event.srcElement || document
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode
            }
            if (!event.relatedTarget && event.fromElement) {
                event.relatedTarget = event.fromElement === event.target ? event.toElement: event.fromElement
            }
            if (event.pageX == null && event.clientX != null) {
                var doc = document.documentElement,
                body = document.body;
                event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
            }
            if (!event.which && ((event.charCode || event.charCode === 0) ? event.charCode: event.keyCode)) {
                event.which = event.charCode || event.keyCode
            }
            if (!event.metaKey && event.ctrlKey) {
                event.metaKey = event.ctrlKey
            }
            if (!event.which && event.button !== undefined) {
                event.which = (event.button & 1 ? 1: (event.button & 2 ? 3: (event.button & 4 ? 2: 0)))
            }
            return event
        },
        guid: 100000000,
        proxy: jQuery.proxy,
        special: {
            ready: {
                setup: jQuery.bindReady,
                teardown: jQuery.noop
            },
            live: {
                add: function(handleObj) {
                    jQuery.event.add(this, handleObj.origType, jQuery.extend({},
                    handleObj, {
                        handler: liveHandler
                    }))
                },
                remove: function(handleObj) {
                    var remove = true,
                    type = handleObj.origType.replace(rnamespaces, "");
                    jQuery.each(jQuery.data(this, "events").live || [],
                    function() {
                        if (type === this.origType.replace(rnamespaces, "")) {
                            remove = false;
                            return false
                        }
                    });
                    if (remove) {
                        jQuery.event.remove(this, handleObj.origType, liveHandler)
                    }
                }
            },
            beforeunload: {
                setup: function(data, namespaces, eventHandle) {
                    if (this.setInterval) {
                        this.onbeforeunload = eventHandle
                    }
                    return false
                },
                teardown: function(namespaces, eventHandle) {
                    if (this.onbeforeunload === eventHandle) {
                        this.onbeforeunload = null
                    }
                }
            }
        }
    };
    var removeEvent = document.removeEventListener ?
    function(elem, type, handle) {
        elem.removeEventListener(type, handle, false)
    }: function(elem, type, handle) {
        elem.detachEvent("on" + type, handle)
    };
    jQuery.Event = function(src) {
        if (!this.preventDefault) {
            return new jQuery.Event(src)
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type
        } else {
            this.type = src
        }
        this.timeStamp = now();
        this[expando] = true
    };
    function returnFalse() {
        return false
    }
    function returnTrue() {
        return true
    }
    jQuery.Event.prototype = {
        preventDefault: function() {
            this.isDefaultPrevented = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return
            }
            if (e.preventDefault) {
                e.preventDefault()
            }
            e.returnValue = false
        },
        stopPropagation: function() {
            this.isPropagationStopped = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return
            }
            if (e.stopPropagation) {
                e.stopPropagation()
            }
            e.cancelBubble = true
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation()
        },
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse
    };
    var withinElement = function(event) {
        var parent = event.relatedTarget;
        try {
            while (parent && parent !== this) {
                parent = parent.parentNode
            }
            if (parent !== this) {
                event.type = event.data;
                jQuery.event.handle.apply(this, arguments)
            }
        } catch(e) {}
    },
    delegate = function(event) {
        event.type = event.data;
        jQuery.event.handle.apply(this, arguments)
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    },
    function(orig, fix) {
        jQuery.event.special[orig] = {
            setup: function(data) {
                jQuery.event.add(this, fix, data && data.selector ? delegate: withinElement, orig)
            },
            teardown: function(data) {
                jQuery.event.remove(this, fix, data && data.selector ? delegate: withinElement)
            }
        }
    });
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function(data, namespaces) {
                if (this.nodeName.toLowerCase() !== "form") {
                    jQuery.event.add(this, "click.specialSubmit",
                    function(e) {
                        var elem = e.target,
                        type = elem.type;
                        if ((type === "submit" || type === "image") && jQuery(elem).closest("form").length) {
                            return trigger("submit", this, arguments)
                        }
                    });
                    jQuery.event.add(this, "keypress.specialSubmit",
                    function(e) {
                        var elem = e.target,
                        type = elem.type;
                        if ((type === "text" || type === "password") && jQuery(elem).closest("form").length && e.keyCode === 13) {
                            return trigger("submit", this, arguments)
                        }
                    })
                } else {
                    return false
                }
            },
            teardown: function(namespaces) {
                jQuery.event.remove(this, ".specialSubmit")
            }
        }
    }
    if (!jQuery.support.changeBubbles) {
        var formElems = /textarea|input|select/i,
        changeFilters,
        getVal = function(elem) {
            var type = elem.type,
            val = elem.value;
            if (type === "radio" || type === "checkbox") {
                val = elem.checked
            } else {
                if (type === "select-multiple") {
                    val = elem.selectedIndex > -1 ? jQuery.map(elem.options,
                    function(elem) {
                        return elem.selected
                    }).join("-") : ""
                } else {
                    if (elem.nodeName.toLowerCase() === "select") {
                        val = elem.selectedIndex
                    }
                }
            }
            return val
        },
        testChange = function testChange(e) {
            var elem = e.target,
            data,
            val;
            if (!formElems.test(elem.nodeName) || elem.readOnly) {
                return
            }
            data = jQuery.data(elem, "_change_data");
            val = getVal(elem);
            if (e.type !== "focusout" || elem.type !== "radio") {
                jQuery.data(elem, "_change_data", val)
            }
            if (data === undefined || val === data) {
                return
            }
            if (data != null || val) {
                e.type = "change";
                return jQuery.event.trigger(e, arguments[1], elem)
            }
        };
        jQuery.event.special.change = {
            filters: {
                focusout: testChange,
                click: function(e) {
                    var elem = e.target,
                    type = elem.type;
                    if (type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select") {
                        return testChange.call(this, e)
                    }
                },
                keydown: function(e) {
                    var elem = e.target,
                    type = elem.type;
                    if ((e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea") || (e.keyCode === 32 && (type === "checkbox" || type === "radio")) || type === "select-multiple") {
                        return testChange.call(this, e)
                    }
                },
                beforeactivate: function(e) {
                    var elem = e.target;
                    jQuery.data(elem, "_change_data", getVal(elem))
                }
            },
            setup: function(data, namespaces) {
                if (this.type === "file") {
                    return false
                }
                for (var type in changeFilters) {
                    jQuery.event.add(this, type + ".specialChange", changeFilters[type])
                }
                return formElems.test(this.nodeName)
            },
            teardown: function(namespaces) {
                jQuery.event.remove(this, ".specialChange");
                return formElems.test(this.nodeName)
            }
        };
        changeFilters = jQuery.event.special.change.filters
    }
    function trigger(type, elem, args) {
        args[0].type = type;
        return jQuery.event.handle.apply(elem, args)
    }
    if (document.addEventListener) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        },
        function(orig, fix) {
            jQuery.event.special[fix] = {
                setup: function() {
                    this.addEventListener(orig, handler, true)
                },
                teardown: function() {
                    this.removeEventListener(orig, handler, true)
                }
            };
            function handler(e) {
                e = jQuery.event.fix(e);
                e.type = fix;
                return jQuery.event.handle.call(this, e)
            }
        })
    }
    jQuery.each(["bind", "one"],
    function(i, name) {
        jQuery.fn[name] = function(type, data, fn) {
            if (typeof type === "object") {
                for (var key in type) {
                    this[name](key, data, type[key], fn)
                }
                return this
            }
            if (jQuery.isFunction(data)) {
                fn = data;
                data = undefined
            }
            var handler = name === "one" ? jQuery.proxy(fn,
            function(event) {
                jQuery(this).unbind(event, handler);
                return fn.apply(this, arguments)
            }) : fn;
            if (type === "unload" && name !== "one") {
                this.one(type, data, fn)
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    jQuery.event.add(this[i], type, handler, data)
                }
            }
            return this
        }
    });
    jQuery.fn.extend({
        unbind: function(type, fn) {
            if (typeof type === "object" && !type.preventDefault) {
                for (var key in type) {
                    this.unbind(key, type[key])
                }
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    jQuery.event.remove(this[i], type, fn)
                }
            }
            return this
        },
        delegate: function(selector, types, data, fn) {
            return this.live(types, data, fn, selector)
        },
        undelegate: function(selector, types, fn) {
            if (arguments.length === 0) {
                return this.unbind("live")
            } else {
                return this.die(types, null, fn, selector)
            }
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this)
            })
        },
        triggerHandler: function(type, data) {
            if (this[0]) {
                var event = jQuery.Event(type);
                event.preventDefault();
                event.stopPropagation();
                jQuery.event.trigger(event, data, this[0]);
                return event.result
            }
        },
        toggle: function(fn) {
            var args = arguments,
            i = 1;
            while (i < args.length) {
                jQuery.proxy(fn, args[i++])
            }
            return this.click(jQuery.proxy(fn,
            function(event) {
                var lastToggle = (jQuery.data(this, "lastToggle" + fn.guid) || 0) % i;
                jQuery.data(this, "lastToggle" + fn.guid, lastToggle + 1);
                event.preventDefault();
                return args[lastToggle].apply(this, arguments) || false
            }))
        },
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        }
    });
    var liveMap = {
        focus: "focusin",
        blur: "focusout",
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    };
    jQuery.each(["live", "die"],
    function(i, name) {
        jQuery.fn[name] = function(types, data, fn, origSelector) {
            var type,
            i = 0,
            match,
            namespaces,
            preType,
            selector = origSelector || this.selector,
            context = origSelector ? this: jQuery(this.context);
            if (jQuery.isFunction(data)) {
                fn = data;
                data = undefined
            }
            types = (types || "").split(" ");
            while ((type = types[i++]) != null) {
                match = rnamespaces.exec(type);
                namespaces = "";
                if (match) {
                    namespaces = match[0];
                    type = type.replace(rnamespaces, "")
                }
                if (type === "hover") {
                    types.push("mouseenter" + namespaces, "mouseleave" + namespaces);
                    continue
                }
                preType = type;
                if (type === "focus" || type === "blur") {
                    types.push(liveMap[type] + namespaces);
                    type = type + namespaces
                } else {
                    type = (liveMap[type] || type) + namespaces
                }
                if (name === "live") {
                    context.each(function() {
                        jQuery.event.add(this, liveConvert(type, selector), {
                            data: data,
                            selector: selector,
                            handler: fn,
                            origType: type,
                            origHandler: fn,
                            preType: preType
                        })
                    })
                } else {
                    context.unbind(liveConvert(type, selector), fn)
                }
            }
            return this
        }
    });
    function liveHandler(event) {
        var stop,
        elems = [],
        selectors = [],
        args = arguments,
        related,
        match,
        handleObj,
        elem,
        j,
        i,
        l,
        data,
        events = jQuery.data(this, "events");
        if (event.liveFired === this || !events || !events.live || event.button && event.type === "click") {
            return
        }
        event.liveFired = this;
        var live = events.live.slice(0);
        for (j = 0; j < live.length; j++) {
            handleObj = live[j];
            if (handleObj.origType.replace(rnamespaces, "") === event.type) {
                selectors.push(handleObj.selector)
            } else {
                live.splice(j--, 1)
            }
        }
        match = jQuery(event.target).closest(selectors, event.currentTarget);
        for (i = 0, l = match.length; i < l; i++) {
            for (j = 0; j < live.length; j++) {
                handleObj = live[j];
                if (match[i].selector === handleObj.selector) {
                    elem = match[i].elem;
                    related = null;
                    if (handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave") {
                        related = jQuery(event.relatedTarget).closest(handleObj.selector)[0]
                    }
                    if (!related || related !== elem) {
                        elems.push({
                            elem: elem,
                            handleObj: handleObj
                        })
                    }
                }
            }
        }
        for (i = 0, l = elems.length; i < l; i++) {
            match = elems[i];
            event.currentTarget = match.elem;
            event.data = match.handleObj.data;
            event.handleObj = match.handleObj;
            if (match.handleObj.origHandler.apply(match.elem, args) === false) {
                stop = false;
                break
            }
        }
        return stop
    }
    function liveConvert(type, selector) {
        return "live." + (type && type !== "*" ? type + ".": "") + selector.replace(/\./g, "`").replace(/ /g, "&")
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error").split(" "),
    function(i, name) {
        jQuery.fn[name] = function(fn) {
            return fn ? this.bind(name, fn) : this.trigger(name)
        };
        if (jQuery.attrFn) {
            jQuery.attrFn[name] = true
        }
    });
    if (window.attachEvent && !window.addEventListener) {
        window.attachEvent("onunload",
        function() {
            for (var id in jQuery.cache) {
                if (jQuery.cache[id].handle) {
                    try {
                        jQuery.event.remove(jQuery.cache[id].handle.elem)
                    } catch(e) {}
                }
            }
        });
        /*
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
    } (function() {
        var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
        done = 0,
        toString = Object.prototype.toString,
        hasDuplicate = false,
        baseHasDuplicate = true; [0, 0].sort(function() {
            baseHasDuplicate = false;
            return 0
        });
        var Sizzle = function(selector, context, results, seed) {
            results = results || [];
            var origContext = context = context || document;
            if (context.nodeType !== 1 && context.nodeType !== 9) {
                return []
            }
            if (!selector || typeof selector !== "string") {
                return results
            }
            var parts = [],
            m,
            set,
            checkSet,
            extra,
            prune = true,
            contextXML = isXML(context),
            soFar = selector;
            while ((chunker.exec(""), m = chunker.exec(soFar)) !== null) {
                soFar = m[3];
                parts.push(m[1]);
                if (m[2]) {
                    extra = m[3];
                    break
                }
            }
            if (parts.length > 1 && origPOS.exec(selector)) {
                if (parts.length === 2 && Expr.relative[parts[0]]) {
                    set = posProcess(parts[0] + parts[1], context)
                } else {
                    set = Expr.relative[parts[0]] ? [context] : Sizzle(parts.shift(), context);
                    while (parts.length) {
                        selector = parts.shift();
                        if (Expr.relative[selector]) {
                            selector += parts.shift()
                        }
                        set = posProcess(selector, set)
                    }
                }
            } else {
                if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
                    var ret = Sizzle.find(parts.shift(), context, contextXML);
                    context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0]
                }
                if (context) {
                    var ret = seed ? {
                        expr: parts.pop(),
                        set: makeArray(seed)
                    }: Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode: context, contextXML);
                    set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
                    if (parts.length > 0) {
                        checkSet = makeArray(set)
                    } else {
                        prune = false
                    }
                    while (parts.length) {
                        var cur = parts.pop(),
                        pop = cur;
                        if (!Expr.relative[cur]) {
                            cur = ""
                        } else {
                            pop = parts.pop()
                        }
                        if (pop == null) {
                            pop = context
                        }
                        Expr.relative[cur](checkSet, pop, contextXML)
                    }
                } else {
                    checkSet = parts = []
                }
            }
            if (!checkSet) {
                checkSet = set
            }
            if (!checkSet) {
                Sizzle.error(cur || selector)
            }
            if (toString.call(checkSet) === "[object Array]") {
                if (!prune) {
                    results.push.apply(results, checkSet)
                } else {
                    if (context && context.nodeType === 1) {
                        for (var i = 0; checkSet[i] != null; i++) {
                            if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i]))) {
                                results.push(set[i])
                            }
                        }
                    } else {
                        for (var i = 0; checkSet[i] != null; i++) {
                            if (checkSet[i] && checkSet[i].nodeType === 1) {
                                results.push(set[i])
                            }
                        }
                    }
                }
            } else {
                makeArray(checkSet, results)
            }
            if (extra) {
                Sizzle(extra, origContext, results, seed);
                Sizzle.uniqueSort(results)
            }
            return results
        };
        Sizzle.uniqueSort = function(results) {
            if (sortOrder) {
                hasDuplicate = baseHasDuplicate;
                results.sort(sortOrder);
                if (hasDuplicate) {
                    for (var i = 1; i < results.length; i++) {
                        if (results[i] === results[i - 1]) {
                            results.splice(i--, 1)
                        }
                    }
                }
            }
            return results
        };
        Sizzle.matches = function(expr, set) {
            return Sizzle(expr, null, null, set)
        };
        Sizzle.find = function(expr, context, isXML) {
            var set,
            match;
            if (!expr) {
                return []
            }
            for (var i = 0, l = Expr.order.length; i < l; i++) {
                var type = Expr.order[i],
                match;
                if ((match = Expr.leftMatch[type].exec(expr))) {
                    var left = match[1];
                    match.splice(1, 1);
                    if (left.substr(left.length - 1) !== "\\") {
                        match[1] = (match[1] || "").replace(/\\/g, "");
                        set = Expr.find[type](match, context, isXML);
                        if (set != null) {
                            expr = expr.replace(Expr.match[type], "");
                            break
                        }
                    }
                }
            }
            if (!set) {
                set = context.getElementsByTagName("*")
            }
            return {
                set: set,
                expr: expr
            }
        };
        Sizzle.filter = function(expr, set, inplace, not) {
            var old = expr,
            result = [],
            curLoop = set,
            match,
            anyFound,
            isXMLFilter = set && set[0] && isXML(set[0]);
            while (expr && set.length) {
                for (var type in Expr.filter) {
                    if ((match = Expr.leftMatch[type].exec(expr)) != null && match[2]) {
                        var filter = Expr.filter[type],
                        found,
                        item,
                        left = match[1];
                        anyFound = false;
                        match.splice(1, 1);
                        if (left.substr(left.length - 1) === "\\") {
                            continue
                        }
                        if (curLoop === result) {
                            result = []
                        }
                        if (Expr.preFilter[type]) {
                            match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
                            if (!match) {
                                anyFound = found = true
                            } else {
                                if (match === true) {
                                    continue
                                }
                            }
                        }
                        if (match) {
                            for (var i = 0; (item = curLoop[i]) != null; i++) {
                                if (item) {
                                    found = filter(item, match, i, curLoop);
                                    var pass = not ^ !!found;
                                    if (inplace && found != null) {
                                        if (pass) {
                                            anyFound = true
                                        } else {
                                            curLoop[i] = false
                                        }
                                    } else {
                                        if (pass) {
                                            result.push(item);
                                            anyFound = true
                                        }
                                    }
                                }
                            }
                        }
                        if (found !== undefined) {
                            if (!inplace) {
                                curLoop = result
                            }
                            expr = expr.replace(Expr.match[type], "");
                            if (!anyFound) {
                                return []
                            }
                            break
                        }
                    }
                }
                if (expr === old) {
                    if (anyFound == null) {
                        Sizzle.error(expr)
                    } else {
                        break
                    }
                }
                old = expr
            }
            return curLoop
        };
        Sizzle.error = function(msg) {
            throw "Syntax error, unrecognized expression: " + msg
        };
        var Expr = Sizzle.selectors = {
            order: ["ID", "NAME", "TAG"],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                "class": "className",
                "for": "htmlFor"
            },
            attrHandle: {
                href: function(elem) {
                    return elem.getAttribute("href")
                }
            },
            relative: {
                "+": function(checkSet, part) {
                    var isPartStr = typeof part === "string",
                    isTag = isPartStr && !/\W/.test(part),
                    isPartStrNotTag = isPartStr && !isTag;
                    if (isTag) {
                        part = part.toLowerCase()
                    }
                    for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                        if ((elem = checkSet[i])) {
                            while ((elem = elem.previousSibling) && elem.nodeType !== 1) {}
                            checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ? elem || false: elem === part
                        }
                    }
                    if (isPartStrNotTag) {
                        Sizzle.filter(part, checkSet, true)
                    }
                },
                ">": function(checkSet, part) {
                    var isPartStr = typeof part === "string";
                    if (isPartStr && !/\W/.test(part)) {
                        part = part.toLowerCase();
                        for (var i = 0, l = checkSet.length; i < l; i++) {
                            var elem = checkSet[i];
                            if (elem) {
                                var parent = elem.parentNode;
                                checkSet[i] = parent.nodeName.toLowerCase() === part ? parent: false
                            }
                        }
                    } else {
                        for (var i = 0, l = checkSet.length; i < l; i++) {
                            var elem = checkSet[i];
                            if (elem) {
                                checkSet[i] = isPartStr ? elem.parentNode: elem.parentNode === part
                            }
                        }
                        if (isPartStr) {
                            Sizzle.filter(part, checkSet, true)
                        }
                    }
                },
                "": function(checkSet, part, isXML) {
                    var doneName = done++,
                    checkFn = dirCheck;
                    if (typeof part === "string" && !/\W/.test(part)) {
                        var nodeCheck = part = part.toLowerCase();
                        checkFn = dirNodeCheck
                    }
                    checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML)
                },
                "~": function(checkSet, part, isXML) {
                    var doneName = done++,
                    checkFn = dirCheck;
                    if (typeof part === "string" && !/\W/.test(part)) {
                        var nodeCheck = part = part.toLowerCase();
                        checkFn = dirNodeCheck
                    }
                    checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML)
                }
            },
            find: {
                ID: function(match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m ? [m] : []
                    }
                },
                NAME: function(match, context) {
                    if (typeof context.getElementsByName !== "undefined") {
                        var ret = [],
                        results = context.getElementsByName(match[1]);
                        for (var i = 0, l = results.length; i < l; i++) {
                            if (results[i].getAttribute("name") === match[1]) {
                                ret.push(results[i])
                            }
                        }
                        return ret.length === 0 ? null: ret
                    }
                },
                TAG: function(match, context) {
                    return context.getElementsByTagName(match[1])
                }
            },
            preFilter: {
                CLASS: function(match, curLoop, inplace, result, not, isXML) {
                    match = " " + match[1].replace(/\\/g, "") + " ";
                    if (isXML) {
                        return match
                    }
                    for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
                        if (elem) {
                            if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0)) {
                                if (!inplace) {
                                    result.push(elem)
                                }
                            } else {
                                if (inplace) {
                                    curLoop[i] = false
                                }
                            }
                        }
                    }
                    return false
                },
                ID: function(match) {
                    return match[1].replace(/\\/g, "")
                },
                TAG: function(match, curLoop) {
                    return match[1].toLowerCase()
                },
                CHILD: function(match) {
                    if (match[1] === "nth") {
                        var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
                        match[2] = (test[1] + (test[2] || 1)) - 0;
                        match[3] = test[3] - 0
                    }
                    match[0] = done++;
                    return match
                },
                ATTR: function(match, curLoop, inplace, result, not, isXML) {
                    var name = match[1].replace(/\\/g, "");
                    if (!isXML && Expr.attrMap[name]) {
                        match[1] = Expr.attrMap[name]
                    }
                    if (match[2] === "~=") {
                        match[4] = " " + match[4] + " "
                    }
                    return match
                },
                PSEUDO: function(match, curLoop, inplace, result, not) {
                    if (match[1] === "not") {
                        if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
                            match[3] = Sizzle(match[3], null, null, curLoop)
                        } else {
                            var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
                            if (!inplace) {
                                result.push.apply(result, ret)
                            }
                            return false
                        }
                    } else {
                        if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                            return true
                        }
                    }
                    return match
                },
                POS: function(match) {
                    match.unshift(true);
                    return match
                }
            },
            filters: {
                enabled: function(elem) {
                    return elem.disabled === false && elem.type !== "hidden"
                },
                disabled: function(elem) {
                    return elem.disabled === true
                },
                checked: function(elem) {
                    return elem.checked === true
                },
                selected: function(elem) {
                    elem.parentNode.selectedIndex;
                    return elem.selected === true
                },
                parent: function(elem) {
                    return !! elem.firstChild
                },
                empty: function(elem) {
                    return ! elem.firstChild
                },
                has: function(elem, i, match) {
                    return !! Sizzle(match[3], elem).length
                },
                header: function(elem) {
                    return /h\d/i.test(elem.nodeName)
                },
                text: function(elem) {
                    return "text" === elem.type
                },
                radio: function(elem) {
                    return "radio" === elem.type
                },
                checkbox: function(elem) {
                    return "checkbox" === elem.type
                },
                file: function(elem) {
                    return "file" === elem.type
                },
                password: function(elem) {
                    return "password" === elem.type
                },
                submit: function(elem) {
                    return "submit" === elem.type
                },
                image: function(elem) {
                    return "image" === elem.type
                },
                reset: function(elem) {
                    return "reset" === elem.type
                },
                button: function(elem) {
                    return "button" === elem.type || elem.nodeName.toLowerCase() === "button"
                },
                input: function(elem) {
                    return /input|select|textarea|button/i.test(elem.nodeName)
                }
            },
            setFilters: {
                first: function(elem, i) {
                    return i === 0
                },
                last: function(elem, i, match, array) {
                    return i === array.length - 1
                },
                even: function(elem, i) {
                    return i % 2 === 0
                },
                odd: function(elem, i) {
                    return i % 2 === 1
                },
                lt: function(elem, i, match) {
                    return i < match[3] - 0
                },
                gt: function(elem, i, match) {
                    return i > match[3] - 0
                },
                nth: function(elem, i, match) {
                    return match[3] - 0 === i
                },
                eq: function(elem, i, match) {
                    return match[3] - 0 === i
                }
            },
            filter: {
                PSEUDO: function(elem, match, i, array) {
                    var name = match[1],
                    filter = Expr.filters[name];
                    if (filter) {
                        return filter(elem, i, match, array)
                    } else {
                        if (name === "contains") {
                            return (elem.textContent || elem.innerText || getText([elem]) || "").indexOf(match[3]) >= 0
                        } else {
                            if (name === "not") {
                                var not = match[3];
                                for (var i = 0, l = not.length; i < l; i++) {
                                    if (not[i] === elem) {
                                        return false
                                    }
                                }
                                return true
                            } else {
                                Sizzle.error("Syntax error, unrecognized expression: " + name)
                            }
                        }
                    }
                },
                CHILD: function(elem, match) {
                    var type = match[1],
                    node = elem;
                    switch (type) {
                    case "only":
                    case "first":
                        while ((node = node.previousSibling)) {
                            if (node.nodeType === 1) {
                                return false
                            }
                        }
                        if (type === "first") {
                            return true
                        }
                        node = elem;
                    case "last":
                        while ((node = node.nextSibling)) {
                            if (node.nodeType === 1) {
                                return false
                            }
                        }
                        return true;
                    case "nth":
                        var first = match[2],
                        last = match[3];
                        if (first === 1 && last === 0) {
                            return true
                        }
                        var doneName = match[0],
                        parent = elem.parentNode;
                        if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
                            var count = 0;
                            for (node = parent.firstChild; node; node = node.nextSibling) {
                                if (node.nodeType === 1) {
                                    node.nodeIndex = ++count
                                }
                            }
                            parent.sizcache = doneName
                        }
                        var diff = elem.nodeIndex - last;
                        if (first === 0) {
                            return diff === 0
                        } else {
                            return (diff % first === 0 && diff / first >= 0)
                        }
                    }
                },
                ID: function(elem, match) {
                    return elem.nodeType === 1 && elem.getAttribute("id") === match
                },
                TAG: function(elem, match) {
                    return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match
                },
                CLASS: function(elem, match) {
                    return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1
                },
                ATTR: function(elem, match) {
                    var name = match[1],
                    result = Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name),
                    value = result + "",
                    type = match[2],
                    check = match[4];
                    return result == null ? type === "!=": type === "=" ? value === check: type === "*=" ? value.indexOf(check) >= 0: type === "~=" ? (" " + value + " ").indexOf(check) >= 0: !check ? value && result !== false: type === "!=" ? value !== check: type === "^=" ? value.indexOf(check) === 0: type === "$=" ? value.substr(value.length - check.length) === check: type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-": false
                },
                POS: function(elem, match, i, array) {
                    var name = match[2],
                    filter = Expr.setFilters[name];
                    if (filter) {
                        return filter(elem, i, match, array)
                    }
                }
            }
        };
        var origPOS = Expr.match.POS;
        for (var type in Expr.match) {
            Expr.match[type] = new RegExp(Expr.match[type].source + /(?![^\[]*\])(?![^\(]*\))/.source);
            Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source.replace(/\\(\d+)/g,
            function(all, num) {
                return "\\" + (num - 0 + 1)
            }))
        }
        var makeArray = function(array, results) {
            array = Array.prototype.slice.call(array, 0);
            if (results) {
                results.push.apply(results, array);
                return results
            }
            return array
        };
        try {
            Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType
        } catch(e) {
            makeArray = function(array, results) {
                var ret = results || [];
                if (toString.call(array) === "[object Array]") {
                    Array.prototype.push.apply(ret, array)
                } else {
                    if (typeof array.length === "number") {
                        for (var i = 0, l = array.length; i < l; i++) {
                            ret.push(array[i])
                        }
                    } else {
                        for (var i = 0; array[i]; i++) {
                            ret.push(array[i])
                        }
                    }
                }
                return ret
            }
        }
        var sortOrder;
        if (document.documentElement.compareDocumentPosition) {
            sortOrder = function(a, b) {
                if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                    if (a == b) {
                        hasDuplicate = true
                    }
                    return a.compareDocumentPosition ? -1: 1
                }
                var ret = a.compareDocumentPosition(b) & 4 ? -1: a === b ? 0: 1;
                if (ret === 0) {
                    hasDuplicate = true
                }
                return ret
            }
        } else {
            if ("sourceIndex" in document.documentElement) {
                sortOrder = function(a, b) {
                    if (!a.sourceIndex || !b.sourceIndex) {
                        if (a == b) {
                            hasDuplicate = true
                        }
                        return a.sourceIndex ? -1: 1
                    }
                    var ret = a.sourceIndex - b.sourceIndex;
                    if (ret === 0) {
                        hasDuplicate = true
                    }
                    return ret
                }
            } else {
                if (document.createRange) {
                    sortOrder = function(a, b) {
                        if (!a.ownerDocument || !b.ownerDocument) {
                            if (a == b) {
                                hasDuplicate = true
                            }
                            return a.ownerDocument ? -1: 1
                        }
                        var aRange = a.ownerDocument.createRange(),
                        bRange = b.ownerDocument.createRange();
                        aRange.setStart(a, 0);
                        aRange.setEnd(a, 0);
                        bRange.setStart(b, 0);
                        bRange.setEnd(b, 0);
                        var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
                        if (ret === 0) {
                            hasDuplicate = true
                        }
                        return ret
                    }
                }
            }
        }
        function getText(elems) {
            var ret = "",
            elem;
            for (var i = 0; elems[i]; i++) {
                elem = elems[i];
                if (elem.nodeType === 3 || elem.nodeType === 4) {
                    ret += elem.nodeValue
                } else {
                    if (elem.nodeType !== 8) {
                        ret += getText(elem.childNodes)
                    }
                }
            }
            return ret
        } (function() {
            var form = document.createElement("div"),
            id = "script" + (new Date).getTime();
            form.innerHTML = "<a name='" + id + "'/>";
            var root = document.documentElement;
            root.insertBefore(form, root.firstChild);
            if (document.getElementById(id)) {
                Expr.find.ID = function(match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined: []
                    }
                };
                Expr.filter.ID = function(elem, match) {
                    var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return elem.nodeType === 1 && node && node.nodeValue === match
                }
            }
            root.removeChild(form);
            root = form = null
        })(); (function() {
            var div = document.createElement("div");
            div.appendChild(document.createComment(""));
            if (div.getElementsByTagName("*").length > 0) {
                Expr.find.TAG = function(match, context) {
                    var results = context.getElementsByTagName(match[1]);
                    if (match[1] === "*") {
                        var tmp = [];
                        for (var i = 0; results[i]; i++) {
                            if (results[i].nodeType === 1) {
                                tmp.push(results[i])
                            }
                        }
                        results = tmp
                    }
                    return results
                }
            }
            div.innerHTML = "<a href='#'></a>";
            if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
                Expr.attrHandle.href = function(elem) {
                    return elem.getAttribute("href", 2)
                }
            }
            div = null
        })();
        if (document.querySelectorAll) { (function() {
                var oldSizzle = Sizzle,
                div = document.createElement("div");
                div.innerHTML = "<p class='TEST'></p>";
                if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                    return
                }
                Sizzle = function(query, context, extra, seed) {
                    context = context || document;
                    if (!seed && context.nodeType === 9 && !isXML(context)) {
                        try {
                            return makeArray(context.querySelectorAll(query), extra)
                        } catch(e) {}
                    }
                    return oldSizzle(query, context, extra, seed)
                };
                for (var prop in oldSizzle) {
                    Sizzle[prop] = oldSizzle[prop]
                }
                div = null
            })()
        } (function() {
            var div = document.createElement("div");
            div.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
                return
            }
            div.lastChild.className = "e";
            if (div.getElementsByClassName("e").length === 1) {
                return
            }
            Expr.order.splice(1, 0, "CLASS");
            Expr.find.CLASS = function(match, context, isXML) {
                if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                    return context.getElementsByClassName(match[1])
                }
            };
            div = null
        })();
        function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    elem = elem[dir];
                    var match = false;
                    while (elem) {
                        if (elem.sizcache === doneName) {
                            match = checkSet[elem.sizset];
                            break
                        }
                        if (elem.nodeType === 1 && !isXML) {
                            elem.sizcache = doneName;
                            elem.sizset = i
                        }
                        if (elem.nodeName.toLowerCase() === cur) {
                            match = elem;
                            break
                        }
                        elem = elem[dir]
                    }
                    checkSet[i] = match
                }
            }
        }
        function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    elem = elem[dir];
                    var match = false;
                    while (elem) {
                        if (elem.sizcache === doneName) {
                            match = checkSet[elem.sizset];
                            break
                        }
                        if (elem.nodeType === 1) {
                            if (!isXML) {
                                elem.sizcache = doneName;
                                elem.sizset = i
                            }
                            if (typeof cur !== "string") {
                                if (elem === cur) {
                                    match = true;
                                    break
                                }
                            } else {
                                if (Sizzle.filter(cur, [elem]).length > 0) {
                                    match = elem;
                                    break
                                }
                            }
                        }
                        elem = elem[dir]
                    }
                    checkSet[i] = match
                }
            }
        }
        var contains = document.compareDocumentPosition ?
        function(a, b) {
            return !! (a.compareDocumentPosition(b) & 16)
        }: function(a, b) {
            return a !== b && (a.contains ? a.contains(b) : true)
        };
        var isXML = function(elem) {
            var documentElement = (elem ? elem.ownerDocument || elem: 0).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML": false
        };
        var posProcess = function(selector, context) {
            var tmpSet = [],
            later = "",
            match,
            root = context.nodeType ? [context] : context;
            while ((match = Expr.match.PSEUDO.exec(selector))) {
                later += match[0];
                selector = selector.replace(Expr.match.PSEUDO, "")
            }
            selector = Expr.relative[selector] ? selector + "*": selector;
            for (var i = 0, l = root.length; i < l; i++) {
                Sizzle(selector, root[i], tmpSet)
            }
            return Sizzle.filter(later, tmpSet)
        };
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.filters;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = getText;
        jQuery.isXMLDoc = isXML;
        jQuery.contains = contains;
        return;
        window.Sizzle = Sizzle
    })();
    var runtil = /Until$/,
    rparentsprev = /^(?:parents|prevUntil|prevAll)/,
    rmultiselector = /,/,
    slice = Array.prototype.slice;
    var winnow = function(elements, qualifier, keep) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements,
            function(elem, i) {
                return !! qualifier.call(elem, i, elem) === keep
            })
        } else {
            if (qualifier.nodeType) {
                return jQuery.grep(elements,
                function(elem, i) {
                    return (elem === qualifier) === keep
                })
            } else {
                if (typeof qualifier === "string") {
                    var filtered = jQuery.grep(elements,
                    function(elem) {
                        return elem.nodeType === 1
                    });
                    if (isSimple.test(qualifier)) {
                        return jQuery.filter(qualifier, filtered, !keep)
                    } else {
                        qualifier = jQuery.filter(qualifier, filtered)
                    }
                }
            }
        }
        return jQuery.grep(elements,
        function(elem, i) {
            return (jQuery.inArray(elem, qualifier) >= 0) === keep
        })
    };
    jQuery.fn.extend({
        find: function(selector) {
            var ret = this.pushStack("", "find", selector),
            length = 0;
            for (var i = 0, l = this.length; i < l; i++) {
                length = ret.length;
                jQuery.find(selector, this[i], ret);
                if (i > 0) {
                    for (var n = length; n < ret.length; n++) {
                        for (var r = 0; r < length; r++) {
                            if (ret[r] === ret[n]) {
                                ret.splice(n--, 1);
                                break
                            }
                        }
                    }
                }
            }
            return ret
        },
        has: function(target) {
            var targets = jQuery(target);
            return this.filter(function() {
                for (var i = 0, l = targets.length; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true
                    }
                }
            })
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector, false), "not", selector)
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector, true), "filter", selector)
        },
        is: function(selector) {
            return !! selector && jQuery.filter(selector, this).length > 0
        },
        closest: function(selectors, context) {
            if (jQuery.isArray(selectors)) {
                var ret = [],
                cur = this[0],
                match,
                matches = {},
                selector;
                if (cur && selectors.length) {
                    for (var i = 0, l = selectors.length; i < l; i++) {
                        selector = selectors[i];
                        if (!matches[selector]) {
                            matches[selector] = jQuery.expr.match.POS.test(selector) ? jQuery(selector, context || this.context) : selector
                        }
                    }
                    while (cur && cur.ownerDocument && cur !== context) {
                        for (selector in matches) {
                            match = matches[selector];
                            if (match.jquery ? match.index(cur) > -1: jQuery(cur).is(match)) {
                                ret.push({
                                    selector: selector,
                                    elem: cur
                                });
                                delete matches[selector]
                            }
                        }
                        cur = cur.parentNode
                    }
                }
                return ret
            }
            var pos = jQuery.expr.match.POS.test(selectors) ? jQuery(selectors, context || this.context) : null;
            return this.map(function(i, cur) {
                while (cur && cur.ownerDocument && cur !== context) {
                    if (pos ? pos.index(cur) > -1: jQuery(cur).is(selectors)) {
                        return cur
                    }
                    cur = cur.parentNode
                }
                return null
            })
        },
        index: function(elem) {
            if (!elem || typeof elem === "string") {
                return jQuery.inArray(this[0], elem ? jQuery(elem) : this.parent().children())
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this)
        },
        add: function(selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context || this.context) : jQuery.makeArray(selector),
            all = jQuery.merge(this.get(), set);
            return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all: jQuery.unique(all))
        },
        andSelf: function() {
            return this.add(this.prevObject)
        }
    });
    function isDisconnected(node) {
        return ! node || !node.parentNode || node.parentNode.nodeType === 11
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent: null
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode")
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until)
        },
        next: function(elem) {
            return jQuery.nth(elem, 2, "nextSibling")
        },
        prev: function(elem) {
            return jQuery.nth(elem, 2, "previousSibling")
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling")
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling")
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until)
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until)
        },
        siblings: function(elem) {
            return jQuery.sibling(elem.parentNode.firstChild, elem)
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild)
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document: jQuery.makeArray(elem.childNodes)
        }
    },
    function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (!runtil.test(name)) {
                selector = until
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret)
            }
            ret = this.length > 1 ? jQuery.unique(ret) : ret;
            if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
                ret = ret.reverse()
            }
            return this.pushStack(ret, name, slice.call(arguments).join(","))
        }
    });
    jQuery.extend({
        filter: function(expr, elems, not) {
            if (not) {
                expr = ":not(" + expr + ")"
            }
            return jQuery.find.matches(expr, elems)
        },
        dir: function(elem, dir, until) {
            var matched = [],
            cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur)
                }
                cur = cur[dir]
            }
            return matched
        },
        nth: function(cur, result, dir, elem) {
            result = result || 1;
            var num = 0;
            for (; cur; cur = cur[dir]) {
                if (cur.nodeType === 1 && ++num === result) {
                    break
                }
            }
            return cur
        },
        sibling: function(n, elem) {
            var r = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n)
                }
            }
            return r
        }
    });
    var rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
    rleadingWhitespace = /^\s+/,
    rxhtmlTag = /(<([\w:]+)[^>]*?)\/>/g,
    rselfClosing = /^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i,
    rtagName = /<([\w:]+)/,
    rtbody = /<tbody/i,
    rhtml = /<|&#?\w+;/,
    rnocache = /<script|<object|<embed|<option|<style/i,
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    fcloseTag = function(all, front, tag) {
        return rselfClosing.test(tag) ? all: front + "></" + tag + ">"
    },
    wrapMap = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        legend: [1, "<fieldset>", "</fieldset>"],
        thead: [1, "<table>", "</table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        area: [1, "<map>", "</map>"],
        _default: [0, "", ""]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    if (!jQuery.support.htmlSerialize) {
        wrapMap._default = [1, "div<div>", "</div>"]
    }
    jQuery.fn.extend({
        text: function(text) {
            if (jQuery.isFunction(text)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.text(text.call(this, i, self.text()))
                })
            }
            if (typeof text !== "object" && text !== undefined) {
                return this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(text))
            }
            return jQuery.text(this)
        },
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i))
                })
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0])
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild
                    }
                    return elem
                }).append(this)
            }
            return this
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i))
                })
            }
            return this.each(function() {
                var self = jQuery(this),
                contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html)
                } else {
                    self.append(html)
                }
            })
        },
        wrap: function(html) {
            return this.each(function() {
                jQuery(this).wrapAll(html)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes)
                }
            }).end()
        },
        append: function() {
            return this.domManip(arguments, true,
            function(elem) {
                if (this.nodeType === 1) {
                    this.appendChild(elem)
                }
            })
        },
        prepend: function() {
            return this.domManip(arguments, true,
            function(elem) {
                if (this.nodeType === 1) {
                    this.insertBefore(elem, this.firstChild)
                }
            })
        },
        before: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false,
                function(elem) {
                    this.parentNode.insertBefore(elem, this)
                })
            } else {
                if (arguments.length) {
                    var set = jQuery(arguments[0]);
                    set.push.apply(set, this.toArray());
                    return this.pushStack(set, "before", arguments)
                }
            }
        },
        after: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false,
                function(elem) {
                    this.parentNode.insertBefore(elem, this.nextSibling)
                })
            } else {
                if (arguments.length) {
                    var set = this.pushStack(this, "after", arguments);
                    set.push.apply(set, jQuery(arguments[0]).toArray());
                    return set
                }
            }
        },
        remove: function(selector, keepData) {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [elem]).length) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(elem.getElementsByTagName("*"));
                        jQuery.cleanData([elem])
                    }
                    if (elem.parentNode) {
                        elem.parentNode.removeChild(elem)
                    }
                }
            }
            return this
        },
        empty: function() {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(elem.getElementsByTagName("*"))
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild)
                }
            }
            return this
        },
        clone: function(events) {
            var ret = this.map(function() {
                if (!jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this)) {
                    var html = this.outerHTML,
                    ownerDocument = this.ownerDocument;
                    if (!html) {
                        var div = ownerDocument.createElement("div");
                        div.appendChild(this.cloneNode(true));
                        html = div.innerHTML
                    }
                    return jQuery.clean([html.replace(rinlinejQuery, "").replace(/=([^="'>\s]+\/)>/g, '="$1">').replace(rleadingWhitespace, "")], ownerDocument)[0]
                } else {
                    return this.cloneNode(true)
                }
            });
            if (events === true) {
                cloneCopyEvent(this, ret);
                cloneCopyEvent(this.find("*"), ret.find("*"))
            }
            return ret
        },
        html: function(value) {
            if (value === undefined) {
                return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(rinlinejQuery, "") : null
            } else {
                if (typeof value === "string" && !rnocache.test(value) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, fcloseTag);
                    try {
                        for (var i = 0, l = this.length; i < l; i++) {
                            if (this[i].nodeType === 1) {
                                jQuery.cleanData(this[i].getElementsByTagName("*"));
                                this[i].innerHTML = value
                            }
                        }
                    } catch(e) {
                        this.empty().append(value)
                    }
                } else {
                    if (jQuery.isFunction(value)) {
                        this.each(function(i) {
                            var self = jQuery(this),
                            old = self.html();
                            self.empty().append(function() {
                                return value.call(this, i, old)
                            })
                        })
                    } else {
                        this.empty().append(value)
                    }
                }
            }
            return this
        },
        replaceWith: function(value) {
            if (this[0] && this[0].parentNode) {
                if (jQuery.isFunction(value)) {
                    return this.each(function(i) {
                        var self = jQuery(this),
                        old = self.html();
                        self.replaceWith(value.call(this, i, old))
                    })
                }
                if (typeof value !== "string") {
                    value = jQuery(value).detach()
                }
                return this.each(function() {
                    var next = this.nextSibling,
                    parent = this.parentNode;
                    jQuery(this).remove();
                    if (next) {
                        jQuery(next).before(value)
                    } else {
                        jQuery(parent).append(value)
                    }
                })
            } else {
                return this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value)
            }
        },
        detach: function(selector) {
            return this.remove(selector, true)
        },
        domManip: function(args, table, callback) {
            var results,
            first,
            value = args[0],
            scripts = [],
            fragment,
            parent;
            if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
                return this.each(function() {
                    jQuery(this).domManip(args, table, callback, true)
                })
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    args[0] = value.call(this, i, table ? self.html() : undefined);
                    self.domManip(args, table, callback)
                })
            }
            if (this[0]) {
                parent = value && value.parentNode;
                if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
                    results = {
                        fragment: parent
                    }
                } else {
                    results = buildFragment(args, this, scripts)
                }
                fragment = results.fragment;
                if (fragment.childNodes.length === 1) {
                    first = fragment = fragment.firstChild
                } else {
                    first = fragment.firstChild
                }
                if (first) {
                    table = table && jQuery.nodeName(first, "tr");
                    for (var i = 0, l = this.length; i < l; i++) {
                        callback.call(table ? root(this[i], first) : this[i], i > 0 || results.cacheable || this.length > 1 ? fragment.cloneNode(true) : fragment)
                    }
                }
                if (scripts.length) {
                    jQuery.each(scripts, evalScript)
                }
            }
            return this;
            function root(elem, cur) {
                return jQuery.nodeName(elem, "table") ? (elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody"))) : elem
            }
        }
    });
    function cloneCopyEvent(orig, ret) {
        var i = 0;
        ret.each(function() {
            if (this.nodeName !== (orig[i] && orig[i].nodeName)) {
                return
            }
            var oldData = jQuery.data(orig[i++]),
            curData = jQuery.data(this, oldData),
            events = oldData && oldData.events;
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (var type in events) {
                    for (var handler in events[type]) {
                        jQuery.event.add(this, type, events[type][handler], events[type][handler].data)
                    }
                }
            }
        })
    }
    function buildFragment(args, nodes, scripts) {
        var fragment,
        cacheable,
        cacheresults,
        doc = (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document);
        if (args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document && !rnocache.test(args[0]) && (jQuery.support.checkClone || !rchecked.test(args[0]))) {
            cacheable = true;
            cacheresults = jQuery.fragments[args[0]];
            if (cacheresults) {
                if (cacheresults !== 1) {
                    fragment = cacheresults
                }
            }
        }
        if (!fragment) {
            fragment = doc.createDocumentFragment();
            jQuery.clean(args, doc, fragment, scripts)
        }
        if (cacheable) {
            jQuery.fragments[args[0]] = cacheresults ? fragment: 1
        }
        return {
            fragment: fragment,
            cacheable: cacheable
        }
    }
    jQuery.fragments = {};
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    },
    function(name, original) {
        jQuery.fn[name] = function(selector) {
            var ret = [],
            insert = jQuery(selector),
            parent = this.length === 1 && this[0].parentNode;
            if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
                insert[original](this[0]);
                return this
            } else {
                for (var i = 0, l = insert.length; i < l; i++) {
                    var elems = (i > 0 ? this.clone(true) : this).get();
                    jQuery.fn[original].apply(jQuery(insert[i]), elems);
                    ret = ret.concat(elems)
                }
                return this.pushStack(ret, name, insert.selector)
            }
        }
    });
    jQuery.extend({
        clean: function(elems, context, fragment, scripts) {
            context = context || document;
            if (typeof context.createElement === "undefined") {
                context = context.ownerDocument || context[0] && context[0].ownerDocument || document
            }
            var ret = [];
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                if (typeof elem === "number") {
                    elem += ""
                }
                if (!elem) {
                    continue
                }
                if (typeof elem === "string" && !rhtml.test(elem)) {
                    elem = context.createTextNode(elem)
                } else {
                    if (typeof elem === "string") {
                        elem = elem.replace(rxhtmlTag, fcloseTag);
                        var tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase(),
                        wrap = wrapMap[tag] || wrapMap._default,
                        depth = wrap[0],
                        div = context.createElement("div");
                        div.innerHTML = wrap[1] + elem + wrap[2];
                        while (depth--) {
                            div = div.lastChild
                        }
                        if (!jQuery.support.tbody) {
                            var hasBody = rtbody.test(elem),
                            tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes: wrap[1] === "<table>" && !hasBody ? div.childNodes: [];
                            for (var j = tbody.length - 1; j >= 0; --j) {
                                if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
                                    tbody[j].parentNode.removeChild(tbody[j])
                                }
                            }
                        }
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild)
                        }
                        elem = div.childNodes
                    }
                }
                if (elem.nodeType) {
                    ret.push(elem)
                } else {
                    ret = jQuery.merge(ret, elem)
                }
            }
            if (fragment) {
                for (var i = 0; ret[i]; i++) {
                    if (scripts && jQuery.nodeName(ret[i], "script") && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript")) {
                        scripts.push(ret[i].parentNode ? ret[i].parentNode.removeChild(ret[i]) : ret[i])
                    } else {
                        if (ret[i].nodeType === 1) {
                            ret.splice.apply(ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))))
                        }
                        fragment.appendChild(ret[i])
                    }
                }
            }
            return ret
        },
        cleanData: function(elems) {
            var data,
            id,
            cache = jQuery.cache,
            special = jQuery.event.special,
            deleteExpando = jQuery.support.deleteExpando;
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                id = elem[jQuery.expando];
                if (id) {
                    data = cache[id];
                    if (data.events) {
                        for (var type in data.events) {
                            if (special[type]) {
                                jQuery.event.remove(elem, type)
                            } else {
                                removeEvent(elem, type, data.handle)
                            }
                        }
                    }
                    if (deleteExpando) {
                        delete elem[jQuery.expando]
                    } else {
                        if (elem.removeAttribute) {
                            elem.removeAttribute(jQuery.expando)
                        }
                    }
                    delete cache[id]
                }
            }
        }
    });
    var rexclude = /z-?index|font-?weight|opacity|zoom|line-?height/i,
    ralpha = /alpha\([^)]*\)/,
    ropacity = /opacity=([^)]*)/,
    rfloat = /float/i,
    rdashAlpha = /-([a-z])/ig,
    rupper = /([A-Z])/g,
    rnumpx = /^-?\d+(?:px)?$/i,
    rnum = /^-?\d/,
    cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    },
    cssWidth = ["Left", "Right"],
    cssHeight = ["Top", "Bottom"],
    getComputedStyle = document.defaultView && document.defaultView.getComputedStyle,
    styleFloat = jQuery.support.cssFloat ? "cssFloat": "styleFloat",
    fcamelCase = function(all, letter) {
        return letter.toUpperCase()
    };
    jQuery.fn.css = function(name, value) {
        return access(this, name, value, true,
        function(elem, name, value) {
            if (value === undefined) {
                return jQuery.curCSS(elem, name)
            }
            if (typeof value === "number" && !rexclude.test(name)) {
                value += "px"
            }
            jQuery.style(elem, name, value)
        })
    };
    jQuery.extend({
        style: function(elem, name, value) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                return undefined
            }
            if ((name === "width" || name === "height") && parseFloat(value) < 0) {
                value = undefined
            }
            var style = elem.style || elem,
            set = value !== undefined;
            if (!jQuery.support.opacity && name === "opacity") {
                if (set) {
                    style.zoom = 1;
                    var opacity = parseInt(value, 10) + "" === "NaN" ? "": "alpha(opacity=" + value * 100 + ")";
                    var filter = style.filter || jQuery.curCSS(elem, "filter") || "";
                    style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : opacity
                }
                return style.filter && style.filter.indexOf("opacity=") >= 0 ? (parseFloat(ropacity.exec(style.filter)[1]) / 100) + "": ""
            }
            if (rfloat.test(name)) {
                name = styleFloat
            }
            name = name.replace(rdashAlpha, fcamelCase);
            if (set) {
                style[name] = value
            }
            return style[name]
        },
        css: function(elem, name, force, extra) {
            if (name === "width" || name === "height") {
                var val,
                props = cssShow,
                which = name === "width" ? cssWidth: cssHeight;
                function getWH() {
                    val = name === "width" ? elem.offsetWidth: elem.offsetHeight;
                    if (extra === "border") {
                        return
                    }
                    jQuery.each(which,
                    function() {
                        if (!extra) {
                            val -= parseFloat(jQuery.curCSS(elem, "padding" + this, true)) || 0
                        }
                        if (extra === "margin") {
                            val += parseFloat(jQuery.curCSS(elem, "margin" + this, true)) || 0
                        } else {
                            val -= parseFloat(jQuery.curCSS(elem, "border" + this + "Width", true)) || 0
                        }
                    })
                }
                if (elem.offsetWidth !== 0) {
                    getWH()
                } else {
                    jQuery.swap(elem, props, getWH)
                }
                return Math.max(0, Math.round(val))
            }
            return jQuery.curCSS(elem, name, force)
        },
        curCSS: function(elem, name, force) {
            var ret,
            style = elem.style,
            filter;
            if (!jQuery.support.opacity && name === "opacity" && elem.currentStyle) {
                ret = ropacity.test(elem.currentStyle.filter || "") ? (parseFloat(RegExp.$1) / 100) + "": "";
                return ret === "" ? "1": ret
            }
            if (rfloat.test(name)) {
                name = styleFloat
            }
            if (!force && style && style[name]) {
                ret = style[name]
            } else {
                if (getComputedStyle) {
                    if (rfloat.test(name)) {
                        name = "float"
                    }
                    name = name.replace(rupper, "-$1").toLowerCase();
                    var defaultView = elem.ownerDocument.defaultView;
                    if (!defaultView) {
                        return null
                    }
                    var computedStyle = defaultView.getComputedStyle(elem, null);
                    if (computedStyle) {
                        ret = computedStyle.getPropertyValue(name)
                    }
                    if (name === "opacity" && ret === "") {
                        ret = "1"
                    }
                } else {
                    if (elem.currentStyle) {
                        var camelCase = name.replace(rdashAlpha, fcamelCase);
                        ret = elem.currentStyle[name] || elem.currentStyle[camelCase];
                        if (!rnumpx.test(ret) && rnum.test(ret)) {
                            var left = style.left,
                            rsLeft = elem.runtimeStyle.left;
                            elem.runtimeStyle.left = elem.currentStyle.left;
                            style.left = camelCase === "fontSize" ? "1em": (ret || 0);
                            ret = style.pixelLeft + "px";
                            style.left = left;
                            elem.runtimeStyle.left = rsLeft
                        }
                    }
                }
            }
            return ret
        },
        swap: function(elem, options, callback) {
            var old = {};
            for (var name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name]
            }
            callback.call(elem);
            for (var name in options) {
                elem.style[name] = old[name]
            }
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function(elem) {
            var width = elem.offsetWidth,
            height = elem.offsetHeight,
            skip = elem.nodeName.toLowerCase() === "tr";
            return width === 0 && height === 0 && !skip ? true: width > 0 && height > 0 && !skip ? false: jQuery.curCSS(elem, "display") === "none"
        };
        jQuery.expr.filters.visible = function(elem) {
            return ! jQuery.expr.filters.hidden(elem)
        }
    }
    var jsc = now(),
    rscript = /<script(.|\s)*?\/script>/gi,
    rselectTextarea = /select|textarea/i,
    rinput = /color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,
    jsre = /=\?(&|$)/,
    rquery = /\?/,
    rts = /(\?|&)_=.*?(&|$)/,
    rurl = /^(\w+:)?\/\/([^\/?#]+)/,
    r20 = /%20/g,
    _load = jQuery.fn.load;
    jQuery.fn.extend({
        load: function(url, params, callback) {
            if (typeof url !== "string") {
                return _load.call(this, url)
            } else {
                if (!this.length) {
                    return this
                }
            }
            var off = url.indexOf(" ");
            if (off >= 0) {
                var selector = url.slice(off, url.length);
                url = url.slice(0, off)
            }
            var type = "GET";
            if (params) {
                if (jQuery.isFunction(params)) {
                    callback = params;
                    params = null
                } else {
                    if (typeof params === "object") {
                        params = jQuery.param(params, jQuery.ajaxSettings.traditional);
                        type = "POST"
                    }
                }
            }
            var self = this;
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params,
                complete: function(res, status) {
                    if (status === "success" || status === "notmodified") {
                        self.html(selector ? jQuery("<div />").append(res.responseText.replace(rscript, "")).find(selector) : res.responseText)
                    }
                    if (callback) {
                        self.each(callback, [res.responseText, status, res])
                    }
                }
            });
            return this
        },
        serialize: function() {
            return jQuery.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                return this.elements ? jQuery.makeArray(this.elements) : this
            }).filter(function() {
                return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type))
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return val == null ? null: jQuery.isArray(val) ? jQuery.map(val,
                function(val, i) {
                    return {
                        name: elem.name,
                        value: val
                    }
                }) : {
                    name: elem.name,
                    value: val
                }
            }).get()
        }
    });
    jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),
    function(i, o) {
        jQuery.fn[o] = function(f) {
            return this.bind(o, f)
        }
    });
    jQuery.extend({
        get: function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = null
            }
            return jQuery.ajax({
                type: "GET",
                url: url,
                data: data,
                success: callback,
                dataType: type
            })
        },
        getScript: function(url, callback) {
            return jQuery.get(url, null, callback, "script")
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json")
        },
        post: function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = {}
            }
            return jQuery.ajax({
                type: "POST",
                url: url,
                data: data,
                success: callback,
                dataType: type
            })
        },
        ajaxSetup: function(settings) {
            jQuery.extend(jQuery.ajaxSettings, settings)
        },
        ajaxSettings: {
            url: location.href,
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded",
            processData: true,
            async: true,
            xhr: window.XMLHttpRequest && (window.location.protocol !== "file:" || !window.ActiveXObject) ?
            function() {
                return new window.XMLHttpRequest()
            }: function() {
                try {
                    return new window.ActiveXObject("Microsoft.XMLHTTP")
                } catch(e) {}
            },
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                script: "text/javascript, application/javascript",
                json: "application/json, text/javascript",
                text: "text/plain",
                _default: "*/*"
            }
        },
        lastModified: {},
        etag: {},
        ajax: function(origSettings) {
            var s = jQuery.extend(true, {},
            jQuery.ajaxSettings, origSettings);
            var jsonp,
            status,
            data,
            callbackContext = origSettings && origSettings.context || s,
            type = s.type.toUpperCase();
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional)
            }
            if (s.dataType === "jsonp") {
                if (type === "GET") {
                    if (!jsre.test(s.url)) {
                        s.url += (rquery.test(s.url) ? "&": "?") + (s.jsonp || "callback") + "=?"
                    }
                } else {
                    if (!s.data || !jsre.test(s.data)) {
                        s.data = (s.data ? s.data + "&": "") + (s.jsonp || "callback") + "=?"
                    }
                }
                s.dataType = "json"
            }
            if (s.dataType === "json" && (s.data && jsre.test(s.data) || jsre.test(s.url))) {
                jsonp = s.jsonpCallback || ("jsonp" + jsc++);
                if (s.data) {
                    s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1")
                }
                s.url = s.url.replace(jsre, "=" + jsonp + "$1");
                s.dataType = "script";
                window[jsonp] = window[jsonp] ||
                function(tmp) {
                    data = tmp;
                    success();
                    complete();
                    window[jsonp] = undefined;
                    try {
                        delete window[jsonp]
                    } catch(e) {}
                    if (head) {
                        head.removeChild(script)
                    }
                }
            }
            if (s.dataType === "script" && s.cache === null) {
                s.cache = false
            }
            if (s.cache === false && type === "GET") {
                var ts = now();
                var ret = s.url.replace(rts, "$1_=" + ts + "$2");
                s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&": "?") + "_=" + ts: "")
            }
            if (s.data && type === "GET") {
                s.url += (rquery.test(s.url) ? "&": "?") + s.data
            }
            if (s.global && !jQuery.active++) {
                jQuery.event.trigger("ajaxStart")
            }
            var parts = rurl.exec(s.url),
            remote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);
            if (s.dataType === "script" && type === "GET" && remote) {
                var head = document.getElementsByTagName("head")[0] || document.documentElement;
                var script = document.createElement("script");
                script.src = s.url;
                if (s.scriptCharset) {
                    script.charset = s.scriptCharset
                }
                if (!jsonp) {
                    var done = false;
                    script.onload = script.onreadystatechange = function() {
                        if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                            done = true;
                            success();
                            complete();
                            script.onload = script.onreadystatechange = null;
                            if (head && script.parentNode) {
                                head.removeChild(script)
                            }
                        }
                    }
                }
                head.insertBefore(script, head.firstChild);
                return undefined
            }
            var requestDone = false;
            var xhr = s.xhr();
            if (!xhr) {
                return
            }
            if (s.username) {
                xhr.open(type, s.url, s.async, s.username, s.password)
            } else {
                xhr.open(type, s.url, s.async)
            }
            try {
                if (s.data || origSettings && origSettings.contentType) {
                    xhr.setRequestHeader("Content-Type", s.contentType)
                }
                if (s.ifModified) {
                    if (jQuery.lastModified[s.url]) {
                        xhr.setRequestHeader("If-Modified-Since", jQuery.lastModified[s.url])
                    }
                    if (jQuery.etag[s.url]) {
                        xhr.setRequestHeader("If-None-Match", jQuery.etag[s.url])
                    }
                }
                if (!remote) {
                    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest")
                }
                xhr.setRequestHeader("Accept", s.dataType && s.accepts[s.dataType] ? s.accepts[s.dataType] + ", */*": s.accepts._default)
            } catch(e) {}
            if (s.beforeSend && s.beforeSend.call(callbackContext, xhr, s) === false) {
                if (s.global && !--jQuery.active) {
                    jQuery.event.trigger("ajaxStop")
                }
                xhr.abort();
                return false
            }
            if (s.global) {
                trigger("ajaxSend", [xhr, s])
            }
            var onreadystatechange = xhr.onreadystatechange = function(isTimeout) {
                if (!xhr || xhr.readyState === 0 || isTimeout === "abort") {
                    if (!requestDone) {
                        complete()
                    }
                    requestDone = true;
                    if (xhr) {
                        xhr.onreadystatechange = jQuery.noop
                    }
                } else {
                    if (!requestDone && xhr && (xhr.readyState === 4 || isTimeout === "timeout")) {
                        requestDone = true;
                        xhr.onreadystatechange = jQuery.noop;
                        status = isTimeout === "timeout" ? "timeout": !jQuery.httpSuccess(xhr) ? "error": s.ifModified && jQuery.httpNotModified(xhr, s.url) ? "notmodified": "success";
                        var errMsg;
                        if (status === "success") {
                            try {
                                data = jQuery.httpData(xhr, s.dataType, s)
                            } catch(err) {
                                status = "parsererror";
                                errMsg = err
                            }
                        }
                        if (status === "success" || status === "notmodified") {
                            if (!jsonp) {
                                success()
                            }
                        } else {
                            jQuery.handleError(s, xhr, status, errMsg)
                        }
                        complete();
                        if (isTimeout === "timeout") {
                            xhr.abort()
                        }
                        if (s.async) {
                            xhr = null
                        }
                    }
                }
            };
            try {
                var oldAbort = xhr.abort;
                xhr.abort = function() {
                    if (xhr) {
                        oldAbort.call(xhr)
                    }
                    onreadystatechange("abort")
                }
            } catch(e) {}
            if (s.async && s.timeout > 0) {
                setTimeout(function() {
                    if (xhr && !requestDone) {
                        onreadystatechange("timeout")
                    }
                },
                s.timeout)
            }
            try {
                xhr.send(type === "POST" || type === "PUT" || type === "DELETE" ? s.data: null)
            } catch(e) {
                jQuery.handleError(s, xhr, null, e);
                complete()
            }
            if (!s.async) {
                onreadystatechange()
            }
            function success() {
                if (s.success) {
                    s.success.call(callbackContext, data, status, xhr)
                }
                if (s.global) {
                    trigger("ajaxSuccess", [xhr, s])
                }
            }
            function complete() {
                if (s.complete) {
                    s.complete.call(callbackContext, xhr, status)
                }
                if (s.global) {
                    trigger("ajaxComplete", [xhr, s])
                }
                if (s.global && !--jQuery.active) {
                    jQuery.event.trigger("ajaxStop")
                }
            }
            function trigger(type, args) { (s.context ? jQuery(s.context) : jQuery.event).trigger(type, args)
            }
            return xhr
        },
        handleError: function(s, xhr, status, e) {
            if (s.error) {
                s.error.call(s.context || s, xhr, status, e)
            }
            if (s.global) { (s.context ? jQuery(s.context) : jQuery.event).trigger("ajaxError", [xhr, s, e])
            }
        },
        active: 0,
        httpSuccess: function(xhr) {
            try {
                return ! xhr.status && location.protocol === "file:" || (xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || xhr.status === 1223 || xhr.status === 0
            } catch(e) {}
            return false
        },
        httpNotModified: function(xhr, url) {
            var lastModified = xhr.getResponseHeader("Last-Modified"),
            etag = xhr.getResponseHeader("Etag");
            if (lastModified) {
                jQuery.lastModified[url] = lastModified
            }
            if (etag) {
                jQuery.etag[url] = etag
            }
            return xhr.status === 304 || xhr.status === 0
        },
        httpData: function(xhr, type, s) {
            var ct = xhr.getResponseHeader("content-type") || "",
            xml = type === "xml" || !type && ct.indexOf("xml") >= 0,
            data = xml ? xhr.responseXML: xhr.responseText;
            if (xml && data.documentElement.nodeName === "parsererror") {
                jQuery.error("parsererror")
            }
            if (s && s.dataFilter) {
                data = s.dataFilter(data, type)
            }
            if (typeof data === "string") {
                if (type === "json" || !type && ct.indexOf("json") >= 0) {
                    data = jQuery.parseJSON(data)
                } else {
                    if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                        jQuery.globalEval(data)
                    }
                }
            }
            return data
        },
        param: function(a, traditional) {
            var s = [];
            if (traditional === undefined) {
                traditional = jQuery.ajaxSettings.traditional
            }
            if (jQuery.isArray(a) || a.jquery) {
                jQuery.each(a,
                function() {
                    add(this.name, this.value)
                })
            } else {
                for (var prefix in a) {
                    buildParams(prefix, a[prefix])
                }
            }
            return s.join("&").replace(r20, "+");
            function buildParams(prefix, obj) {
                if (jQuery.isArray(obj)) {
                    jQuery.each(obj,
                    function(i, v) {
                        if (traditional || /\[\]$/.test(prefix)) {
                            add(prefix, v)
                        } else {
                            buildParams(prefix + "[" + (typeof v === "object" || jQuery.isArray(v) ? i: "") + "]", v)
                        }
                    })
                } else {
                    if (!traditional && obj != null && typeof obj === "object") {
                        jQuery.each(obj,
                        function(k, v) {
                            buildParams(prefix + "[" + k + "]", v)
                        })
                    } else {
                        add(prefix, obj)
                    }
                }
            }
            function add(key, value) {
                value = jQuery.isFunction(value) ? value() : value;
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
            }
        }
    });
    var elemdisplay = {},
    rfxtypes = /toggle|show|hide/,
    rfxnum = /^([+-]=)?([\d+-.]+)(.*)$/,
    timerId,
    fxAttrs = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]];
    jQuery.fn.extend({
        show: function(speed, callback) {
            if (speed || speed === 0) {
                return this.animate(genFx("show", 3), speed, callback)
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    var old = jQuery.data(this[i], "olddisplay");
                    this[i].style.display = old || "";
                    if (jQuery.css(this[i], "display") === "none") {
                        var nodeName = this[i].nodeName,
                        display;
                        if (elemdisplay[nodeName]) {
                            display = elemdisplay[nodeName]
                        } else {
                            var elem = jQuery("<" + nodeName + " />").appendTo("body");
                            display = elem.css("display");
                            if (display === "none") {
                                display = "block"
                            }
                            elem.remove();
                            elemdisplay[nodeName] = display
                        }
                        jQuery.data(this[i], "olddisplay", display)
                    }
                }
                for (var j = 0, k = this.length; j < k; j++) {
                    this[j].style.display = jQuery.data(this[j], "olddisplay") || ""
                }
                return this
            }
        },
        hide: function(speed, callback) {
            if (speed || speed === 0) {
                return this.animate(genFx("hide", 3), speed, callback)
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    var old = jQuery.data(this[i], "olddisplay");
                    if (!old && old !== "none") {
                        jQuery.data(this[i], "olddisplay", jQuery.css(this[i], "display"))
                    }
                }
                for (var j = 0, k = this.length; j < k; j++) {
                    this[j].style.display = "none"
                }
                return this
            }
        },
        _toggle: jQuery.fn.toggle,
        toggle: function(fn, fn2) {
            var bool = typeof fn === "boolean";
            if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
                this._toggle.apply(this, arguments)
            } else {
                if (fn == null || bool) {
                    this.each(function() {
                        var state = bool ? fn: jQuery(this).is(":hidden");
                        jQuery(this)[state ? "show": "hide"]()
                    })
                } else {
                    this.animate(genFx("toggle", 3), fn, fn2)
                }
            }
            return this
        },
        fadeTo: function(speed, to, callback) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({
                opacity: to
            },
            speed, callback)
        },
        animate: function(prop, speed, easing, callback) {
            var optall = jQuery.speed(speed, easing, callback);
            if (jQuery.isEmptyObject(prop)) {
                return this.each(optall.complete)
            }
            return this[optall.queue === false ? "each": "queue"](function() {
                var opt = jQuery.extend({},
                optall),
                p,
                hidden = this.nodeType === 1 && jQuery(this).is(":hidden"),
                self = this;
                for (p in prop) {
                    var name = p.replace(rdashAlpha, fcamelCase);
                    if (p !== name) {
                        prop[name] = prop[p];
                        delete prop[p];
                        p = name
                    }
                    if (prop[p] === "hide" && hidden || prop[p] === "show" && !hidden) {
                        return opt.complete.call(this)
                    }
                    if ((p === "height" || p === "width") && this.style) {
                        opt.display = jQuery.css(this, "display");
                        opt.overflow = this.style.overflow
                    }
                    if (jQuery.isArray(prop[p])) { (opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];
                        prop[p] = prop[p][0]
                    }
                }
                if (opt.overflow != null) {
                    this.style.overflow = "hidden"
                }
                opt.curAnim = jQuery.extend({},
                prop);
                jQuery.each(prop,
                function(name, val) {
                    var e = new jQuery.fx(self, opt, name);
                    if (rfxtypes.test(val)) {
                        e[val === "toggle" ? hidden ? "show": "hide": val](prop)
                    } else {
                        var parts = rfxnum.exec(val),
                        start = e.cur(true) || 0;
                        if (parts) {
                            var end = parseFloat(parts[2]),
                            unit = parts[3] || "px";
                            if (unit !== "px") {
                                self.style[name] = (end || 1) + unit;
                                start = ((end || 1) / e.cur(true)) * start;
                                self.style[name] = start + unit
                            }
                            if (parts[1]) {
                                end = ((parts[1] === "-=" ? -1: 1) * end) + start
                            }
                            e.custom(start, end, unit)
                        } else {
                            e.custom(start, val, "")
                        }
                    }
                });
                return true
            })
        },
        stop: function(clearQueue, gotoEnd) {
            var timers = jQuery.timers;
            if (clearQueue) {
                this.queue([])
            }
            this.each(function() {
                for (var i = timers.length - 1; i >= 0; i--) {
                    if (timers[i].elem === this) {
                        if (gotoEnd) {
                            timers[i](true)
                        }
                        timers.splice(i, 1)
                    }
                }
            });
            if (!gotoEnd) {
                this.dequeue()
            }
            return this
        }
    });
    jQuery.each({
        slideDown: genFx("show", 1),
        slideUp: genFx("hide", 1),
        slideToggle: genFx("toggle", 1),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        }
    },
    function(name, props) {
        jQuery.fn[name] = function(speed, callback) {
            return this.animate(props, speed, callback)
        }
    });
    jQuery.extend({
        speed: function(speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? speed: {
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                duration: speed,
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
            opt.duration = jQuery.fx.off ? 0: typeof opt.duration === "number" ? opt.duration: jQuery.fx.speeds[opt.duration] || jQuery.fx.speeds._default;
            opt.old = opt.complete;
            opt.complete = function() {
                if (opt.queue !== false) {
                    jQuery(this).dequeue()
                }
                if (jQuery.isFunction(opt.old)) {
                    opt.old.call(this)
                }
            };
            return opt
        },
        easing: {
            linear: function(p, n, firstNum, diff) {
                return firstNum + diff * p
            },
            swing: function(p, n, firstNum, diff) {
                return (( - Math.cos(p * Math.PI) / 2) + 0.5) * diff + firstNum
            }
        },
        timers: [],
        fx: function(elem, options, prop) {
            this.options = options;
            this.elem = elem;
            this.prop = prop;
            if (!options.orig) {
                options.orig = {}
            }
        }
    });
    jQuery.fx.prototype = {
        update: function() {
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this)
            } (jQuery.fx.step[this.prop] || jQuery.fx.step._default)(this);
            if ((this.prop === "height" || this.prop === "width") && this.elem.style) {
                this.elem.style.display = "block"
            }
        },
        cur: function(force) {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                return this.elem[this.prop]
            }
            var r = parseFloat(jQuery.css(this.elem, this.prop, force));
            return r && r > -10000 ? r: parseFloat(jQuery.curCSS(this.elem, this.prop)) || 0
        },
        custom: function(from, to, unit) {
            this.startTime = now();
            this.start = from;
            this.end = to;
            this.unit = unit || this.unit || "px";
            this.now = this.start;
            this.pos = this.state = 0;
            var self = this;
            function t(gotoEnd) {
                return self.step(gotoEnd)
            }
            t.elem = this.elem;
            if (t() && jQuery.timers.push(t) && !timerId) {
                timerId = setInterval(jQuery.fx.tick, 13)
            }
        },
        show: function() {
            this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
            this.options.show = true;
            this.custom(this.prop === "width" || this.prop === "height" ? 1: 0, this.cur());
            jQuery(this.elem).show()
        },
        hide: function() {
            this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0)
        },
        step: function(gotoEnd) {
            var t = now(),
            done = true;
            if (gotoEnd || t >= this.options.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                this.options.curAnim[this.prop] = true;
                for (var i in this.options.curAnim) {
                    if (this.options.curAnim[i] !== true) {
                        done = false
                    }
                }
                if (done) {
                    if (this.options.display != null) {
                        this.elem.style.overflow = this.options.overflow;
                        var old = jQuery.data(this.elem, "olddisplay");
                        this.elem.style.display = old ? old: this.options.display;
                        if (jQuery.css(this.elem, "display") === "none") {
                            this.elem.style.display = "block"
                        }
                    }
                    if (this.options.hide) {
                        jQuery(this.elem).hide()
                    }
                    if (this.options.hide || this.options.show) {
                        for (var p in this.options.curAnim) {
                            jQuery.style(this.elem, p, this.options.orig[p])
                        }
                    }
                    this.options.complete.call(this.elem)
                }
                return false
            } else {
                var n = t - this.startTime;
                this.state = n / this.options.duration;
                var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];
                var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing": "linear");
                this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);
                this.now = this.start + ((this.end - this.start) * this.pos);
                this.update()
            }
            return true
        }
    };
    jQuery.extend(jQuery.fx, {
        tick: function() {
            var timers = jQuery.timers;
            for (var i = 0; i < timers.length; i++) {
                if (!timers[i]()) {
                    timers.splice(i--, 1)
                }
            }
            if (!timers.length) {
                jQuery.fx.stop()
            }
        },
        stop: function() {
            clearInterval(timerId);
            timerId = null
        },
        speeds: {
            slow: 600,
            fast: 200,
            _default: 400
        },
        step: {
            opacity: function(fx) {
                jQuery.style(fx.elem, "opacity", fx.now)
            },
            _default: function(fx) {
                if (fx.elem.style && fx.elem.style[fx.prop] != null) {
                    fx.elem.style[fx.prop] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit
                } else {
                    fx.elem[fx.prop] = fx.now
                }
            }
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function(elem) {
            return jQuery.grep(jQuery.timers,
            function(fn) {
                return elem === fn.elem
            }).length
        }
    }
    function genFx(type, num) {
        var obj = {};
        jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)),
        function() {
            obj[this] = type
        });
        return obj
    }
    if ("getBoundingClientRect" in document.documentElement) {
        jQuery.fn.offset = function(options) {
            var elem = this[0];
            if (options) {
                return this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i)
                })
            }
            if (!elem || !elem.ownerDocument) {
                return null
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem)
            }
            var box = elem.getBoundingClientRect(),
            doc = elem.ownerDocument,
            body = doc.body,
            docElem = doc.documentElement,
            clientTop = docElem.clientTop || body.clientTop || 0,
            clientLeft = docElem.clientLeft || body.clientLeft || 0,
            top = box.top + (self.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop) - clientTop,
            left = box.left + (self.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft) - clientLeft;
            return {
                top: top,
                left: left
            }
        }
    } else {
        jQuery.fn.offset = function(options) {
            var elem = this[0];
            if (options) {
                return this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i)
                })
            }
            if (!elem || !elem.ownerDocument) {
                return null
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem)
            }
            jQuery.offset.initialize();
            var offsetParent = elem.offsetParent,
            prevOffsetParent = elem,
            doc = elem.ownerDocument,
            computedStyle,
            docElem = doc.documentElement,
            body = doc.body,
            defaultView = doc.defaultView,
            prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle,
            top = elem.offsetTop,
            left = elem.offsetLeft;
            while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
                if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                    break
                }
                computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
                top -= elem.scrollTop;
                left -= elem.scrollLeft;
                if (elem === offsetParent) {
                    top += elem.offsetTop;
                    left += elem.offsetLeft;
                    if (jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && /^t(able|d|h)$/i.test(elem.nodeName))) {
                        top += parseFloat(computedStyle.borderTopWidth) || 0;
                        left += parseFloat(computedStyle.borderLeftWidth) || 0
                    }
                    prevOffsetParent = offsetParent,
                    offsetParent = elem.offsetParent
                }
                if (jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
                    top += parseFloat(computedStyle.borderTopWidth) || 0;
                    left += parseFloat(computedStyle.borderLeftWidth) || 0
                }
                prevComputedStyle = computedStyle
            }
            if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
                top += body.offsetTop;
                left += body.offsetLeft
            }
            if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                top += Math.max(docElem.scrollTop, body.scrollTop);
                left += Math.max(docElem.scrollLeft, body.scrollLeft)
            }
            return {
                top: top,
                left: left
            }
        }
    }
    jQuery.offset = {
        initialize: function() {
            var body = document.body,
            container = document.createElement("div"),
            innerDiv,
            checkDiv,
            table,
            td,
            bodyMarginTop = parseFloat(jQuery.curCSS(body, "marginTop", true)) || 0,
            html = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
            jQuery.extend(container.style, {
                position: "absolute",
                top: 0,
                left: 0,
                margin: 0,
                border: 0,
                width: "1px",
                height: "1px",
                visibility: "hidden"
            });
            container.innerHTML = html;
            body.insertBefore(container, body.firstChild);
            innerDiv = container.firstChild;
            checkDiv = innerDiv.firstChild;
            td = innerDiv.nextSibling.firstChild.firstChild;
            this.doesNotAddBorder = (checkDiv.offsetTop !== 5);
            this.doesAddBorderForTableAndCells = (td.offsetTop === 5);
            checkDiv.style.position = "fixed",
            checkDiv.style.top = "20px";
            this.supportsFixedPosition = (checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15);
            checkDiv.style.position = checkDiv.style.top = "";
            innerDiv.style.overflow = "hidden",
            innerDiv.style.position = "relative";
            this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);
            this.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== bodyMarginTop);
            body.removeChild(container);
            body = container = innerDiv = checkDiv = table = td = null;
            jQuery.offset.initialize = jQuery.noop
        },
        bodyOffset: function(body) {
            var top = body.offsetTop,
            left = body.offsetLeft;
            jQuery.offset.initialize();
            if (jQuery.offset.doesNotIncludeMarginInBodyOffset) {
                top += parseFloat(jQuery.curCSS(body, "marginTop", true)) || 0;
                left += parseFloat(jQuery.curCSS(body, "marginLeft", true)) || 0
            }
            return {
                top: top,
                left: left
            }
        },
        setOffset: function(elem, options, i) {
            if (/static/.test(jQuery.curCSS(elem, "position"))) {
                elem.style.position = "relative"
            }
            var curElem = jQuery(elem),
            curOffset = curElem.offset(),
            curTop = parseInt(jQuery.curCSS(elem, "top", true), 10) || 0,
            curLeft = parseInt(jQuery.curCSS(elem, "left", true), 10) || 0;
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset)
            }
            var props = {
                top: (options.top - curOffset.top) + curTop,
                left: (options.left - curOffset.left) + curLeft
            };
            if ("using" in options) {
                options.using.call(elem, props)
            } else {
                curElem.css(props)
            }
        }
    };
    jQuery.fn.extend({
        position: function() {
            if (!this[0]) {
                return null
            }
            var elem = this[0],
            offsetParent = this.offsetParent(),
            offset = this.offset(),
            parentOffset = /^body|html$/i.test(offsetParent[0].nodeName) ? {
                top: 0,
                left: 0
            }: offsetParent.offset();
            offset.top -= parseFloat(jQuery.curCSS(elem, "marginTop", true)) || 0;
            offset.left -= parseFloat(jQuery.curCSS(elem, "marginLeft", true)) || 0;
            parentOffset.top += parseFloat(jQuery.curCSS(offsetParent[0], "borderTopWidth", true)) || 0;
            parentOffset.left += parseFloat(jQuery.curCSS(offsetParent[0], "borderLeftWidth", true)) || 0;
            return {
                top: offset.top - parentOffset.top,
                left: offset.left - parentOffset.left
            }
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || document.body;
                while (offsetParent && (!/^body|html$/i.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent
                }
                return offsetParent
            })
        }
    });
    jQuery.each(["Left", "Top"],
    function(i, name) {
        var method = "scroll" + name;
        jQuery.fn[method] = function(val) {
            var elem = this[0],
            win;
            if (!elem) {
                return null
            }
            if (val !== undefined) {
                return this.each(function() {
                    win = getWindow(this);
                    if (win) {
                        win.scrollTo(!i ? val: jQuery(win).scrollLeft(), i ? val: jQuery(win).scrollTop())
                    } else {
                        this[method] = val
                    }
                })
            } else {
                win = getWindow(elem);
                return win ? ("pageXOffset" in win) ? win[i ? "pageYOffset": "pageXOffset"] : jQuery.support.boxModel && win.document.documentElement[method] || win.document.body[method] : elem[method]
            }
        }
    });
    function getWindow(elem) {
        return ("scrollTo" in elem && elem.document) ? elem: elem.nodeType === 9 ? elem.defaultView || elem.parentWindow: false
    }
    jQuery.each(["Height", "Width"],
    function(i, name) {
        var type = name.toLowerCase();
        jQuery.fn["inner" + name] = function() {
            return this[0] ? jQuery.css(this[0], type, false, "padding") : null
        };
        jQuery.fn["outer" + name] = function(margin) {
            return this[0] ? jQuery.css(this[0], type, false, margin ? "margin": "border") : null
        };
        jQuery.fn[type] = function(size) {
            var elem = this[0];
            if (!elem) {
                return size == null ? null: this
            }
            if (jQuery.isFunction(size)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self[type](size.call(this, i, self[type]()))
                })
            }
            return ("scrollTo" in elem && elem.document) ? elem.document.compatMode === "CSS1Compat" && elem.document.documentElement["client" + name] || elem.document.body["client" + name] : (elem.nodeType === 9) ? Math.max(elem.documentElement["client" + name], elem.body["scroll" + name], elem.documentElement["scroll" + name], elem.body["offset" + name], elem.documentElement["offset" + name]) : size === undefined ? jQuery.css(elem, type) : this.css(type, typeof size === "string" ? size: size + "px")
        }
    });
    window.jQuery = window.$ = jQuery
})(window);
/*
 * jQuery UI 1.8.4
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
 (function(A, C) {
    A.ui = A.ui || {};
    if (A.ui.version) {
        return
    }
    A.extend(A.ui, {
        version: "1.8.4",
        plugin: {
            add: function(E, F, H) {
                var G = A.ui[E].prototype;
                for (var D in H) {
                    G.plugins[D] = G.plugins[D] || [];
                    G.plugins[D].push([F, H[D]])
                }
            },
            call: function(D, F, E) {
                var H = D.plugins[F];
                if (!H || !D.element[0].parentNode) {
                    return
                }
                for (var G = 0; G < H.length; G++) {
                    if (D.options[H[G][0]]) {
                        H[G][1].apply(D.element, E)
                    }
                }
            }
        },
        contains: function(E, D) {
            return document.compareDocumentPosition ? E.compareDocumentPosition(D) & 16: E !== D && E.contains(D)
        },
        hasScroll: function(G, E) {
            if (A(G).css("overflow") === "hidden") {
                return false
            }
            var D = (E && E === "left") ? "scrollLeft": "scrollTop",
            F = false;
            if (G[D] > 0) {
                return true
            }
            G[D] = 1;
            F = (G[D] > 0);
            G[D] = 0;
            return F
        },
        isOverAxis: function(E, D, F) {
            return (E > D) && (E < (D + F))
        },
        isOver: function(I, E, H, G, D, F) {
            return A.ui.isOverAxis(I, H, D) && A.ui.isOverAxis(E, G, F)
        },
        keyCode: {
            ALT: 18,
            BACKSPACE: 8,
            CAPS_LOCK: 20,
            COMMA: 188,
            COMMAND: 91,
            COMMAND_LEFT: 91,
            COMMAND_RIGHT: 93,
            CONTROL: 17,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            INSERT: 45,
            LEFT: 37,
            MENU: 93,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SHIFT: 16,
            SPACE: 32,
            TAB: 9,
            UP: 38,
            WINDOWS: 91
        }
    });
    A.fn.extend({
        _focus: A.fn.focus,
        focus: function(D, E) {
            return typeof D === "number" ? this.each(function() {
                var F = this;
                setTimeout(function() {
                    A(F).focus();
                    if (E) {
                        E.call(F)
                    }
                },
                D)
            }) : this._focus.apply(this, arguments)
        },
        enableSelection: function() {
            return this.attr("unselectable", "off").css("MozUserSelect", "")
        },
        disableSelection: function() {
            return this.attr("unselectable", "on").css("MozUserSelect", "none")
        },
        scrollParent: function() {
            var D;
            if ((A.browser.msie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
                D = this.parents().filter(function() {
                    return (/(relative|absolute|fixed)/).test(A.curCSS(this, "position", 1)) && (/(auto|scroll)/).test(A.curCSS(this, "overflow", 1) + A.curCSS(this, "overflow-y", 1) + A.curCSS(this, "overflow-x", 1))
                }).eq(0)
            } else {
                D = this.parents().filter(function() {
                    return (/(auto|scroll)/).test(A.curCSS(this, "overflow", 1) + A.curCSS(this, "overflow-y", 1) + A.curCSS(this, "overflow-x", 1))
                }).eq(0)
            }
            return (/fixed/).test(this.css("position")) || !D.length ? A(document) : D
        },
        zIndex: function(G) {
            if (G !== C) {
                return this.css("zIndex", G)
            }
            if (this.length) {
                var E = A(this[0]),
                D,
                F;
                while (E.length && E[0] !== document) {
                    D = E.css("position");
                    if (D === "absolute" || D === "relative" || D === "fixed") {
                        F = parseInt(E.css("zIndex"));
                        if (!isNaN(F) && F != 0) {
                            return F
                        }
                    }
                    E = E.parent()
                }
            }
            return 0
        }
    });
    A.each(["Width", "Height"],
    function(F, D) {
        var E = D === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
        G = D.toLowerCase(),
        I = {
            innerWidth: A.fn.innerWidth,
            innerHeight: A.fn.innerHeight,
            outerWidth: A.fn.outerWidth,
            outerHeight: A.fn.outerHeight
        };
        function H(L, K, J, M) {
            A.each(E,
            function() {
                K -= parseFloat(A.curCSS(L, "padding" + this, true)) || 0;
                if (J) {
                    K -= parseFloat(A.curCSS(L, "border" + this + "Width", true)) || 0
                }
                if (M) {
                    K -= parseFloat(A.curCSS(L, "margin" + this, true)) || 0
                }
            });
            return K
        }
        A.fn["inner" + D] = function(J) {
            if (J === C) {
                return I["inner" + D].call(this)
            }
            return this.each(function() {
                A.style(this, G, H(this, J) + "px")
            })
        };
        A.fn["outer" + D] = function(J, K) {
            if (typeof J !== "number") {
                return I["outer" + D].call(this, J)
            }
            return this.each(function() {
                A.style(this, G, H(this, J, true, K) + "px")
            })
        }
    });
    function B(D) {
        return ! A(D).parents().andSelf().filter(function() {
            return A.curCSS(this, "visibility") === "hidden" || A.expr.filters.hidden(this)
        }).length
    }
    A.extend(A.expr[":"], {
        data: function(F, E, D) {
            return !! A.data(F, D[3])
        },
        focusable: function(F) {
            var I = F.nodeName.toLowerCase(),
            D = A.attr(F, "tabindex");
            if ("area" === I) {
                var H = F.parentNode,
                G = H.name,
                E;
                if (!F.href || !G || H.nodeName.toLowerCase() !== "map") {
                    return false
                }
                E = A("img[usemap=#" + G + "]")[0];
                return !! E && B(E)
            }
            return (/input|select|textarea|button|object/.test(I) ? !F.disabled: "a" == I ? F.href || !isNaN(D) : !isNaN(D)) && B(F)
        },
        tabbable: function(E) {
            var D = A.attr(E, "tabindex");
            return (isNaN(D) || D >= 0) && A(E).is(":focusable")
        }
    })
})(jQuery);
/*
 * jQuery UI Widget 1.8.4
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
 (function(B, C) {
    var A = B.fn.remove;
    B.fn.remove = function(D, E) {
        return this.each(function() {
            if (!E) {
                if (!D || B.filter(D, [this]).length) {
                    B("*", this).add([this]).each(function() {
                        B(this).triggerHandler("remove")
                    })
                }
            }
            return A.call(B(this), D, E)
        })
    };
    B.widget = function(E, G, D) {
        var F = E.split(".")[0],
        I;
        E = E.split(".")[1];
        I = F + "-" + E;
        if (!D) {
            D = G;
            G = B.Widget
        }
        B.expr[":"][I] = function(J) {
            return !! B.data(J, E)
        };
        B[F] = B[F] || {};
        B[F][E] = function(J, K) {
            if (arguments.length) {
                this._createWidget(J, K)
            }
        };
        var H = new G();
        H.options = B.extend(true, {},
        H.options);
        B[F][E].prototype = B.extend(true, H, {
            namespace: F,
            widgetName: E,
            widgetEventPrefix: B[F][E].prototype.widgetEventPrefix || E,
            widgetBaseClass: I
        },
        D);
        B.widget.bridge(E, B[F][E])
    };
    B.widget.bridge = function(E, D) {
        B.fn[E] = function(H) {
            var F = typeof H === "string",
            G = Array.prototype.slice.call(arguments, 1),
            I = this;
            H = !F && G.length ? B.extend.apply(null, [true, H].concat(G)) : H;
            if (F && H.substring(0, 1) === "_") {
                return I
            }
            if (F) {
                this.each(function() {
                    var J = B.data(this, E),
                    K = J && B.isFunction(J[H]) ? J[H].apply(J, G) : J;
                    if (K !== J && K !== C) {
                        I = K;
                        return false
                    }
                })
            } else {
                this.each(function() {
                    var J = B.data(this, E);
                    if (J) {
                        if (H) {
                            J.option(H)
                        }
                        J._init()
                    } else {
                        B.data(this, E, new D(H, this))
                    }
                })
            }
            return I
        }
    };
    B.Widget = function(D, E) {
        if (arguments.length) {
            this._createWidget(D, E)
        }
    };
    B.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {
            disabled: false
        },
        _createWidget: function(E, F) {
            B.data(F, this.widgetName, this);
            this.element = B(F);
            this.options = B.extend(true, {},
            this.options, B.metadata && B.metadata.get(F)[this.widgetName], E);
            var D = this;
            this.element.bind("remove." + this.widgetName,
            function() {
                D.destroy()
            });
            this._create();
            this._init()
        },
        _create: function() {},
        _init: function() {},
        destroy: function() {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName);
            this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled ui-state-disabled")
        },
        widget: function() {
            return this.element
        },
        option: function(F, G) {
            var E = F,
            D = this;
            if (arguments.length === 0) {
                return B.extend({},
                D.options)
            }
            if (typeof F === "string") {
                if (G === C) {
                    return this.options[F]
                }
                E = {};
                E[F] = G
            }
            B.each(E,
            function(H, I) {
                D._setOption(H, I)
            });
            return D
        },
        _setOption: function(D, E) {
            this.options[D] = E;
            if (D === "disabled") {
                this.widget()[E ? "addClass": "removeClass"](this.widgetBaseClass + "-disabled ui-state-disabled").attr("aria-disabled", E)
            }
            return this
        },
        enable: function() {
            return this._setOption("disabled", false)
        },
        disable: function() {
            return this._setOption("disabled", true)
        },
        _trigger: function(E, F, G) {
            var I = this.options[E];
            F = B.Event(F);
            F.type = (E === this.widgetEventPrefix ? E: this.widgetEventPrefix + E).toLowerCase();
            G = G || {};
            if (F.originalEvent) {
                for (var D = B.event.props.length, H; D;) {
                    H = B.event.props[--D];
                    F[H] = F.originalEvent[H]
                }
            }
            this.element.trigger(F, G);
            return ! (B.isFunction(I) && I.call(this.element[0], F, G) === false || F.isDefaultPrevented())
        }
    }
})(jQuery);
/*
 * jQuery UI Mouse 1.8.4
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
 (function(A, B) {
    A.widget("ui.mouse", {
        options: {
            cancel: ":input,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var C = this;
            this.element.bind("mousedown." + this.widgetName,
            function(D) {
                return C._mouseDown(D)
            }).bind("click." + this.widgetName,
            function(D) {
                if (C._preventClickEvent) {
                    C._preventClickEvent = false;
                    D.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        },
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName)
        },
        _mouseDown: function(E) {
            E.originalEvent = E.originalEvent || {};
            if (E.originalEvent.mouseHandled) {
                return
            } (this._mouseStarted && this._mouseUp(E));
            this._mouseDownEvent = E;
            var D = this,
            F = (E.which == 1),
            C = (typeof this.options.cancel == "string" ? A(E.target).parents().add(E.target).filter(this.options.cancel).length: false);
            if (!F || C || !this._mouseCapture(E)) {
                return true
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    D.mouseDelayMet = true
                },
                this.options.delay)
            }
            if (this._mouseDistanceMet(E) && this._mouseDelayMet(E)) {
                this._mouseStarted = (this._mouseStart(E) !== false);
                if (!this._mouseStarted) {
                    E.preventDefault();
                    return true
                }
            }
            this._mouseMoveDelegate = function(G) {
                return D._mouseMove(G)
            };
            this._mouseUpDelegate = function(G) {
                return D._mouseUp(G)
            };
            A(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate); (A.browser.safari || E.preventDefault());
            E.originalEvent.mouseHandled = true;
            return true
        },
        _mouseMove: function(C) {
            if (A.browser.msie && !C.button) {
                return this._mouseUp(C)
            }
            if (this._mouseStarted) {
                this._mouseDrag(C);
                return C.preventDefault()
            }
            if (this._mouseDistanceMet(C) && this._mouseDelayMet(C)) {
                this._mouseStarted = (this._mouseStart(this._mouseDownEvent, C) !== false); (this._mouseStarted ? this._mouseDrag(C) : this._mouseUp(C))
            }
            return ! this._mouseStarted
        },
        _mouseUp: function(C) {
            A(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                this._preventClickEvent = (C.target == this._mouseDownEvent.target);
                this._mouseStop(C)
            }
            return false
        },
        _mouseDistanceMet: function(C) {
            return (Math.max(Math.abs(this._mouseDownEvent.pageX - C.pageX), Math.abs(this._mouseDownEvent.pageY - C.pageY)) >= this.options.distance)
        },
        _mouseDelayMet: function(C) {
            return this.mouseDelayMet
        },
        _mouseStart: function(C) {},
        _mouseDrag: function(C) {},
        _mouseStop: function(C) {},
        _mouseCapture: function(C) {
            return true
        }
    })
})(jQuery); (function(A, B) {
    A.widget("ui.draggable", A.ui.mouse, {
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false
        },
        _create: function() {
            if (this.options.helper == "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
                this.element[0].style.position = "relative"
            } (this.options.addClasses && this.element.addClass("ui-draggable")); (this.options.disabled && this.element.addClass("ui-draggable-disabled"));
            this._mouseInit()
        },
        destroy: function() {
            if (!this.element.data("draggable")) {
                return
            }
            this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
            this._mouseDestroy();
            return this
        },
        _mouseCapture: function(C) {
            var D = this.options;
            if (this.helper || D.disabled || A(C.target).is(".ui-resizable-handle")) {
                return false
            }
            this.handle = this._getHandle(C);
            if (!this.handle) {
                return false
            }
            return true
        },
        _mouseStart: function(C) {
            var D = this.options;
            this.helper = this._createHelper(C);
            this._cacheHelperProportions();
            if (A.ui.ddmanager) {
                A.ui.ddmanager.current = this
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            A.extend(this.offset, {
                click: {
                    left: C.pageX - this.offset.left,
                    top: C.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this.position = this._generatePosition(C);
            this.originalPageX = C.pageX;
            this.originalPageY = C.pageY; (D.cursorAt && this._adjustOffsetFromHelper(D.cursorAt));
            if (D.containment) {
                this._setContainment()
            }
            if (this._trigger("start", C) === false) {
                this._clear();
                return false
            }
            this._cacheHelperProportions();
            if (A.ui.ddmanager && !D.dropBehaviour) {
                A.ui.ddmanager.prepareOffsets(this, C)
            }
            this.helper.addClass("ui-draggable-dragging");
            this._mouseDrag(C, true);
            return true
        },
        _mouseDrag: function(C, E) {
            this.position = this._generatePosition(C);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!E) {
                var D = this._uiHash();
                if (this._trigger("drag", C, D) === false) {
                    this._mouseUp({});
                    return false
                }
                this.position = D.position
            }
            if (!this.options.axis || this.options.axis != "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis != "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            if (A.ui.ddmanager) {
                A.ui.ddmanager.drag(this, C)
            }
            return false
        },
        _mouseStop: function(D) {
            var E = false;
            if (A.ui.ddmanager && !this.options.dropBehaviour) {
                E = A.ui.ddmanager.drop(this, D)
            }
            if (this.dropped) {
                E = this.dropped;
                this.dropped = false
            }
            if (!this.element[0] || !this.element[0].parentNode) {
                return false
            }
            if ((this.options.revert == "invalid" && !E) || (this.options.revert == "valid" && E) || this.options.revert === true || (A.isFunction(this.options.revert) && this.options.revert.call(this.element, E))) {
                var C = this;
                A(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10),
                function() {
                    if (C._trigger("stop", D) !== false) {
                        C._clear()
                    }
                })
            } else {
                if (this._trigger("stop", D) !== false) {
                    this._clear()
                }
            }
            return false
        },
        cancel: function() {
            if (this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp({})
            } else {
                this._clear()
            }
            return this
        },
        _getHandle: function(C) {
            var D = !this.options.handle || !A(this.options.handle, this.element).length ? true: false;
            A(this.options.handle, this.element).find("*").andSelf().each(function() {
                if (this == C.target) {
                    D = true
                }
            });
            return D
        },
        _createHelper: function(D) {
            var E = this.options;
            var C = A.isFunction(E.helper) ? A(E.helper.apply(this.element[0], [D])) : (E.helper == "clone" ? this.element.clone() : this.element);
            if (!C.parents("body").length) {
                C.appendTo((E.appendTo == "parent" ? this.element[0].parentNode: E.appendTo))
            }
            if (C[0] != this.element[0] && !(/(fixed|absolute)/).test(C.css("position"))) {
                C.css("position", "absolute")
            }
            return C
        },
        _adjustOffsetFromHelper: function(C) {
            if (typeof C == "string") {
                C = C.split(" ")
            }
            if (A.isArray(C)) {
                C = {
                    left: +C[0],
                    top: +C[1] || 0
                }
            }
            if ("left" in C) {
                this.offset.click.left = C.left + this.margins.left
            }
            if ("right" in C) {
                this.offset.click.left = this.helperProportions.width - C.right + this.margins.left
            }
            if ("top" in C) {
                this.offset.click.top = C.top + this.margins.top
            }
            if ("bottom" in C) {
                this.offset.click.top = this.helperProportions.height - C.bottom + this.margins.top
            }
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var C = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && A.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                C.left += this.scrollParent.scrollLeft();
                C.top += this.scrollParent.scrollTop()
            }
            if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && A.browser.msie)) {
                C = {
                    top: 0,
                    left: 0
                }
            }
            return {
                top: C.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: C.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var C = this.element.position();
                return {
                    top: C.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: C.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else {
                return {
                    top: 0,
                    left: 0
                }
            }
        },
        _cacheMargins: function() {
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0)
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var F = this.options;
            if (F.containment == "parent") {
                F.containment = this.helper[0].parentNode
            }
            if (F.containment == "document" || F.containment == "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, A(F.containment == "document" ? document: window).width() - this.helperProportions.width - this.margins.left, (A(F.containment == "document" ? document: window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (! (/^(document|window|parent)$/).test(F.containment) && F.containment.constructor != Array) {
                var D = A(F.containment)[0];
                if (!D) {
                    return
                }
                var E = A(F.containment).offset();
                var C = (A(D).css("overflow") != "hidden");
                this.containment = [E.left + (parseInt(A(D).css("borderLeftWidth"), 10) || 0) + (parseInt(A(D).css("paddingLeft"), 10) || 0) - this.margins.left, E.top + (parseInt(A(D).css("borderTopWidth"), 10) || 0) + (parseInt(A(D).css("paddingTop"), 10) || 0) - this.margins.top, E.left + (C ? Math.max(D.scrollWidth, D.offsetWidth) : D.offsetWidth) - (parseInt(A(D).css("borderLeftWidth"), 10) || 0) - (parseInt(A(D).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, E.top + (C ? Math.max(D.scrollHeight, D.offsetHeight) : D.offsetHeight) - (parseInt(A(D).css("borderTopWidth"), 10) || 0) - (parseInt(A(D).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            } else {
                if (F.containment.constructor == Array) {
                    this.containment = F.containment
                }
            }
        },
        _convertPositionTo: function(F, H) {
            if (!H) {
                H = this.position
            }
            var D = F == "absolute" ? 1: -1;
            var E = this.options,
            C = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && A.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent: this.scrollParent,
            G = (/(html|body)/i).test(C[0].tagName);
            return {
                top: (H.top + this.offset.relative.top * D + this.offset.parent.top * D - (A.browser.safari && A.browser.version < 526 && this.cssPosition == "fixed" ? 0: (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (G ? 0: C.scrollTop())) * D)),
                left: (H.left + this.offset.relative.left * D + this.offset.parent.left * D - (A.browser.safari && A.browser.version < 526 && this.cssPosition == "fixed" ? 0: (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : G ? 0: C.scrollLeft()) * D))
            }
        },
        _generatePosition: function(F) {
            var I = this.options,
            C = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && A.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent: this.scrollParent,
            J = (/(html|body)/i).test(C[0].tagName);
            var E = F.pageX;
            var D = F.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (F.pageX - this.offset.click.left < this.containment[0]) {
                        E = this.containment[0] + this.offset.click.left
                    }
                    if (F.pageY - this.offset.click.top < this.containment[1]) {
                        D = this.containment[1] + this.offset.click.top
                    }
                    if (F.pageX - this.offset.click.left > this.containment[2]) {
                        E = this.containment[2] + this.offset.click.left
                    }
                    if (F.pageY - this.offset.click.top > this.containment[3]) {
                        D = this.containment[3] + this.offset.click.top
                    }
                }
                if (I.grid) {
                    var H = this.originalPageY + Math.round((D - this.originalPageY) / I.grid[1]) * I.grid[1];
                    D = this.containment ? (!(H - this.offset.click.top < this.containment[1] || H - this.offset.click.top > this.containment[3]) ? H: (!(H - this.offset.click.top < this.containment[1]) ? H - I.grid[1] : H + I.grid[1])) : H;
                    var G = this.originalPageX + Math.round((E - this.originalPageX) / I.grid[0]) * I.grid[0];
                    E = this.containment ? (!(G - this.offset.click.left < this.containment[0] || G - this.offset.click.left > this.containment[2]) ? G: (!(G - this.offset.click.left < this.containment[0]) ? G - I.grid[0] : G + I.grid[0])) : G
                }
            }
            return {
                top: (D - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (A.browser.safari && A.browser.version < 526 && this.cssPosition == "fixed" ? 0: (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (J ? 0: C.scrollTop())))),
                left: (E - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (A.browser.safari && A.browser.version < 526 && this.cssPosition == "fixed" ? 0: (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : J ? 0: C.scrollLeft())))
            }
        },
        _clear: function() {
            this.helper.removeClass("ui-draggable-dragging");
            if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval) {
                this.helper.remove()
            }
            this.helper = null;
            this.cancelHelperRemoval = false
        },
        _trigger: function(C, D, E) {
            E = E || this._uiHash();
            A.ui.plugin.call(this, C, [D, E]);
            if (C == "drag") {
                this.positionAbs = this._convertPositionTo("absolute")
            }
            return A.Widget.prototype._trigger.call(this, C, D, E)
        },
        plugins: {},
        _uiHash: function(C) {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    });
    A.extend(A.ui.draggable, {
        version: "1.8.4"
    })
})(jQuery);
/*
 * Modernizr JavaScript library 1.5
 * http://www.modernizr.com/
 *
 * Copyright (c) 2009-2010 Faruk Ates - http://farukat.es/
 * Dual-licensed under the BSD and MIT licenses.
 * http://www.modernizr.com/license/
 *
 * Featuring major contributions by
 * Paul Irish  - http://paulirish.com
 */
window.Modernizr = (function(AA, N, X) {
    var AM = "1.5",
    u = {},
    AG = true,
    AR = N.documentElement,
    H = "modernizr",
    AH = N.createElement(H),
    L = AH.style,
    AO = N.createElement("input"),
    Q = "canvas",
    AN = "canvastext",
    AJ = "rgba",
    J = "hsla",
    AB = "multiplebgs",
    E = "backgroundsize",
    i = "borderimage",
    p = "borderradius",
    e = "boxshadow",
    AL = "opacity",
    n = "cssanimations",
    AE = "csscolumns",
    C = "cssgradients",
    S = "cssreflections",
    K = "csstransforms",
    g = "csstransforms3d",
    AP = "csstransitions",
    v = "geolocation",
    I = "video",
    l = "audio",
    F = "input",
    c = F + "types",
    G = "svg",
    R = "smil",
    P = G + "clippaths",
    z = "background",
    B = z + "Color",
    r = "canPlayType",
    x = "localStorage",
    W = "sessionStorage",
    A = "applicationCache",
    o = "webworkers",
    U = "hashchange",
    y = "crosswindowmessaging",
    M = "historymanagement",
    AF = "draganddrop",
    AK = "websqldatabase",
    AI = "indexedDB",
    D = "websockets",
    AD = ":)",
    t = Object.prototype.toString,
    Z = " -o- -moz- -ms- -webkit- -khtml- ".split(" "),
    a = {},
    k = {},
    V = {},
    O = [],
    d = (function() {
        var AS = {
            select: "input",
            change: "input",
            submit: "form",
            reset: "form",
            error: "img",
            load: "img",
            abort: "img"
        },
        f = {};
        function m(AT, AW) {
            var AV = (arguments.length == 1);
            if (AV && f[AT]) {
                return f[AT]
            }
            AW = AW || document.createElement(AS[AT] || "div");
            AT = "on" + AT;
            var AU = (AT in AW);
            if (!AU && AW.setAttribute) {
                AW.setAttribute(AT, "return;");
                AU = typeof AW[AT] == "function"
            }
            AW = null;
            return AV ? (f[AT] = AU) : AU
        }
        return m
    })();
    var Y = ({}).hasOwnProperty,
    T;
    if (typeof Y !== "undefined" && typeof Y.call !== "undefined") {
        T = function(f, m) {
            return Y.call(f, m)
        }
    } else {
        T = function(f, m) {
            return ((m in f) && typeof f.constructor.prototype[m] === "undefined")
        }
    }
    function j(f) {
        L.cssText = f
    }
    function q(m, f) {
        return j(Z.join(m + ";") + (f || ""))
    }
    function s(m, f) {
        return ("" + m).indexOf(f) !== -1
    }
    function AQ(m, AS) {
        for (var f in m) {
            if (L[m[f]] !== X && (!AS || AS(m[f], AH))) {
                return true
            }
        }
    }
    function b(AT, AS) {
        var m = AT.charAt(0).toUpperCase() + AT.substr(1),
        f = [AT, "Webkit" + m, "Moz" + m, "O" + m, "ms" + m, "Khtml" + m];
        return !! AQ(f, AS)
    }
    a[Q] = function() {
        return !! N.createElement(Q).getContext
    };
    a[AN] = function() {
        return !! (a[Q]() && typeof N.createElement(Q).getContext("2d").fillText == "function")
    };
    a[v] = function() {
        return !! navigator.geolocation
    };
    a[y] = function() {
        return !! AA.postMessage
    };
    a[AK] = function() {
        var f = !!AA.openDatabase;
        if (f) {
            try {
                f = !!openDatabase("testdb", "1.0", "html5 test db", 200000)
            } catch(m) {
                f = false
            }
        }
        return f
    };
    a[AI] = function() {
        return !! AA[AI]
    };
    a[U] = function() {
        return d(U, AA) && (document.documentMode === X || document.documentMode > 7)
    };
    a[M] = function() {
        return !! (AA.history && history.pushState)
    };
    a[AF] = function() {
        return d("drag") && d("dragstart") && d("dragenter") && d("dragover") && d("dragleave") && d("dragend") && d("drop")
    };
    a[D] = function() {
        return ("WebSocket" in AA)
    };
    a[AJ] = function() {
        j(z + "-color:rgba(150,255,150,.5)");
        return s(L[B], AJ)
    };
    a[J] = function() {
        j(z + "-color:hsla(120,40%,100%,.5)");
        return s(L[B], AJ)
    };
    a[AB] = function() {
        j(z + ":url(//:),url(//:),red url(//:)");
        return new RegExp("(url\\s*\\(.*?){3}").test(L[z])
    };
    a[E] = function() {
        return b(z + "Size")
    };
    a[i] = function() {
        return b("borderImage")
    };
    a[p] = function() {
        return b("borderRadius", "",
        function(f) {
            return s(f, "orderRadius")
        })
    };
    a[e] = function() {
        return b("boxShadow")
    };
    a[AL] = function() {
        q("opacity:.5");
        return s(L[AL], "0.5")
    };
    a[n] = function() {
        return b("animationName")
    };
    a[AE] = function() {
        return b("columnCount")
    };
    a[C] = function() {
        var AS = z + "-image:",
        m = "gradient(linear,left top,right bottom,from(#9f9),to(white));",
        f = "linear-gradient(left top,#9f9, white);";
        j((AS + Z.join(m + AS) + Z.join(f + AS)).slice(0, -AS.length));
        return s(L.backgroundImage, "gradient")
    };
    a[S] = function() {
        return b("boxReflect")
    };
    a[K] = function() {
        return !! AQ(["transformProperty", "WebkitTransform", "MozTransform", "OTransform", "msTransform"])
    };
    a[g] = function() {
        var m = !!AQ(["perspectiveProperty", "WebkitPerspective", "MozPerspective", "OPerspective", "msPerspective"]);
        if (m) {
            var f = document.createElement("style"),
            AS = N.createElement("div");
            f.textContent = "@media (" + Z.join("transform-3d),(") + "modernizr){#modernizr{height:3px}}";
            N.getElementsByTagName("head")[0].appendChild(f);
            AS.id = "modernizr";
            AR.appendChild(AS);
            m = AS.offsetHeight === 3;
            f.parentNode.removeChild(f);
            AS.parentNode.removeChild(AS)
        }
        return m
    };
    a[AP] = function() {
        return b("transitionProperty")
    };
    a[I] = function() {
        var m = N.createElement(I),
        f = !!m[r];
        if (f) {
            f = new Boolean(f);
            f.ogg = m[r]('video/ogg; codecs="theora"');
            f.h264 = m[r]('video/mp4; codecs="avc1.42E01E"');
            f.webm = m[r]('video/webm; codecs="vp8, vorbis"')
        }
        return f
    };
    a[l] = function() {
        var m = N.createElement(l),
        f = !!m[r];
        if (f) {
            f = new Boolean(f);
            f.ogg = m[r]('audio/ogg; codecs="vorbis"');
            f.mp3 = m[r]("audio/mpeg;");
            f.wav = m[r]('audio/wav; codecs="1"');
            f.m4a = m[r]("audio/x-m4a;") || m[r]("audio/aac;")
        }
        return f
    };
    a[x] = function() {
        return ("localStorage" in AA) && AA[x] !== null
    };
    a[W] = function() {
        try {
            return ("sessionStorage" in AA) && AA[W] !== null
        } catch(f) {
            return false
        }
    };
    a[o] = function() {
        return !! AA.Worker
    };
    a[A] = function() {
        var f = AA[A];
        return !! (f && (typeof f.status != "undefined") && (typeof f.update == "function") && (typeof f.swapCache == "function"))
    };
    a[G] = function() {
        return !! N.createElementNS && !!N.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect
    };
    a[R] = function() {
        return !! N.createElementNS && /SVG/.test(t.call(N.createElementNS("http://www.w3.org/2000/svg", "animate")))
    };
    a[P] = function() {
        return !! N.createElementNS && /SVG/.test(t.call(N.createElementNS("http://www.w3.org/2000/svg", "clipPath")))
    };
    function AC() {
        u[F] = (function(AS) {
            for (var m = 0, f = AS.length; m < f; m++) {
                V[AS[m]] = !!(AS[m] in AO)
            }
            return V
        })("autocomplete autofocus list placeholder max min multiple pattern required step".split(" "));
        u[c] = (function(AT) {
            for (var AS = 0, m, f = AT.length; AS < f; AS++) {
                AO.setAttribute("type", AT[AS]);
                m = AO.type !== "text";
                if (m) {
                    AO.value = AD;
                    if (/tel|search/.test(AO.type)) {} else {
                        if (/url|email/.test(AO.type)) {
                            m = AO.checkValidity && AO.checkValidity() === false
                        } else {
                            m = AO.value != AD
                        }
                    }
                }
                k[AT[AS]] = !!m
            }
            return k
        })("search tel url email datetime date month week time datetime-local number range color".split(" "))
    }
    for (var w in a) {
        if (T(a, w)) {
            O.push(((u[w.toLowerCase()] = a[w]()) ? "": "no-") + w.toLowerCase())
        }
    }
    if (!u[F]) {
        AC()
    }
    u.addTest = function(f, m) {
        f = f.toLowerCase();
        if (u[f]) {
            return
        }
        m = !!(m());
        AR.className += " " + (m ? "": "no-") + f;
        u[f] = m;
        return u
    };
    j("");
    AH = AO = null;
    if (AG && (function() {
        var f = N.createElement("div");
        f.innerHTML = "<elem></elem>";
        return f.childNodes.length !== 1
    })()) { (function(AU, Ad) {
            function AT(m, f) {
                if (Ab[m]) {
                    Ab[m].styleSheet.cssText += f
                } else {
                    var Ai = AS[AY],
                    Ah = Ad[AZ]("style");
                    Ah.media = m;
                    Ai.insertBefore(Ah, Ai[AY]);
                    Ab[m] = Ah;
                    AT(m, f)
                }
            }
            function Ag(m, f) {
                for (var Aj = new RegExp("\\b(" + AX + ")\\b(?!.*[;}])", "gi"), Ai = function(Ak) {
                    return ".iepp_" + Ak
                },
                Ah = -1; ++Ah < m.length;) {
                    f = m[Ah].media || f;
                    Ag(m[Ah].imports, f);
                    AT(f, m[Ah].cssText.replace(Aj, Ai))
                }
            }
            function Af() {
                for (var m, f = Ad.getElementsByTagName("*"), Ak, Aj, Ai = new RegExp("^" + AX + "$", "i"), Ah = -1; ++Ah < f.length;) {
                    if ((m = f[Ah]) && (Aj = m.nodeName.match(Ai))) {
                        Ak = new RegExp("^\\s*<" + Aj + "(.*)\\/" + Aj + ">\\s*$", "i");
                        Aa.innerHTML = m.outerHTML.replace(/\r|\n/g, " ").replace(Ak, m.currentStyle.display == "block" ? "<div$1/div>": "<span$1/span>");
                        Ak = Aa.childNodes[0];
                        Ak.className += " iepp_" + Aj;
                        Ak = Ac[Ac.length] = [m, Ak];
                        m.parentNode.replaceChild(Ak[1], Ak[0])
                    }
                }
                Ag(Ad.styleSheets, "all")
            }
            function Ae() {
                for (var m = -1, f; ++m < Ac.length;) {
                    Ac[m][1].parentNode.replaceChild(Ac[m][0], Ac[m][1])
                }
                for (f in Ab) {
                    AS[AY].removeChild(Ab[f])
                }
                Ab = {};
                Ac = []
            }
            for (var AS = Ad.documentElement, Aa = Ad.createDocumentFragment(), Ab = {},
            AX = "abbr|article|aside|audio|canvas|command|datalist|details|figure|figcaption|footer|header|hgroup|keygen|mark|meter|nav|output|progress|section|source|summary|time|video", AW = AX.split("|"), Ac = [], AV = -1, AY = "firstChild", AZ = "createElement"; ++AV < AW.length;) {
                Ad[AZ](AW[AV]);
                Aa[AZ](AW[AV])
            }
            Aa = Aa.appendChild(Ad[AZ]("div"));
            AU.attachEvent("onbeforeprint", Af);
            AU.attachEvent("onafterprint", Ae)
        })(this, N)
    }
    u._enableHTML5 = AG;
    u._version = AM;
    AR.className = AR.className.replace(/\bno-js\b/, "") + " js";
    return u
})(this, this.document); (function(B) {
    var A = (function() {
        var E = {
            select: "input",
            change: "input",
            submit: "form",
            reset: "form",
            error: "img",
            load: "img",
            abort: "img"
        },
        C = {};
        function D(F, I) {
            var H = (arguments.length == 1);
            if (H && C[F]) {
                return C[F]
            }
            I = I || document.createElement(E[F] || "div");
            F = "on" + F;
            var G = (F in I);
            if (!G && I.setAttribute) {
                I.setAttribute(F, "return;");
                G = typeof I[F] == "function"
            }
            I = null;
            return H ? (C[F] = G) : G
        }
        return D
    })();
    B.fn.hashchange = function(D) {
        if (A("hashchange", window) && (document.documentMode === undefined || document.documentMode > 7)) {
            this.bind("hashchange", D)
        } else {
            var C = location.hash;
            setInterval(function() {
                if (C !== location.hash) {
                    D(B.Event("hashchange"));
                    C = location.hash
                }
            },
            250)
        }
        return this
    }
})(jQuery); (function(B) {
    B.hotkeys = {
        version: "0.8",
        specialKeys: {
            8: "backspace",
            9: "tab",
            13: "return",
            16: "shift",
            17: "ctrl",
            18: "alt",
            19: "pause",
            20: "capslock",
            27: "esc",
            32: "space",
            33: "pageup",
            34: "pagedown",
            35: "end",
            36: "home",
            37: "left",
            38: "up",
            39: "right",
            40: "down",
            45: "insert",
            46: "del",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9",
            106: "*",
            107: "+",
            109: "-",
            110: ".",
            111: "/",
            112: "f1",
            113: "f2",
            114: "f3",
            115: "f4",
            116: "f5",
            117: "f6",
            118: "f7",
            119: "f8",
            120: "f9",
            121: "f10",
            122: "f11",
            123: "f12",
            144: "numlock",
            145: "scroll",
            191: "/",
            224: "meta"
        },
        shiftNums: {
            "`": "~",
            "1": "!",
            "2": "@",
            "3": "#",
            "4": "$",
            "5": "%",
            "6": "^",
            "7": "&",
            "8": "*",
            "9": "(",
            "0": ")",
            "-": "_",
            "=": "+",
            ";": ": ",
            "'": '"',
            ",": "<",
            ".": ">",
            "/": "?",
            "\\": "|"
        }
    };
    function A(F) {
        if (typeof F.data !== "string" && !B.isArray(F.data)) {
            return
        }
        var E = F.handler,
        G = B.isArray(F.data),
        D = 0,
        C = F.data.length;
        F.handler = function(H) {
            var I = F.data,
            Q;
            if (G) {
                I = I[D]
            }
            Q = I.toLowerCase().split(" ");
            if (this !== H.target && (/textarea|select/i.test(H.target.nodeName) || H.target.type === "text")) {
                return
            }
            var O = H.type !== "keypress" && B.hotkeys.specialKeys[H.which],
            N = String.fromCharCode(H.which).toLowerCase(),
            P,
            K = "",
            L = {};
            if (H.altKey && O !== "alt") {
                K += "alt+"
            }
            if (H.ctrlKey && O !== "ctrl") {
                K += "ctrl+"
            }
            if (H.metaKey && !H.ctrlKey && O !== "meta") {
                K += "meta+"
            }
            if (H.shiftKey && O !== "shift") {
                K += "shift+"
            }
            if (O) {
                L[K + O] = true
            } else {
                L[K + N] = true;
                L[K + B.hotkeys.shiftNums[N]] = true;
                if (K === "shift+") {
                    L[B.hotkeys.shiftNums[N]] = true
                }
            }
            for (var M = 0, J = Q.length; M < J; M++) {
                if (L[Q[M]]) {
                    if (!G || D === C - 1) {
                        D = 0;
                        return E.apply(this, arguments)
                    } else {
                        D += 1;
                        return true
                    }
                }
            }
            if (G && D !== 0) {
                Q = F.data[0].toLowerCase().split(" ");
                for (var M = 0, J = Q.length; M < J; M++) {
                    if (L[Q[M]]) {
                        D = 1;
                        return true
                    }
                }
                D = 0
            }
        }
    }
    B.each(["keydown", "keyup", "keypress"],
    function() {
        B.event.special[this] = {
            add: A
        }
    })
})(jQuery);
jQuery.cookie = function(B, I, L) {
    if (typeof I != "undefined") {
        L = L || {};
        if (I === null) {
            I = "";
            L.expires = -1
        }
        var E = "";
        if (L.expires && (typeof L.expires == "number" || L.expires.toUTCString)) {
            var F;
            if (typeof L.expires == "number") {
                F = new Date();
                F.setTime(F.getTime() + (L.expires * 24 * 60 * 60 * 1000))
            } else {
                F = L.expires
            }
            E = "; expires=" + F.toUTCString()
        }
        var K = L.path ? "; path=" + (L.path) : "";
        var G = L.domain ? "; domain=" + (L.domain) : "";
        var A = L.secure ? "; secure": "";
        document.cookie = [B, "=", encodeURIComponent(I), E, K, G, A].join("")
    } else {
        var D = null;
        if (document.cookie && document.cookie != "") {
            var J = document.cookie.split(";");
            for (var H = 0; H < J.length; H++) {
                var C = jQuery.trim(J[H]);
                if (C.substring(0, B.length + 1) == (B + "=")) {
                    D = decodeURIComponent(C.substring(B.length + 1));
                    break
                }
            }
        }
        return D
    }
}; (function(A) {
    A.fn.tipsy = function(B) {
        B = A.extend({},
        A.fn.tipsy.defaults, B);
        return this.each(function() {
            var C = A.fn.tipsy.elementOptions(this, B);
            if (C && C.stopThat) {
                var D = A.data(this, "active.tipsy");
                if (D) {
                    D.remove()
                }
                A.data(this, "cancel.tipsy", false);
                return
            }
            A(this).hover(function() {
                A.data(this, "cancel.tipsy", true);
                var E = A.data(this, "active.tipsy");
                if (!E) {
                    E = A('<div class="tipsy"><div class="tipsy-inner"/></div>');
                    E.css({
                        position: "absolute",
                        zIndex: 100000
                    });
                    A.data(this, "active.tipsy", E)
                }
                if (A(this).attr("title") || typeof(A(this).attr("original-title")) != "string") {
                    A(this).attr("original-title", A(this).attr("title") || "").removeAttr("title")
                }
                var G;
                if (typeof C.title == "string") {
                    G = A(this).attr(C.title == "title" ? "original-title": C.title)
                } else {
                    if (typeof C.title == "function") {
                        G = C.title.call(this)
                    }
                }
                E.find(".tipsy-inner")[C.html ? "html": "text"](G || C.fallback);
                var J = A.extend({},
                A(this).offset(), {
                    width: this.offsetWidth,
                    height: this.offsetHeight
                });
                E.get(0).className = "tipsy";
                E.remove().css({
                    top: 0,
                    left: 0,
                    visibility: "hidden",
                    display: "block"
                }).appendTo(document.body);
                var F = E[0].offsetWidth,
                I = E[0].offsetHeight;
                var H = (typeof C.gravity == "function") ? C.gravity.call(this) : C.gravity;
                switch (H.charAt(0)) {
                case "n":
                    E.css({
                        top:
                        J.top + J.height,
                        left: J.left + J.width / 2 - F / 2
                    }).addClass("tipsy-north");
                    break;
                case "s":
                    E.css({
                        top:
                        J.top - I,
                        left: J.left + J.width / 2 - F / 2
                    }).addClass("tipsy-south");
                    break;
                case "e":
                    E.css({
                        top:
                        J.top + J.height / 2 - I / 2,
                        left: J.left - F
                    }).addClass("tipsy-east");
                    break;
                case "w":
                    E.css({
                        top:
                        J.top + J.height / 2 - I / 2,
                        left: J.left + J.width
                    }).addClass("tipsy-west");
                    break
                }
                if (C.fade) {
                    E.css({
                        opacity: 0,
                        display: "block",
                        visibility: "visible"
                    }).animate({
                        opacity: 0.8
                    })
                } else {
                    E.css({
                        visibility: "visible"
                    })
                }
            },
            function() {
                A.data(this, "cancel.tipsy", false);
                var E = this;
                setTimeout(function() {
                    if (A.data(this, "cancel.tipsy")) {
                        return
                    }
                    var F = A.data(E, "active.tipsy");
                    if (C.fade) {
                        F.stop().fadeOut(function() {
                            A(this).remove()
                        })
                    } else {
                        F.remove()
                    }
                },
                100)
            })
        })
    };
    A.fn.tipsy.elementOptions = function(C, B) {
        return A.metadata ? A.extend({},
        B, A(C).metadata()) : B
    };
    A.fn.tipsy.defaults = {
        fade: false,
        fallback: "",
        gravity: "n",
        html: false,
        title: "title"
    };
    A.fn.tipsy.autoNS = function() {
        return A(this).offset().top > (A(document).scrollTop() + A(window).height() / 2) ? "s": "n"
    };
    A.fn.tipsy.autoWE = function() {
        return A(this).offset().left > (A(document).scrollLeft() + A(window).width() / 2) ? "e": "w"
    }
})(jQuery); (function(B) {
    var A = /([A-Z])/g;
    B.fn.stopCssAnimation = function() {
        this.each(function() {
            var D = B(this);
            var F = D.data("cssAnimatedProps");
            var C = window.getComputedStyle(this, null);
            var E = {};
            for (var H in F) {
                H = H.replace(A, "-$1").toLowerCase();
                E[H] = C.getPropertyValue(H)
            }
            D.css({
                "-moz-transition-property": "none",
                "-moz-transition-duration": "",
                "-moz-transition-timing-function": "",
                "-webkit-transition-property": "none",
                "-webkit-transition-duration": "",
                "-webkit-transition-timing-function": ""
            });
            for (var H in E) {
                D.css(H, E[H])
            }
            D.data("cssAnimatedProps", null);
            var G = D.data("cssTimeoutId");
            if (G != null) {
                clearTimeout(G);
                D.data("cssTimeoutId", null)
            }
        })
    };
    B.fn.animateWithCss = function(G, D, F, K) {
        var I = jQuery.speed(D, F, K);
        if (jQuery.isEmptyObject(G)) {
            return this.each(I.complete)
        }
        var E = {
            bounce: "cubic-bezier(0.0, 0.35, .5, 1.3)",
            linear: "linear",
            swing: "ease-in-out"
        };
        I.easing = I.easing || "swing";
        I.easing = E[I.easing] ? E[I.easing] : I.easing;
        this.each(function() {
            B(this).data("cssAnimatedProps", G);
            var N = window.getComputedStyle(this, null);
            for (var O in G) {
                O = O.replace(A, "-$1").toLowerCase();
                B(this).css(O, N.getPropertyValue(O))
            }
        });
        var M = [];
        for (var C in G) {
            M.push(C)
        }
        var J = M.length ? M.join(",") : "all";
        this.css({
            "-moz-transition-property": J,
            "-moz-transition-duration": I.duration + "ms",
            "-moz-transition-timing-function": I.easing,
            "-webkit-transition-property": J,
            "-webkit-transition-duration": I.duration + "ms",
            "-webkit-transition-timing-function": I.easing
        });
        this.css(G);
        var L = this;
        var H = setTimeout(function() {
            L.css({
                "-moz-transition-property": "none",
                "-moz-transition-duration": "",
                "-moz-transition-timing-function": "",
                "-webkit-transition-property": "none",
                "-webkit-transition-duration": "",
                "-webkit-transition-timing-function": ""
            });
            L.data("cssAnimatedProps", null);
            L.data("cssTimeoutId", null);
            if (jQuery.isFunction(I.complete)) {
                I.complete.apply(L)
            }
        },
        I.duration);
        this.data("cssTimeoutId", H);
        return this
    }
})(jQuery);
var scrobject = {
    scribeHost: window.location.hostname,
    toScribeParams: function(A) {
        var B = [];
        for (var C in A) {
            B[B.length] = encodeURIComponent(C) + "=" + encodeURIComponent(A[C])
        }
        return B.join("&")
    },
    scribeUrl: function(C, B) {
        var A = "/scribe?";
        if (B.host) {
            A = "http://" + B.host + A
        } else {
            if (!/[\/\.]twitter\.com/.test(scrobject.scribeHost) && !/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/.test(scrobject.scribeHost) && scrobject.scribeHost != "localhost") {
                A = "http://twitter.com" + A
            }
        }
        return A + scrobject.toScribeParams(C)
    }
};
function scribe(A, D, C, B) {
    C = C || {};
    if (window.DARKMODE_SCRIBE) {
        return this
    }
    if (!D) {
        return this
    }
    if (typeof(A) == "function") {
        A = A.call(this, B)
    }
    if (A == null) {
        return this
    }
    if (!A.event_name && !C.bulk) {
        return this
    }
    var E = {
        log: JSON.stringify(A),
        ts: (new Date()).getTime()
    };
    if (C.filter) {
        E.filter = C.filter
    }
    if (C.bulk) {
        E.bulk = true
    }
    if (D) {
        E.category = D
    } (new Image()).src = scrobject.scribeUrl(E, C);
    return this
}
function bulkScribe(B, E) {
    var D = {};
    for (var C = 0, A = B.length; C < A; ++C) {
        D[C] = B[C]
    }
    return scribe(D, E, {
        bulk: true
    })
}
if (window.jQuery) { (function(A) {
        A.extend(A.fn, {
            scribe: function(B, D, C) {
                C = C || {};
                A(this).bind(C.clientEvent || "mousedown",
                function(E) {
                    window.scribe.call(this, B, D, C, E)
                });
                return this
            }
        })
    })(jQuery)
}
twttr.constants = {
    keyCodes: {
        enter: 13,
        escape: 27,
        esc: 27
    },
    which: {
        period: 46
    },
    charCodes: {
        space: 32,
        questionMark: 63
    },
    placeTypes: {
        city: 7
    },
    emailStatus: {
        GRAND_FATHERED: 0,
        EXCUSED: 1,
        UNCONFIRMED: 2,
        CONFIRMED: 3
    },
    jQueryEvents: ("blur hover focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error").split(" ")
};
twttr.klass("twttr.Router",
function() {
    this._routes = [];
    this.routeMethodsForMustache = {};
    this.routeMethods = {};
    this.viewedPagesCount = 0;
    this.pageViewsPerRefresh = 50
}).statics(twttr.EventProvider).statics({
    match: function(F, C) {
        F = this.normalizePath(F);
        C = this.normalizePath(C);
        var E = {};
        if (F === C) {
            return E
        } else {
            if (F === "") {
                return false
            }
        }
        var B = F.split("/"),
        A = C.split("/");
        if (B.length !== A.length) {
            return false
        }
        for (var D = 0; D < B.length; D++) {
            if (A[D].charAt(0) === ":") {
                if (B[D].match(/^\s*$/)) {
                    return false
                }
                E[A[D].slice(1)] = decodeURIComponent(B[D])
            } else {
                if (B[D] !== A[D]) {
                    return false
                }
            }
        }
        return E
    },
    generatePathFunction: function(A) {
        var B = this;
        return function(D) {
            var C = B.supplantPath(A, D);
            return C
        }
    },
    supplantPath: function(F, H) {
        var B = F.split("#").join("/#").split("/"),
        A = [];
        for (var E = 0; E < B.length; E++) {
            var D = B[E],
            C = false;
            if (D.charAt(0) === "#") {
                D = D.slice(1);
                C = true
            }
            if (D.charAt(0) === ":") {
                var G = D.slice(1);
                if (typeof H[G] === "undefined") {
                    return false
                } else {
                    D = H[G];
                    if (typeof D === "function") {
                        D = D.call(H)
                    }
                    D = encodeURIComponent(D)
                }
            }
            if (C) {
                D = "#" + D
            }
            A.push(D)
        }
        return A.join("/").split("/#").join("#")
    },
    sanitizeRedirectUrl: function(A) {
        return A.replace(/javascript:/ig, "")
    },
    performRedirect: function(A) {
        window.location = this._sanitizeRedirectUrl(A)
    },
    getCurrentPath: function() {
        return this.getPathFromHref(window.location.href)
    },
    getPathFromHref: function(C) {
        var F = C.split("/").slice(2).join("/");
        if (F.indexOf("#") === -1) {
            F = F + "#"
        }
        var B = F.split("#");
        var A = B[0];
        var E = B[1];
        if (A.indexOf("/") === -1) {
            A = A + "/"
        }
        var D = A.split("/").slice(1).join("/");
        if (D.indexOf("?") >= 0) {
            D = D.slice(0, D.indexOf("?"))
        }
        if (E.indexOf("?") >= 0) {
            E = E.slice(0, E.indexOf("?"))
        }
        return "/" + D + "#" + E
    },
    getCurrentQueryStringParams: function() {
        return this.getQueryStringParamsFromHref(window.location.href)
    },
    getQueryStringParamsFromHref: function(C) {
        var D = C.split("#"),
        A = D[0].split("?")[1] || "",
        B = (D[1] || "").split("?")[1] || "";
        return twttr.merge(this.parseQueryString(A), this.parseQueryString(B))
    },
    parseQueryString: function(E) {
        var D = E.split("&"),
        A = {};
        for (var B = 0; B < D.length; B++) {
            if (D[B]) {
                var C = D[B].split("=");
                A[decodeURIComponent(C[0])] = C[1] ? decodeURIComponent(C[1]) : true
            }
        }
        return A
    },
    getHashUpdate: function(F, E) {
        var A = this.normalizePath(F),
        B = this.normalizePath(E);
        if (A === B) {
            return false
        }
        F = F.split("/#").join("#");
        E = E.split("/#").join("#");
        if (F.indexOf("#") === -1) {
            F += "#"
        }
        if (E.indexOf("#") === -1) {
            E += "#"
        }
        var C = F.split("#"),
        D = E.split("#");
        if (C[0] === D[0]) {
            return "#" + D[1]
        }
        if (C[1] === "" && D[1] === "") {
            return "#" + D[0].slice(F.length)
        }
        return "#" + B
    },
    normalizePath: function(A) {
        return this.trimSlashes(A.replace(/\/?#(!|%21)?\/?/g, "/"))
    },
    shouldRedirect: function(D, C) {
        var B = C.split("#"),
        A = D.split("#");
        if (this.trimSlashes(B[0]) === this.trimSlashes(A[0])) {
            return false
        }
        if (this.trimSlashes(B[1]) === this.trimSlashes(A[0])) {
            return false
        }
        return true
    },
    trimSlashes: function(A) {
        if (!A) {
            return A
        }
        return A.replace(/^\/*/, "").replace(/\/*$/, "")
    },
    detectHistorySupport: function() {
        return !! (window.history && history.pushState)
    }
}).methods(twttr.EventProvider).methods({
    startRouting: function() {
        this._callCurrentRoutingAction();
        this._listenToUrl()
    },
    route: function(A, C, B) {
        this._addRouteMethods(A, C);
        this._routes.push({
            name: A,
            path: C,
            fn: B
        })
    },
    staticRoute: function(B, A) {
        var C = this;
        this.route(B, A,
        function() {
            C.constructor.performRedirect(A)
        })
    },
    redirectRoute: function(A, C, D) {
        var B = this;
        this.route(A, C,
        function(F, E) {
            B.routeTo(B.routeMethods[D](F, E))
        })
    },
    routeTo: function(A) {
        if (this.pageViewsPerRefresh <= this.viewedPagesCount) {
            return this.constructor.performRedirect(A)
        }
        this.viewedPagesCount++;
        if (!this._useHistory() && this.constructor.shouldRedirect(this.constructor.getCurrentPath(), A)) {
            return this.constructor.performRedirect(A)
        }
        this._changeUrlAndCallAction(A)
    },
    shouldRedirectTo: function(A) {
        if (this._useHistory()) {
            return false
        }
        return this.constructor.shouldRedirect(this.constructor.getCurrentPath(), A)
    },
    findMatchingRoute: function(C) {
        for (var B = 0; B < this._routes.length; B++) {
            var A = this.constructor.match(C, this._routes[B].path);
            if (A) {
                return {
                    name: this._routes[B].name,
                    fn: this._routes[B].fn,
                    args: A
                }
            }
        }
        return false
    },
    getCurrentRoute: function() {
        return this.findMatchingRoute(this.constructor.getCurrentPath())
    },
    _changeUrlAndCallAction: function(D) {
        var B = false,
        E = false,
        A = this.findMatchingRoute(D);
        if (this._useHistory()) {
            window.history.pushState(null, null, D);
            E = true
        }
        var C = this.constructor.getHashUpdate(this.constructor.getCurrentPath(), D);
        if (C) {
            window.location.hash = C;
            B = true;
            E = true
        }
        if (!B) {
            this._callRoutingActionFor(A)
        }
        this.trigger("routed", [A]);
        if (E) {
            this.trigger("urlChanged", [A])
        }
    },
    _callRoutingActionForPath: function(A) {
        return this._callRoutingActionFor(this.findMatchingRoute(A))
    },
    _callCurrentRoutingAction: function() {
        return this._callRoutingActionForPath(this.constructor.getCurrentPath())
    },
    _callRoutingActionFor: function(A) {
        if (!A) {
            this.trigger("routeNotFound");
            return
        }
        return A.fn.call(null, A.args, this.constructor.getCurrentQueryStringParams())
    },
    lookupAndNormalizeRoute: function(B) {
        var A = this.findMatchingRoute(B);
        if (A) {
            return this.routeMethods[A.name](A.args)
        }
        return B
    },
    _addRouteMethods: function(B, C) {
        var A = this.constructor.generatePathFunction(C),
        D = B + "Path";
        this[D] = A;
        this.routeMethods[B] = A;
        this.routeMethodsForMustache[twttr.util.underscore(D)] = function() {
            return A(this)
        }
    },
    _listenToUrl: function() {
        var A = this;
        $(window).hashchange(function(B) {
            A._callCurrentRoutingAction()
        });
        if (this.constructor.detectHistorySupport()) {
            $(window).bind("popstate",
            function(B) {
                if (A._useHistory()) {
                    A._callCurrentRoutingAction()
                }
            })
        }
    },
    _useHistory: function() {
        return twttr.secrets && twttr.secrets.html5Routing && this.constructor.detectHistorySupport()
    }
});
twttr.klass("twttr.Decider",
function(B, A) {
    this._features = B;
    A = A || this.constructor.DEFAULT_REFRESH_INTERVAL;
    setInterval(twttr.bind(this, this.updateFeatures), A)
}).statics({
    DECIDER_URL: "/account/available_features",
    DEFAULT_REFRESH_INTERVAL: 180000
}).methods({
    isAvailable: function(A) {
        if (this._features) {
            return !! this._features[A]
        }
        return false
    },
    updateFeatures: function() {
        $.getJSON(this.constructor.DECIDER_URL, twttr.bind(this,
        function(A) {
            if (A) {
                this._features = A
            }
        }))
    },
    goodAtCss: function() {
        return $.support.boxModel && !($.browser.msie && parseFloat($.browser.version) <= 6)
    }
});
twttr.decider = new twttr.Decider(twttr._initialDeciderFeatures); (function() {
    twttr.router = new twttr.Router();
    var A = twttr.bind(twttr.router, twttr.router.route),
    B = twttr.bind(twttr.router, twttr.router.staticRoute),
    E = twttr.bind(twttr.router, twttr.router.redirectRoute);
    D("about", "/about");
    D("jobs", "/jobs");
    D("tos", "/tos");
    D("privacy", "/privacy");
    D("settings", "/settings/account");
    D("devices", "/devices");
    D("findAndFollow", "/invitations");
    D("signup", "/signup");
    D("becomeUser", "/admin/utils/become_user/:id");
    D("adminFind", "/admin/find/:id");
    D("logout", "/logout");
    D("login", "/login");
    D("twitterSuggests", "/invitations/twitter_suggests");
    D("invitationsSuggestions", "/invitations/suggestions");
    D("findOnContacts", "/invitations/find_on_contacts");
    D("campaigns", "/account/campaigns");
    D("goodies", "/goodies");
    D("devices", "/devices");
    D("translate", "/translate");
    D("whatsNew", "/newtwitter");
    D("turn_phx_off", "/account/use_phx?setting=false");
    B("support", "http://support.twitter.com");
    B("blog", "http://blog.twitter.com");
    B("status", "http://status.twitter.com");
    B("developers", "http://dev.twitter.com");
    B("businesses", "http://business.twitter.com/");
    B("advertisers", "http://lmgtfy.com/?q=twitter+advertisers");
    B("partnerships", "http://media.twitter.com");
    B("helpPromotedTweets", "http://support.twitter.com/groups/35-business/topics/127-frequently-asked-questions/articles/142101-promoted-tweets");
    B("spamLearnMore", "http://support.twitter.com/articles/64986-how-to-report-spam-on-twitter");
    B("savedSearchesHelp", "http://support.twitter.com/entries/96646-how-to-save-searches");
    B("listsHelp", "http://support.twitter.com/articles/76460-how-to-use-twitter-lists");
    B("emailHelp", "http://support.twitter.com/articles/82050-i-m-having-trouble-confirming-my-email");
    B("changeEmail", "https://twitter.com/settings/account?change_email=true");
    B("suspendedHelp", "http://support.twitter.com/groups/32-something-s-not-working/topics/116-account-settings-problems/articles/15790-how-to-contest-account-suspension");
    B("mobile", "http://mobile.twitter.com");
    A("index", "/", C("home").action("home"));
    A("home", "/", C("home").action("home"));
    A("mentions", "/#!/mentions", C("home").action("mentions"));
    A("replies", "/#!/replies", C("home").action("mentions"));
    A("retweets", "/#!/retweets", C("home").action("retweetsByYou"));
    A("retweetsByOthers", "/#!/retweets_by_others", C("home").action("retweetsByOthers"));
    A("retweetsOfMine", "/#!/retweeted_of_mine", C("home").action("retweetsOfYourTweets"));
    A("listInHome", "/#!/list/:screen_name/:list_slug", C("home").action("listInHome"));
    A("savedSearch", "/#!/saved-search/:query", C("home").action("savedSearch"));
    A("rateLimit", "/#!/twttr/rate_limit", C("rateLimit").action("tooMuch"));
    A("searchLinks", "/#!/search/links/:query", C("search").action("links"));
    A("formSearchLinks", "/#!/search/links", C("search").action("links"));
    A("searchNearby", "/#!/search/nearby/:query", C("search").action("nearby"));
    A("formSearchNearby", "/#!/search/nearby", C("search").action("nearby"));
    A("userSearch", "/#!/search/users/:query", C("search").action("people"));
    A("placeTweetSearch", "/#!/search/place_tweets/:place_id/:place_name", C("search").action("placeTweetSearch"));
    A("searchResults", "/#!/search/:query", C("search").action("search"));
    A("formSearchResults", "/#!/search", C("search").action("search"));
    A("place", "/#!/places/:place_id", C("place").action("tweets"));
    A("placeLinks", "/#!/places/:place_id/links", C("place").action("links"));
    A("placeNearby", "/#!/places/:place_id/nearby", C("place").action("nearby"));
    A("placeUsers", "/#!/places/:place_id/users", C("placeUsers").action("all"));
    A("placeUsersFollowing", "/#!/places/:place_id/users/following", C("placeUsers").action("following"));
    A("messages", "/#!/messages", C("messages").action("messages"));
    A("inbox", "/#!/inbox", C("messages").action("messages"));
    A("sent", "/#!/sent", C("messages").action("messages"));
    A("createDm", "/direct_messages/create/:screen_name", C("profile").action("message"));
    A("permalink", "/#!/:screen_name/status/:id", C("permalink").action("permalink"));
    A("permalinkOld", "/#!/:screen_name/statuses/:id", C("permalink").action("permalink"));
    A("followers", "/#!/followers", C("profile").action("followers"));
    A("following", "/#!/following", C("profile").action("following"));
    A("favorites", "/#!/favorites", C("profile").action("favorites"));
    A("friends", "/#!/friends", C("profile").action("following"));
    A("lists", "/#!/lists", C("profile").action("lists"));
    A("profile", "/#!/:screen_name", C("profile").action("profile"));
    A("userFavorites", "/#!/:screen_name/favorites", C("profile").action("favorites"));
    A("userFollowers", "/#!/:screen_name/followers", C("profile").action("followers"));
    A("userFollowing", "/#!/:screen_name/following", C("profile").action("following"));
    A("userLists", "/#!/:screen_name/lists", C("profile").action("lists"));
    A("memberships", "/#!/:screen_name/lists/memberships", C("profile").action("memberships"));
    A("subscriptions", "/#!/:screen_name/lists/subscriptions", C("profile").action("subscriptions"));
    A("followerRequests", "/#!/:screen_name/follower_requests", C("profile").action("followerRequests"));
    A("userList", "/#!/:screen_name/:list_slug", C("list").action("list"));
    A("listMembers", "/#!/:screen_name/:list_slug/members", C("list").action("members"));
    A("listSubscribers", "/#!/:screen_name/:list_slug/subscribers", C("list").action("followers"));
    A("userListFull", "/#!/:screen_name/lists/:list_slug", C("list").action("list"));
    function C(F) {
        var H;
        function G(J) {
            var I = twttr.app.switchToPage(F);
            if (H) {
                I[H].apply(I, arguments)
            }
        }
        G.action = function(I) {
            H = I;
            return G
        };
        return G
    }
    function D(F, G) {
        A(F, G,
        function() {})
    }
} ());
twttr.stream = function(C, B) {
    var A = twttr.klass(C, B);
    return A
};
twttr.klass("twttr.streams.Stream",
function(B, A) {
    this.params = B || {};
    A = A || [];
    if (A instanceof twttr.API.util.BaseCollection) {
        A = A.array
    }
    this.items = A;
    this.screenName = this.params.screenName;
    this.newItemsCount = this.items.length;
    this.oldItemsCount = 0;
    this._page = 1;
    this.focusedItemId = null;
    this.highlightedItemId = null;
    this.$node = new twttr.views.Stream({}).$html()
}).methods(twttr.EventProvider).methods({
    NEW_ITEMS_COUNT_MAX: 100,
    NEW_ITEMS_COUNT_CUTOFF: 40,
    _shouldCache: true,
    itemViewClass: null,
    afterSwitchingToAgain: function() {},
    afterFirstSwitchingTo: function() {},
    beforeSwitchingAway: function() {},
    _setTitle: function() {},
    getMoreOldItems: function(B) {
        var A = this;
        if (this._getMoreOldItemsLock || this.noMoreOldItems || this._errorComponent) {
            return
        }
        this._getMoreOldItemsLock = true;
        this.isLoadingMore();
        this._fetchItems(twttr.bind(this,
        function(D, C) {
            if (C !== twttr.streams.SUCCESS) {
                this._showError(C)
            } else {
                this._showOldItems();
                this._page++
            }
            this.doneLoadingMore();
            this._getMoreOldItemsLock = false;
            if (B) {
                B(D, C)
            }
        }))
    },
    getCurrentlyFocusedItem: function() {
        return this.focusedItemId ? this.$streamItems().find(this.itemSelector(this.focusedItemId)) : null
    },
    getCurrentlyHighlightedItem: function() {
        return this.highlightedItemId ? this.$streamItems().find(this.itemSelector(this.highlightedItemId)) : null
    },
    getFirstItem: function() {
        return this.$streamItems().find(".stream-item:first")
    },
    getItemId: function(A) {
        return parseInt(A.closest(".stream-item").attr("data-item-id"), 10)
    },
    focusItem: function(A) {
        this.focusedItemId = A.attr("data-item-id");
        A.focus()
    },
    unfocusItem: function(A) {
        this.focusedItemId = null;
        A.blur()
    },
    highlightItem: function(A) {
        var B = this.getCurrentlyHighlightedItem();
        if (B) {
            B.removeClass("hovered-stream-item")
        }
        this.highlightedItemId = A.attr("data-item-id");
        A.addClass("hovered-stream-item")
    },
    highlightNext: function() {
        this.shiftHighlight(false)
    },
    highlightPrevious: function() {
        this.shiftHighlight(true)
    },
    shiftHighlight: function(B) {
        var C = this.getCurrentlyHighlightedItem();
        if (!C) {
            this.highlightItem(this.getFirstItem());
            return
        }
        var A = B ? C.prev() : C.next();
        if (A.length) {
            this.highlightItem(A);
            this.scrollStreamTo(A)
        }
    },
    scrollStreamTo: function(A) {
        var B = A.offset().top + (A.height() / 2),
        C = B - (twttr.$win.height() / 2);
        twttr.$win.scrollTop(C)
    },
    dom: function() {
        return this.$node
    },
    $streamItems: function() {
        return this.$find(".stream-items")
    },
    $find: function() {
        var A = this.dom();
        return A.find.apply(A, arguments)
    },
    itemSelector: function(A) {
        return ".stream-item[data-item-id=" + A + "]"
    },
    selectedItem: function(A) {
        return this.$streamItems().find(this.itemSelector(A))
    },
    unshift: function(A) {
        if (twttr.is.array(A)) {
            this.newItemsCount += A.length;
            this.items.unshift.apply(this.items, A)
        } else {
            this.newItemsCount += arguments.length;
            this.items.unshift(arguments)
        }
        this.trigger("newItemsCountChanged", [this.newItemsCount])
    },
    push: function(A) {
        if (twttr.is.array(A)) {
            this.oldItemsCount += A.length;
            this.items.push.apply(this.items, A)
        } else {
            this.oldItemsCount += arguments.length;
            this.items.push(arguments)
        }
    },
    isDuplicate: function(A) {
        var B = this.streamItemId ? this.streamItemId(A) : A.id;
        this.itemIds = this.itemIds || {};
        return !! this.itemIds[B]
    },
    _renderItemHtml: function(A) {
        this.itemIds = this.itemIds || {};
        var B = this.streamItemId ? this.streamItemId(A) : A.id;
        this.itemIds[B] = 1;
        A.query = this.params.query;
        if (A.attributes) {
            A.attributes.query = this.params.query
        }
        return new twttr.views.StreamItem({
            item_html: new twttr.views[this.itemViewClass](A).html(),
            item_id: B,
            item_type: this.streamItemType
        }).html()
    },
    _renderItemsHtml: function(A) {
        var B = this;
        return twttr.inject(A, "",
        function(E, C, D) {
            if (!B.isDuplicate(D)) {
                E += B._renderItemHtml(D)
            }
            return E
        })
    },
    _renderItems: function(A) {
        return $(this._renderItemsHtml(A))
    },
    remove: function(A) {
        this.selectedItem(A).remove()
    },
    rerenderItem: function(B, A) {
        this.selectedItem(B).replaceWith(this._renderItemHtml(A))
    },
    _showNewItems: function() {
        var B = this.$streamItems();
        if (this.newItemsCount > this.NEW_ITEMS_COUNT_MAX) {
            B.empty();
            this.items = this.items.slice(0, this.NEW_ITEMS_COUNT_CUTOFF);
            this.newItemsCount = this.NEW_ITEMS_COUNT_CUTOFF
        }
        var A = this._renderItems(this.items.slice(0, this.newItemsCount));
        B.prepend(A);
        this.newItemsCount = 0;
        this.onShowNewItems(A);
        this.trigger("newItemsCountChanged", [0])
    },
    _showOldItems: function() {
        var A = this.$streamItems();
        var B = this._renderItems(this.items.slice(this.items.length - this.oldItemsCount));
        A.append(B);
        this.oldItemsCount = 0;
        this.onShowOldItems(B)
    },
    render: function() {
        this._showNewItems();
        this._showOldItems()
    },
    isEmpty: function() {
        return this.items.length === 0
    },
    reachedTheEnd: function() {
        if (!this.noMoreOldItems) {
            this.noMoreOldItems = true;
            this.markStreamEnd();
            this.trigger("streamEnd")
        }
    },
    markStreamEnd: function() {
        if (this._alreadyMarkedEnd) {
            return
        }
        this._alreadyMarkedEnd = true;
        var A = this.isEmpty() ? this._getEmptyStreamComponent() : this._getStreamEndComponent();
        A.$node.appendTo(this.dom())
    },
    _showError: function(A) {
        var C = this;
        if (this._errorComponent) {
            this._errorComponent.destroy();
            delete this._errorComponent
        }
        var B = this._getStreamErrorComponent(A);
        B.bind("tryAgain",
        function(D) {
            B.destroy();
            delete C._errorComponent;
            C.getMoreOldItems()
        });
        this._errorComponent = B;
        B.$node.appendTo(this.dom())
    },
    _getStreamEndComponent: function() {
        return new twttr.components.StreamEnd(this._getStreamEndHtml())
    },
    _getEmptyStreamComponent: function() {
        return new twttr.components.StreamEnd(this._getEmptyStreamHtml())
    },
    _getStreamErrorComponent: function(A) {
        if (A === twttr.streams.DECIDER) {
            return new twttr.components.StreamEnd(this._getStreamErrorHtml(A))
        } else {
            return new twttr.components.StreamWhaleEnd(this._getStreamWhaleText())
        }
    },
    _getStreamWhaleText: function() {
        return _("Loading seems to be taking a while.")
    },
    _getEmptyStreamHtml: function() {},
    _getStreamEndHtml: function() {
        if (this.items.length < 20) {
            return ""
        } else {
            return _("<a href='#' class='back-to-top'>Back to top &uarr;</a>")
        }
    },
    _getStreamErrorHtml: function(A) {
        return _("This feature is temporarily unavailable.")
    },
    isLoadingMore: function() {
        var A = this.dom();
        if (A.find(".stream-loading").length === 0) {
            new twttr.views.StreamLoading().render(A, "append")
        }
    },
    stream_user_is_current_user: function() {
        return twttr.currentUser && this.screenName && twttr.currentUser.screenName === this.screenName
    },
    doneLoadingMore: function() {
        this.dom().find(".stream-loading").remove()
    },
    onShowNewItems: function() {},
    onShowOldItems: function() {}
});
twttr.aug(twttr.streams, {
    SUCCESS: 1,
    ERROR: 2,
    PROTECTED: 3,
    DECIDER: 4,
    WHALE: 5,
    TIMEOUT: 6
});
twttr.magic("twttr.scribbles", {
    logViewProfileDetails: function(D) {
        var C = $(this);
        var B = {};
        var A = $(D.target);
        if (A.is("img")) {
            B.target = "image"
        } else {
            if (A.is("a")) {
                B.target = "link"
            }
        }
        if (C.is(".dashboard .user-profile-link")) {
            B.component = "dashboard";
            if (C.is(".new-followers .user-profile-link")) {
                B.subcomponent = "new-followers"
            }
        } else {
            if (C.is(".details-pane .user-profile-link, .details-pane .twitter-atreply")) {
                B.component = "details-pane";
                if (C.is(".related-tweets .user-profile-link")) {
                    B.subcomponent = "related-tweets"
                }
            } else {
                if (C.is(".stream-tweet .user-profile-link, .stream-tweet .twitter-atreply")) {
                    B.component = "stream"
                } else {
                    if (C.is(".twttr-dialog .user-profile-link")) {
                        B.component = "dialog";
                        B.dialog_type = C.closest(".twttr-dialog").attr("type")
                    }
                }
            }
        }
        B.input = "click";
        B.tweet_id = C.closest(".tweet").attr("data-tweet-id") || "";
        B.user_id = C.attr("data-user-id");
        scribble("view-profile", B)
    }
});
twttr.klass("twttr.MessageThread",
function(B, A) {
    this.threadId = B;
    this.messages = A
});
twttr.klass("twttr.MessageManager",
function() {
    var A = this;
    this._fetchMessages(function() {
        A._sort();
        A.trigger("firstMessagesReceived")
    })
}).methods(twttr.EventProvider).methods({
    setupContinuousPoll: function() {
        var B = this;
        if (this._pollId) {
            return
        }
        if (this.threads) {
            A.call(this)
        } else {
            this.one("firstMessagesReceived",
            function() {
                A.call(B)
            })
        }
        function A() {
            this._pollInterval = 90000;
            this.bind("messagesArrived",
            function(D, C) {
                C.each(function(E) {
                    B.addMessage(E)
                })
            });
            this._pollId = setInterval((function(C) {
                return function() {
                    C._fetchMessages()
                }
            })(this), this._pollInterval)
        }
    },
    stopContinuousPoll: function() {
        if (this._pollId) {
            clearInterval(this._pollId);
            delete this._pollId
        }
    },
    getAllThreads: function(B) {
        var A = this;
        if (this.threads) {
            B(this.threads)
        } else {
            this.one("firstMessagesReceived",
            function() {
                B(A.threads)
            })
        }
    },
    getThread: function(C, B) {
        for (var A = 0; A < this.threads.length; A++) {
            if (this.threads[A].threadId === C) {
                return B(this.threads[A])
            }
        }
        return B()
    },
    addMessage: function(B) {
        var A = this;
        this.getThread(B.threadId,
        function(D) {
            if (D) {
                if (B.sender.screenName === twttr.currentUser.screenName) {
                    for (var F = 0, C = D.messages, E = C.length; F < E; F++) {
                        var G = C[F].id;
                        if (G < B.id) {
                            break
                        } else {
                            if (G === B.id) {
                                return
                            }
                        }
                    }
                }
                D.messages.unshift(B)
            } else {
                D = new twttr.MessageThread(B.threadId, [B]);
                A.threads.unshift(D)
            }
            A.trigger("updatedThread", [D, "prepend"]);
            A.trigger("newMessage." + B.threadId, [B])
        })
    },
    deleteMessage: function(A, C) {
        var B = this;
        this.getThread(C,
        function(E) {
            if (E) {
                for (var H = 0, D = E.messages, F = D.length; H < F; H++) {
                    if (D[H].id === A) {
                        var I = D.splice(H, 1)[0];
                        I.destroy({
                            error: function() {
                                B.addMessage(I)
                            },
                            success: function(J) {}
                        });
                        break
                    }
                }
                if (E.messages.length === 0) {
                    for (var G = 0; G < B.threads.length; G++) {
                        if (B.threads[G].threadId === C) {
                            B.threads.splice(G, 1);
                            break
                        }
                    }
                    B.trigger("deletedThread", [C])
                } else {
                    B.trigger("updatedThread", [E, "delete"])
                }
            }
            B.trigger("deletedMessage." + C, [A])
        })
    },
    _fetchMessages: function(G) {
        var D = this;
        var C = 0;
        function F() {
            C++;
            if (C === 2 && G) {
                G()
            }
        }
        var A;
        var E = {
            count: 50,
            success: function(H) {
                if (H.length() > 0) {
                    if (!D.receivedMessages) {
                        D.receivedMessages = H
                    } else {
                        D.receivedMessages.concat(H)
                    }
                    D.trigger("messagesArrived", [H]);
                    D._receivedSinceID = H.first().id
                }
                A = H;
                F()
            },
            cancel: function() {},
            error: function(I, H) {
                if (I.status === 502) {
                    H.retry()
                }
            }
        };
        if (D._receivedSinceID) {
            E.since_id = D._receivedSinceID
        }
        twttr.currentUser.receivedMessages(E);
        var B = {
            count: 50,
            success: function(H) {
                if (H.length() > 0) {
                    if (!D.sentMessages) {
                        D.sentMessages = H
                    } else {
                        D.sentMessages.concat(H)
                    }
                    D.trigger("messagesArrived", [H]);
                    D._sentSinceID = H.first().id
                }
                F()
            },
            cancel: function() {},
            error: function(I, H) {
                if (I.status === 502) {
                    H.retry()
                }
            }
        };
        if (D._sentSinceID) {
            B.since_id = D._sentSinceID
        }
        twttr.currentUser.sentMessages(B)
    },
    _sort: function() {
        this.allMessages = [];
        if (this.sentMessages) {
            this.allMessages = this.allMessages.concat(this.sentMessages.array)
        }
        if (this.receivedMessages) {
            this.allMessages = this.allMessages.concat(this.receivedMessages.array)
        }
        this.allMessages.sort(function(G, F) {
            return G.id > F.id ? -1: 1
        });
        var D = {};
        var E = [];
        for (var B = 0; B < this.allMessages.length; B++) {
            var C = this.allMessages[B],
            A = C.threadId;
            if (!D[A]) {
                D[A] = [];
                E.push(A)
            }
            D[A].push(C)
        }
        this.threads = [];
        for (var B = 0; B < E.length; B++) {
            this.threads.push(new twttr.MessageThread(E[B], D[E[B]]))
        }
    }
});
twttr.stream("twttr.streams.UserStream",
function(D, C) {
    var B = this;
    twttr.streams.Stream.apply(this, arguments);
    this.cursor = -1;
    var A = twttr.bind(this,
    function(E, F) {
        this.rerenderItem(E.id, E)
    });
    twttr.API.User.bind("follow",
    function(F, E) {
        A(E, true)
    });
    twttr.API.User.bind("unfollow",
    function(F, E) {
        A(E, false)
    });
    this.dom().delegate(".pending-request a", "click",
    function(F) {
        var E = B.getItemId($(this));
        twttr.API.User.find(E).unfollow({
            error: function(G) {
                twttr.showError(JSON.parse(G.reason).error)
            }
        });
        F.preventDefault()
    })
}).superclass(twttr.streams.Stream).methods({
    itemViewClass: "StreamUser",
    streamItemType: "user"
}).methods({
    onShowNewItems: function(A) {
        this.onShowItems(A)
    },
    onShowOldItems: function(A) {
        this.onShowItems(A)
    },
    onShowItems: function(A) {
        A.find(".follow-button").tipsy({
            gravity: "s",
            html: true,
            title: function() {
                var B = $(this).closest(".user-content-medium");
                var D = B.find(".protected-icon").length;
                var C = B.attr("data-screen-name");
                return D ? _("Send follow request to {{screenName}}", {
                    screenName: C
                }) : _("Follow {{screenName}}", {
                    screenName: C
                })
            }
        });
        A.find(".unfollow-button").tipsy({
            gravity: "s",
            html: true,
            title: function() {
                var B = $(this).closest(".user-content-medium").attr("data-screen-name");
                return _("Unfollow {{screenName}}", {
                    screenName: B
                })
            }
        });
        A.find(".pending-request").tipsy({
            gravity: "s",
            html: true,
            title: function() {
                var B = $(this).closest(".user-content-medium").attr("data-screen-name");
                return _("Follow request sent to {{screenName}}", {
                    screenName: B
                })
            }
        })
    },
    update: function(A) {},
    _fetchItems: function(A) {
        var B = this;
        if (!twttr.decider.isAvailable("people_streams") || (this.constructor._deciderKey && !twttr.decider.isAvailable(this.constructor._deciderKey))) {
            A(this, twttr.streams.DECIDER);
            return
        }
        this.update({
            cursor: B.cursor,
            success: function(D, C) {
                B.push(D.array);
                B.cursor = C.response.next_cursor;
                A(B, twttr.streams.SUCCESS);
                if (!B.cursor) {
                    B.reachedTheEnd()
                }
            },
            error: function(C) {
                if (C.status === 502) {
                    A(B, twttr.streams.WHALE)
                } else {
                    A(B, twttr.streams.ERROR)
                }
            },
            timeout: function(C) {
                C.retry()
            },
            cancel: function() {
                A(B, twttr.streams.TIMEOUT)
            }
        })
    },
    afterFirstSwitchingTo: function() {
        this.getMoreOldItems()
    }
});
twttr.stream("twttr.streams.PlaceUsers",
function(B, A) {
    twttr.streams.UserStream.apply(this, arguments)
}).superclass(twttr.streams.UserStream).methods({
    update: function(B) {
        var C = this;
        var A = B.success;
        B.rpp = 100;
        B.success = function(D, E) {
            var F = {};
            var G = [];
            D.each(function(H) {
                if (H.user && !(H.user.id in F) && (!C.params.onlyFollowing || H.user.following)) {
                    F[H.user.id] = true;
                    G.push(H.user)
                }
            });
            A(new twttr.anywhere.api.util.BaseCollection(G), E)
        };
        twttr.API.Status.search("place:" + this.params.placeId, B)
    },
    _getEmptyStreamHtml: function() {
        return this.params.onlyFollowing ? _("No recent tweets from people you follow.") : _("No recent tweets.")
    }
}).statics({
    _deciderKey: "place_users_stream"
});
twttr.stream("twttr.streams.Friends",
function(D, B) {
    twttr.streams.UserStream.apply(this, arguments);
    var A = this;
    function C(F) {
        var H = F ? 1: -1;
        var E = A.$node.parent().siblings(".stream-title").find("h2");
        var G = A._countString(parseInt(E.html().match(/\d+/)[0], 10) + H);
        E.html(G)
    }
    twttr.API.User.bind("follow.FriendsStream",
    function(F, E) {
        C(true)
    });
    twttr.API.User.bind("unfollow.FriendsStream",
    function(F, E) {
        C(false)
    })
}).superclass(twttr.streams.UserStream).methods({
    update: function(A) {
        twttr.API.User.find(this.screenName).friends(A)
    },
    _countString: function(A) {
        if (A === 1) {
            return _("You follow 1 person")
        } else {
            return _("You follow {{friendsCount}} people", {
                friendsCount: twttr.util.addCommas(A)
            })
        }
    },
    _setTitle: function(C) {
        if (this.stream_user_is_current_user()) {
            var A = twttr.currentUser.friendsCount;
            var B;
            C(this._countString(A))
        } else {
            twttr.API.User.find(this.screenName, twttr.bind(this,
            function(D) {
                var E;
                if (D.friendsCount === 1) {
                    E = _("{{username}} follows 1 person", {
                        username: this.screenName
                    })
                } else {
                    E = _("{{username}} follows {{friendsCount}} people", {
                        username: this.screenName,
                        friendsCount: twttr.util.addCommas(D.friendsCount)
                    })
                }
                C(E)
            }))
        }
    },
    _getEmptyStreamHtml: function() {
        if (this.stream_user_is_current_user()) {
            return _("You aren't following anyone yet.")
        } else {
            return _("@{{screen_name}} isn't following anyone yet.", {
                screen_name: this.screenName
            })
        }
    }
}).statics({
    _deciderKey: "people_stream_friends"
});
twttr.stream("twttr.streams.FollowerRequests",
function(B, A) {
    this.constructor.uber.constructor.apply(this, arguments)
}).superclass(twttr.streams.UserStream).methods({
    itemViewClass: "StreamFollowerRequest",
    streamItemType: "user",
    update: function(A) {
        twttr.currentUser.friends.pending(function(D, C) {
            var B = A.success;
            A.success = function(E) {
                B(E, C)
            };
            twttr.API.User.findAll(D, A)
        })
    },
    _setTitle: function(A) {
        A(_("Your pending follower requests"))
    },
    rerenderItem: function(C, B) {
        var A = this.itemViewClass;
        this.itemViewClass = "StreamUser";
        this.constructor.uber.rerenderItem.apply(this, arguments);
        this.itemViewClass = A
    }
}).statics({
    _deciderKey: "people_stream_follower_requests"
});
twttr.stream("twttr.streams.Followers",
function(B, A) {
    twttr.streams.UserStream.apply(this, arguments)
}).superclass(twttr.streams.UserStream).methods({
    update: function(A) {
        twttr.API.User.find(this.screenName).followers(A)
    },
    _setTitle: function(B) {
        if (this.stream_user_is_current_user()) {
            var A = _("Your {{followersCount}} followers", {
                followersCount: twttr.util.addCommas(twttr.currentUser.followersCount)
            });
            B(A)
        } else {
            twttr.API.User.find(this.screenName, twttr.bind(this,
            function(C) {
                var D = _("{{username}}'s {{followersCount}} followers", {
                    username: this.screenName,
                    followersCount: twttr.util.addCommas(C.followersCount)
                });
                B(D)
            }))
        }
    },
    _getEmptyStreamHtml: function() {
        if (this.stream_user_is_current_user()) {
            return _("You don't have any followers yet.")
        } else {
            return _("@{{screen_name}} doesn't have any followers yet.", {
                screen_name: this.screenName
            })
        }
    }
}).statics({
    _deciderKey: "people_stream_followers"
});
twttr.klass("twttr.streams.PeopleSearch",
function(B, A) {
    twttr.streams.UserStream.apply(this, arguments);
    this.query = B.query;
    this.page = 1
}).superclass(twttr.streams.UserStream).methods({
    scribeData: function() {
        return twttr.merge(twttr.streams.Stream.prototype.scribeData.apply(this), {
            name: "Search",
            query: this.params.query,
            type: "people"
        })
    },
    update: function(A) {
        twttr.API.User.search(this.query, A)
    },
    _fetchItems: function(A) {
        var B = this;
        this.update({
            page: this.page++,
            success: function(D, C) {
                if (D.length() === 0) {
                    B.reachedTheEnd()
                }
                B.push(D.array);
                A(B, twttr.streams.SUCCESS)
            }
        })
    },
    _getEmptyStreamHtml: function() {
        return _("No people results for <strong>{{query}}</strong>.", {
            query: this.params.query
        })
    },
    getStreamEndHtml: function() {
        return _("No more people results for <strong>{{query}}</strong>.", {
            query: this.params.query
        })
    }
}).statics({
    _deciderKey: "people_stream_people_search"
});
twttr.stream("twttr.streams.ListFollowers",
function(B, A) {
    twttr.streams.UserStream.apply(this, arguments)
}).superclass(twttr.streams.UserStream).methods({
    update: function(A) {
        var B = this;
        twttr.API.User.find(this.screenName).lists(function(C) {
            C.find(function(D) {
                return D.slug === B.params.listSlug
            }).followers(A)
        })
    },
    _setTitle: function(A) {
        A(_("People following this list"))
    }
}).statics({
    _deciderKey: "people_stream_list_followers"
});
twttr.stream("twttr.streams.ListMembers",
function(B, A) {
    twttr.streams.UserStream.apply(this, arguments)
}).superclass(twttr.streams.UserStream).methods({
    update: function(A) {
        var B = this;
        twttr.API.User.find(this.screenName).lists(function(C) {
            C.find(function(D) {
                return D.slug === B.params.listSlug
            }).members(A)
        })
    },
    _setTitle: function(A) {
        A(_("People this list follows"))
    }
}).statics({
    _deciderKey: "people_stream_list_members"
});
twttr.klass("twttr.streams.MessageStream",
function(B, A) {
    twttr.streams.Stream.apply(this, arguments)
}).superclass(twttr.streams.Stream).methods({
    itemViewClass: "MessageThreadPreview",
    streamItemType: "message_thread",
    streamItemId: function(A) {
        return A.threadId
    }
}).methods({
    _fetchItems: function(A) {
        var B = this;
        if (!twttr.decider.isAvailable("message_stream")) {
            A(this, twttr.streams.DECIDER);
            return
        }
        twttr.messageManager.getAllThreads(function(C) {
            B.push(C);
            A(B, twttr.streams.SUCCESS);
            B.reachedTheEnd()
        })
    },
    afterFirstSwitchingTo: function(A) {
        this.getMoreOldItems(A)
    },
    updateThread: function(A, D) {
        var C = this.$find(".stream-item[data-item-id=" + A.threadId + "]"),
        B = new twttr.views.MessageThreadPreview(A).html();
        if (!C.length) {
            C = new twttr.views.StreamItem({
                item_html: B,
                item_id: this.streamItemId(A),
                item_type: this.streamItemType
            }).$html()
        } else {
            C.find(".message-thread-preview").replaceWith(B)
        }
        if (D === "prepend") {
            this.dom().prepend(C)
        }
    },
    removeThread: function(B) {
        var A = this.$find(".stream-item[data-item-id=" + B + "]");
        if (A.hasClass("focused-stream-item")) {
            if (A.prev().length) {
                A.prev().focus()
            } else {
                if (A.next().length) {
                    A.next().focus()
                }
            }
        }
        A.remove()
    },
    _getEmptyStreamHtml: function() {
        return _("You can privately message someone on Twitter by sending a direct message.")
    }
});
twttr.klass.mixin("twttr.mixins.streamablePage",
function(A) {
    A.click({
        ".stream .tweet-actions": function(C, B) {
            C.stopPropagation();
            C.preventDefault();
            return false
        },
        ".details-pane .stream-item": function(F, B) {
            if ($(F.target).is(".twitter-timeline-link")) {
                return
            }
            var E = B.find(".tweet");
            var G = parseInt(E.attr("data-tweet-id"), 10);
            var C = {
                component: "details-pane"
            };
            if (B.is(".related-tweets .stream-item")) {
                C.subcomponent = "related-tweets"
            } else {
                if (B.is(".in-reply-to .stream-item")) {
                    C.subcomponent = "in-reply-to"
                }
            }
            C.embedded_media_types = E.find(".icons .media").map(function(H, I) {
                return I.getAttribute("data-media-type")
            }).get();
            var D = E.attr("data-impression-id");
            this.loadItemInDetailsPane(G, "tweet", {
                log: C,
                push: true,
                impressionId: D
            })
        },
        ".details-pane .user-detailed-list-item .user-screen-name": function(C, B) {
            var D = parseInt(B.attr("data-user-id"), 10);
            this.loadItemInDetailsPane(D, "user", {
                push: true
            });
            C.stopPropagation();
            C.preventDefault();
            return false
        },
        ".stream .stream-item": function(D, B) {
            var F = $(D.target).is(".stream-item a.tweet-timestamp, .stream-item a.tweet-timestamp *");
            var E = $(D.target).is(".stream-item a.twitter-timeline-link");
            var C = $(D.target).is(".stream-user-buttons *");
            if (F || E || C) {
                return
            }
            this.toggleFocus(B)
        },
        ".stream .user-profile-link, .stream .twitter-atreply, .details-pane .user-profile-link, .details-pane .twitter-atreply": function(F, B) {
            var E = twttr.helpers.getUserIdentifier(B);
            var C = {};
            if (B.is(".details-pane .user-profile-link, .details-pane .twitter-atreply")) {
                C.push = true
            }
            var D = B.closest(".promoted-tweet").attr("data-impression-id");
            if (B.is(".details-pane .user-profile-link, .stream .user-profile-link")) {
                C.impressionId = D
            } else {
                if (B.is(".stream .twitter-atreply, .details-pane .twitter-atreply")) {
                    if (D) {
                        twttr.API.Status.logUserMentionClick(D, B.text())
                    }
                }
            }
            this.loadItemInDetailsPane(E, "user", C);
            twttr.scribbles.logViewProfileDetails.call(B, F);
            F.stopPropagation();
            F.preventDefault();
            return false
        },
        ".stream .twitter-hashtag, .details-pane .twitter-hashtag": function(D, B) {
            var C = B.closest(".promoted-tweet").attr("data-impression-id");
            if (C) {
                twttr.API.Status.logHashtagClick(C, B.text())
            }
        },
        ".stream .twitter-timeline-link, .details-pane .twitter-timeline-link": function(D, B) {
            var C = B.closest(".promoted-tweet").attr("data-impression-id");
            if (C) {
                twttr.API.Status.logUrlClick(C, B.text())
            }
        },
        ".stream .twitter-listname": function(C, B) {
            twttr.router.routeTo(twttr.router.lookupAndNormalizeRoute($this.attr("href")));
            C.stopPropagation();
            C.preventDefault();
            return false
        },
        ".tweet-geo-text, .details-pane .geo_map_tweets_at_this_place_link": function(D, B) {
            var E = parseInt(B.attr("data-tweet-id"), 10);
            var C = {};
            if (B.is(".details-pane .geo_map_tweets_at_this_place_link")) {
                C.push = true
            }
            this.loadItemInDetailsPane(E, "tweet_geo", C);
            D.stopPropagation();
            D.preventDefault();
            return false
        },
        ".pane-toolbar a.pane-close": function(C, B) {
            this.unfocusStreamItem();
            C.stopPropagation();
            C.preventDefault();
            return false
        },
        ".pane-toolbar a.pane-back": function(C, B) {
            this.panes.pop();
            C.stopPropagation();
            C.preventDefault();
            return false
        }
    }).focus({
        ".stream .tweet-actions": function(C, B) {
            C.stopPropagation();
            return false
        }
    }).methods({
        _detailsPaneDisabled: function() {
            return ! twttr.decider.goodAtCss()
        },
        toggleFocus: function(B) {
            if (B.hasClass("focused-stream-item") && this.panes.size() <= 1) {
                this.streamManager.getCurrent().unfocusItem(B);
                this.unfocusStreamItem()
            } else {
                this.streamManager.getCurrent().focusItem(B);
                this.focusStreamItem(B)
            }
        },
        focusStreamItem: function(B) {
            B.addClass("focused-stream-item").siblings().removeClass("focused-stream-item").removeClass("light");
            var F,
            E = B.attr("data-item-type");
            if (E === "list" || E === "message_thread") {
                F = B.attr("data-item-id")
            } else {
                F = parseInt(B.attr("data-item-id"), 10)
            }
            var C = {
                component: "stream",
                page_number: this.streamManager.getCurrent()._page
            };
            var D = B.find(".tweet").attr("data-impression-id");
            if (E === "tweet") {
                C.embedded_media_types = B.find(".icons .media").map(function(G, H) {
                    return H.getAttribute("data-media-type")
                }).get()
            }
            B.addClass("focused-stream-item").siblings().removeClass("focused-stream-item");
            this.loadItemInDetailsPane(F, E, {
                log: C,
                impressionId: D
            })
        },
        unfocusStreamItem: function() {
            if (this.closeDetailsPane() !== false) {
                this.$node.find(".stream-item").removeClass("focused-stream-item")
            }
        },
        loadItemInDetailsPane: function(F, E, B) {
            var C = this,
            D = {},
            B = B || {};
            if (B.log) {
                twttr.merge(D, B.log)
            }
            if (E === "tweet") {
                this.loadTweetInDetailsPane(F, B);
                this.openDetailsPane();
                D.details_type = "tweet"
            } else {
                if (E === "user") {
                    this.loadUserInDetailsPane(F, B);
                    this.openDetailsPane();
                    D.details_type = "user"
                } else {
                    if (E === "tweet_geo") {
                        this.loadTweetGeoInDetailsPane(F, B);
                        this.openDetailsPane();
                        D.details_type = "tweet_geo"
                    } else {
                        if (E === "list") {
                            twttr.router.routeTo(twttr.router.lookupAndNormalizeRoute(F));
                            D.details_type = "list"
                        } else {
                            if (E === "message_thread") {
                                this.loadMessageThreadInDetailsPane(F, B);
                                this.resizeDetailsPane();
                                D.details_type = "message_thread"
                            }
                        }
                    }
                }
            }
            D.item_id = F;
            D.input = "click";
            scribble("load-details-pane", D)
        },
        loadTweetInDetailsPane: function(H, J) {
            var E = this,
            D = J.impressionId,
            I = "tweet_pane_" + H + (D ? "_" + D: ""),
            F = new twttr.views.DetailsPane(I),
            C = this.panes.cached(I);
            var G = J.push ? this.panes.push(F) : this.panes.reset(F);
            var B = G.$dom;
            if (!C) {
                twttr.API.Status.find(H,
                function(L) {
                    G._backLabel = _("@{{screen_name}}'s Tweet", {
                        screen_name: L.user.screenName
                    });
                    if (D) {
                        L = twttr.API.Status.getPromotedInstance(L, D);
                        twttr.API.Status.logShowDetails(D)
                    }
                    var K = new twttr.components.TweetPane(L);
                    K.bind("deleted",
                    function() {
                        if (E.panes.contains(G)) {
                            E.panes.remove(G);
                            E.panes.reset();
                            E.closeDetailsPane()
                        }
                    });
                    E.addComponentsToDetailsPane(B, [new twttr.components.InReplyTo(L), K, new twttr.components.Media(L, E.$find(".details-pane").width() - 40), new twttr.components.MachineTranslatedTweet(L), new twttr.components.TweetGeoSmall(L), new twttr.components.Retweeters(L), new twttr.components.MentionedInTweet(L), new twttr.components.RelatedTweets(L, E.streamManager.getCurrent())])
                })
            } else {
                B.find(".map_canvas:visible").trigger("refreshMap")
            }
        },
        loadUserInDetailsPane: function(G, K) {
            var E = "user_pane_by_id_";
            if (twttr.is.string(G)) {
                E = "user_pane_by_screen_name_"
            }
            var F = this,
            D = K.impressionId,
            J = E + G + (D ? "_" + D: ""),
            H = new twttr.views.DetailsPane(J),
            C = this.panes.cached(J);
            var I = K.push ? this.panes.push(H) : this.panes.reset(H);
            var B = I.$dom;
            if (!C) {
                twttr.ui.toggleSpinner(B, true);
                twttr.API.User.find(G, {
                    success: function(L) {
                        twttr.ui.toggleSpinner(B);
                        I._backLabel = _("@{{screen_name}}'s profile", {
                            screen_name: L.screenName
                        });
                        if (D) {
                            L = twttr.API.User.getPromotedInstance(L, D)
                        }
                        F.addComponentsToDetailsPane(B, [new twttr.components.ProfilePane(L), new twttr.components.RecentTweets(L)])
                    },
                    error: function(L) {
                        F.addComponentsToDetailsPane(B, [new twttr.components.NoUserExists()])
                    }
                })
            }
        },
        loadTweetGeoInDetailsPane: function(I, E) {
            var H = this,
            B = "tweet_geo_pane_" + I,
            D = new twttr.views.DetailsPane(B),
            F = this.panes.cached(B);
            var C = E.push ? this.panes.push(D) : this.panes.reset(D);
            var G = C.$dom;
            if (!F) {
                twttr.API.Status.find(I,
                function(K) {
                    C._backLabel = _("@{{screen_name}}'s Tweet location", {
                        screen_name: K.user.screenName
                    });
                    var J = [new twttr.components.TweetGeoBig(K)];
                    if (K.place && K.place.id) {
                        J.push(new twttr.components.PlaceTweets(K.place))
                    }
                    H.addComponentsToDetailsPane(G, J)
                })
            } else {
                G.find(".map_canvas:visible").trigger("refreshMap")
            }
        },
        loadMessageThreadInDetailsPane: function(E) {
            if (!twttr.loggedIn) {
                throw "Something went wrong.  You're not supposed to be able to load a message pane while logged out..."
            }
            var H = this,
            B = "message_thread_pane_" + E,
            D = new twttr.views.DetailsPane(B, {
                closable: false
            }),
            F = H.panes.cached(B),
            C = H.panes.reset(D),
            G = C.$dom;
            if (!F) {
                twttr.messageManager.getThread(E,
                function(I) {
                    var K = new twttr.components.SendMessageBox(E),
                    J = new twttr.components.MessageThread(I);
                    C._backLabel = _("Conversation with {{screen_name}}", {
                        screen_name: I.threadId
                    });
                    K.bind("sentMessage",
                    function(M, L) {
                        twttr.messageManager.addMessage(L)
                    });
                    K.$node.appendTo(G.find(".pane-toolbar"));
                    H.addComponentsToDetailsPane(G, [J])
                })
            }
        },
        focusStreamTab: function(B) {
            this.$node.find(".stream-tabs li.stream-tab-" + B).addClass("active").siblings().removeClass("active");
            this._activeTab = B;
            scribble("subnav", {
                item: B
            })
        },
        openDetailsPane: function() {
            if (this._detailsPaneDisabled()) {
                return false
            }
            var B = this.$node.find(".details-pane");
            if (!B.hasClass("opened")) {
                B.show();
                this._slideDetailsPaneTo(this.$node.find(".main-content").width());
                this.$node.find(".dashboard").hide();
                B.addClass("opened")
            }
            this.resizeDetailsPane()
        },
        _slideDetailsPaneTo: function(C, B) {
            this.$find(".details-pane")[Modernizr.csstransitions ? "animateWithCss": "animate"]({
                left: C
            },
            250, Modernizr.csstransitions ? "ease-out": "linear", B)
        },
        closeDetailsPane: function() {
            if (this._detailsPaneDisabled()) {
                return false
            }
            var B = this.$node.find(".details-pane");
            if (B.hasClass("opened")) {
                this.$node.find(".dashboard").show();
                this._slideDetailsPaneTo(0,
                function() {
                    $(this).hide()
                });
                B.removeClass("opened");
                scribble("close-details-pane", {
                    input: "click",
                    current_tweet_id: this.streamManager.getCurrent().focusedItemId
                })
            }
        },
        resizeDetailsPane: function() {
            var H = this.$find(".details-pane"),
            F = $("#page-outer"),
            D = parseInt(F.css("padding-top"), 10);
            if (H.length > 0) {
                var E = $("#page-container"),
                C = this.$find(".main-content"),
                J = $("#page-container").width(),
                B = C.width(),
                G = J - B,
                I = twttr.$win.height() - D,
                K = I - H[0].offsetTop - 8;
                C.css("min-height", I);
                H.height(K);
                H.width(G - 10);
                H.find(".pane-components").height(K - H.find(".inner-pane.active .pane-toolbar").outerHeight())
            }
            this.$find(".details-pane-outer").css("top", D)
        },
        repositionDetailsPane: function() {
            if (!twttr.decider.goodAtCss()) {
                return
            }
            var C = twttr.$win.width(),
            D = twttr.$win.scrollTop(),
            B = this.$find(".details-pane-outer");
            if (C < 1000) {
                B.addClass("tracking-vertically");
                B.css("margin-top", D)
            } else {
                B.removeClass("tracking-vertically");
                B.css("margin-top", null)
            }
        },
        addComponentToDetailsPane: function(D, C, B) {
            B = B || "append";
            D.find(".pane-components")[B](C.$node)
        },
        addComponentsToDetailsPane: function(D, C) {
            for (var B = 0; B < C.length; B++) {
                this.addComponentToDetailsPane(D, C[B])
            }
        },
        onListFollowingChange: function(C) {
            var B = new twttr.views.StreamList(C);
            this.$node.find(".stream-item[data-item-id=/" + C.user.screenName + "/" + C.slug + "]").html(B.html())
        }
    }).addViewData(function() {
        var B = {};
        B["active_tab_" + this._activeTab] = 1;
        return B
    }).addAfterRender(function() {
        this.resizeDetailsPane();
        if (!this.streamManager) {
            this.streamManager = new twttr.streams.StreamManager();
            this.streamManager.bind("newItemsCountChanged", twttr.bind(this,
            function(C, B) {
                this.hasNewItems(B)
            }));
            this.streamManager.bind("notFound", twttr.bind(this,
            function(B) {
                this.trigger("notFound")
            }));
            this.streamManager.bind("switchTo", twttr.bind(this,
            function(B) {
                this.closeDetailsPane()
            }))
        }
        this.streamManager.$node.appendTo(this.$node.find(".stream-manager"));
        this.panes = new twttr.ViewStack(this.$node.find(".details-pane"), "append")
    }).addOnSwitchAway(function() {
        if (this.streamManager) {
            this.streamManager.onSwitchAway()
        }
    }).addOnSwitchTo(function() {
        this.resizeDetailsPane()
    }).keydown({
        f: function(B) {
            if ($(B.target).is(":not(input)")) {
                B.preventDefault();
                var C = this.streamManager.getCurrent();
                if (!C.focusedItemId) {
                    return
                }
                C.tweetActionFavorite(C.getCurrentlyFocusedItem().find(".tweet"), "keyboard")
            }
        },
        r: function(B) {
            if ($(B.target).is(":not(input)")) {
                B.preventDefault();
                var C = this.streamManager.getCurrent();
                if (!C.focusedItemId) {
                    return
                }
                C.tweetActionReply(C.getCurrentlyFocusedItem().find(".tweet"), "keyboard")
            }
        },
        t: function(B) {
            if ($(B.target).is(":not(input)")) {
                B.preventDefault();
                var C = this.streamManager.getCurrent();
                if (!C.focusedItemId) {
                    return
                }
                C.tweetActionRetweet(C.getCurrentlyFocusedItem().find(".tweet"), "keyboard")
            }
        }
    }).keypress({
        "return": function(C) {
            var D = this.streamManager.getCurrent();
            C.preventDefault();
            var B = this.$find(".stream-item[data-item-id=" + D.highlightedItemId + "]");
            this.toggleFocus(B)
        },
        period: function(B) {
            twttr.$win.scrollTop(0);
            var C = this.streamManager.getCurrent();
            C.fetchTweets(twttr.bind(this,
            function(F) {
                var D = F.newItemsCount;
                if (F.newItemsCount > 0) {
                    F._showNewItems();
                    F.restartFetcher()
                }
                var E = F.getFirstItem();
                F.highlightItem(E);
                F.scrollStreamTo(E)
            }))
        }
    }).keypress({
        k: function(B) {
            this.streamManager.getCurrent().highlightPrevious();
            B.preventDefault()
        },
        j: function(B) {
            this.streamManager.getCurrent().highlightNext();
            B.preventDefault()
        }
    });
    return A
});
twttr.klass.mixin("twttr.mixins.userActionable",
function(A) {
    A.methods({
        _doUserActionAndUpadateView: function(E, B, F, G) {
            G = G || [];
            var D = this;
            var C = twttr.helpers.getUserIdentifier(B);
            G.push({});
            twttr.API.User.find(C,
            function(H) {
                H[F].apply(H, G)
            });
            E.stopPropagation();
            return false
        }
    }).click({
        ".follow-button, .follow-action": function(C, B) {
            return this._doUserActionAndUpadateView(C, B, "follow")
        },
        ".unfollow-link, .unfollow-action, .unfollow-button": function(C, B) {
            return this._doUserActionAndUpadateView(C, B, "unfollow")
        },
        ".deny-follower-action": function(D, B) {
            var C = parseInt(B.closest(".stream-item").attr("data-item-id"), 10);
            twttr.currentUser.friends.deny(C,
            function(E) {
                B.closest(".stream-item").remove()
            });
            D.stopImmediatePropagation();
            return false
        },
        ".accept-follower-action": function(D, B) {
            var C = parseInt(B.closest(".stream-item").attr("data-item-id"), 10);
            twttr.currentUser.friends.accept(C,
            function(E) {
                new twttr.views.StreamUser(E).render(B.closest(".user-content-medium"), "replaceWith")
            });
            D.stopImmediatePropagation();
            return false
        }
    }).addAfterRender(function() {
        var B = twttr.bind(this,
        function(C, D) {
            var E = this;
            twttr.API.User.find(C,
            function(F) {
                F.data("following", D);
                F.data("recently_followed", D);
                var G;
                if ((G = E.$find(".user-small-list-item[data-user-id=" + F.id + "]")).size()) {
                    G.replaceWith(new twttr.views.UserSmallListItem(F).html())
                } else {
                    if ((G = E.$find(".user-detailed-list-item[data-user-id=" + F.id + "]")).size()) {
                        G.replaceWith(new twttr.views.UserDetailedListItem(F).html())
                    }
                }
                F.data("recently_followed", null)
            })
        });
        twttr.API.User.bind("follow", {
            before: function(F, E) {
                var D = E.requestParameters[0];
                var C = D.user_id;
                B(C, true)
            },
            error: function(G, C, F) {
                var E = F.requestParameters[0],
                D = E.user_id;
                B(D, false)
            }
        });
        twttr.API.User.bind("unfollow", {
            before: function(F, E) {
                var D = E.requestParameters[0];
                var C = D.user_id;
                B(C, false)
            },
            error: function(G, C, F) {
                var E = F.requestParameters[0],
                D = E.user_id;
                B(D, true)
            }
        })
    });
    return A
});
twttr.klass.mixin("twttr.mixins.listActionable",
function(A) {
    A.methods({
        listDeleted: function() {},
        listUpdated: function() {},
        _setListFollowing: function(B, F, E) {
            var D = E ? "subscribe": "unsubscribe";
            var C = this;
            twttr.API.User.find(B,
            function(G) {
                G.lists.find(F,
                function(H) {
                    H[D]({
                        success: function() {
                            H.following = E;
                            H.attributes.following = E;
                            C.onListFollowingChange(H)
                        },
                        error: function() {
                            twttr.showError(_("There was an error " + (E ? "": "un") + "subscribing to the list"));
                            H.following = !E;
                            H.attributes.following = !E;
                            C.onListFollowingChange(H)
                        }
                    })
                })
            })
        },
        unfollowList: function(B, C) {
            this._setListFollowing(B, C, false)
        },
        followList: function(B, C) {
            this._setListFollowing(B, C, true)
        },
        onListFollowingChange: function() {}
    }).click({
        ".stream .list-action-button": function(E, B) {
            var D = this;
            var C = twttr.helpers.getUserIdentifier(B);
            if (B.attr("data-opened")) {
                return
            }
            B.attr("data-opened", true);
            twttr.API.User.find(C,
            function(F) {
                twttr.viewHelpers.openListDropDown(F, B,
                function(G) {
                    G.render(B, "after", {
                        id: F.id,
                        key: "lists"
                    }).open()
                })
            });
            E.stopPropagation();
            return false
        },
        ".delete-list-button": function(C, B) {
            new twttr.widget.Prompt({
                modal: true,
                template: {
                    title: _("Are you sure you want to delete this list?")
                },
                callback: function(D) {
                    if (D) {
                        twttr.currentUser.lists.find(parseInt(B.attr("data-list-id"), 10),
                        function(E) {
                            twttr.app.currentPage().listDeleted(E);
                            E.destroy({
                                error: function() {
                                    twttr.showError(_("There was an error deleting the list"))
                                },
                                success: function() {
                                    twttr.app.currentPage().listDeleted(E)
                                }
                            })
                        })
                    }
                }
            }).open();
            C.stopPropagation();
            return false
        },
        ".edit-list-button": function(C, B) {
            twttr.currentUser.lists.find(parseInt(B.attr("data-list-id"), 10),
            function(D) {
                new twttr.widget.ListDialog({
                    list: D,
                    onSuccess: function() {
                        twttr.app.currentPage().listUpdated()
                    }
                }).open()
            });
            C.stopPropagation();
            return false
        },
        ".unfollow-list-button, .unfollow-list-link, .unfollow-list-action": function(C, B) {
            this.unfollowList(B.attr("data-screen-name"), B.attr("data-list-id"));
            C.stopPropagation();
            return false
        },
        ".follow-list-button, .follow-list-action": function(C, B) {
            this.followList(B.attr("data-screen-name"), B.attr("data-list-id"));
            C.stopPropagation();
            return false
        }
    });
    return A
});
twttr.klass.mixin("twttr.mixins.tweetActionable",
function(A) {
    A.methods({
        deletedTweetCacheDuration: 1000 * 60 * 10,
        _updateTweetDisplay: function(D, C) {
            var B = this;
            if (C === "delete") {
                twttr.showMessage(_("Your tweet has been deleted."));
                B.onTweetActionDelete(D)
            } else {
                twttr.API.Status.find(D,
                function(H) {
                    var E = B.$find(".tweet[data-tweet-id=" + D + "]");
                    switch (C) {
                    case "favorite":
                        H.sync("favorited", true);
                        E.addClass("tweet-favorited");
                        break;
                    case "unfavorite":
                        H.sync("favorited", false);
                        E.removeClass("tweet-favorited");
                        break;
                    case "retweet":
                        H.sync("current_user_retweet", true);
                        E.addClass("tweet-retweeted");
                        break;
                    case "unretweet":
                        H.sync("current_user_retweet", false);
                        E.removeClass("tweet-retweeted");
                        break;
                    case "hide":
                        B.onTweetActionHide(D);
                        break;
                    case "show":
                        B.onTweetActionShow(D);
                        break
                    }
                    var F = new twttr.views.TweetDogear(H),
                    G = new twttr.views.TweetActions(H);
                    if (C === "unretweet") {
                        F.retweeted = false;
                        G.retweeted = false
                    }
                    E.find(".tweet-dogear").replaceWith(F.html());
                    E.find(".tweet-actions").replaceWith(G.html())
                })
            }
        },
        onTweetActionDelete: function(B) {
            this.$find(".tweet[data-tweet-id=" + B + "]").remove()
        },
        onTweetActionHide: function(B) {
            this.$find(".tweet[data-tweet-id=" + B + "]").hide()
        },
        onTweetActionShow: function(B) {
            this.$find(".tweet[data-tweet-id=" + B + "]").show()
        },
        getTweetId: function(B) {
            return parseInt(B.attr("data-tweet-id"), 10)
        },
        getScreenName: function(B) {
            return B.attr("data-screen-name")
        },
        getImpressionId: function(B) {
            return B.attr("data-impression-id")
        },
        getScribeComponent: function(B) {
            return B.is(".tweet-pane .tweet") ? "details-pane": B.is(".stream .tweet") ? "stream": "generic-component"
        },
        tweetActionFavorite: function(E, B) {
            if (!E || E.length === 0) {
                return
            }
            var F = this.getTweetId(E),
            D = E.hasClass("tweet-favorited"),
            G = D ? "unfavorite": "favorite",
            C = this.getImpressionId(E);
            twttr.API.Status[G](F, {
                impression_id: C,
                cacheOptions: {
                    skipOverwrite: true
                }
            });
            scribble("favorite-tweet", {
                input: B,
                tweet_id: F,
                favorited: !D,
                component: this.getScribeComponent(E)
            })
        },
        tweetActionRetweet: function(H, D) {
            if (!H || H.length === 0) {
                return
            }
            var I = this.getTweetId(H),
            G = this.getScreenName(H),
            F = this.getImpressionId(H),
            C = H.hasClass("tweet-retweeted"),
            E = this.getScribeComponent(H);
            if (G === twttr.currentUser.screenName || H.find(".protected-icon").length) {
                return
            }
            if (C) {
                var B = H.attr("data-my-retweet-id");
                if (B) {
                    twttr.API.Status.unretweet(B)
                }
            } else {
                twttr.dialogs.retweet(I,
                function(J) {
                    if (J) {
                        twttr.API.Status.retweet(I, {
                            impression_id: F
                        });
                        scribble("tweet", {
                            tweet_type: "retweet",
                            origin: "tweet-action-retweet",
                            input: D,
                            component: E
                        })
                    }
                }).open()
            }
            scribble("retweet-tweet-opened", {
                input: D,
                tweet_id: I,
                component: E
            })
        },
        tweetActionReply: function(F, B) {
            if (!F || F.length === 0) {
                return
            }
            var G = this.getTweetId(F),
            E = this.getImpressionId(F),
            D = F.attr("data-screen-name"),
            C = this.getScribeComponent(F);
            twttr.dialogs.reply({
                $tweet: F,
                tweetId: G,
                impressionId: E,
                screenName: D,
                origin: "tweet-action-reply",
                input: B,
                component: C
            }).open();
            scribble("reply-to-tweet-opened", {
                input: B,
                tweet_id: G,
                component: C
            })
        },
        tweetActionDelete: function(D, B) {
            var C = this;
            if (!D || D.length === 0) {
                return
            }
            var E = this.getTweetId(D),
            D = D.closest(".stream-item");
            new twttr.widget.Prompt({
                template: {
                    title: _("Are you sure you want to delete this tweet?")
                },
                callback: function(F) {
                    if (F) {
                        twttr.API.Status.find(E).destroy(function() {
                            twttr.app.caches.deletedTweets.set(E, true, C.deletedTweetCacheDuration)
                        })
                    }
                }
            }).open();
            scribble("delete-tweet-opened", {
                input: B,
                tweet_id: E,
                component: this.getScribeComponent(D)
            })
        },
        _registerTweetActionAPIListeners: function() {
            var B = this;
            twttr.API.Status.bind("favorite", {
                before: function(D, C) {
                    var E = C.requestParameters[0];
                    B._updateTweetDisplay(E, "favorite")
                },
                error: function(E, C, D) {
                    var F = D.requestParameters[0];
                    B._updateTweetDisplay(F, "unfavorite");
                    twttr.showError(_("Whoops, we couldn't favorite that Tweet."))
                }
            });
            twttr.API.Status.bind("unfavorite", {
                before: function(D, C) {
                    var E = C.requestParameters[0];
                    B._updateTweetDisplay(E, "unfavorite")
                },
                error: function(E, C, D) {
                    var F = D.requestParameters[0];
                    B._updateTweetDisplay(F, "favorite");
                    twttr.showError(_("Whoops, we couldn't unfavorite that Tweet."))
                }
            });
            twttr.API.Status.bind("retweet", {
                before: function(D, C) {
                    var E = C.requestParameters[0];
                    B._updateTweetDisplay(E, "retweet")
                },
                error: function(E, C, D) {
                    var F = D.requestParameters[0];
                    B._updateTweetDisplay(F, "unretweet");
                    twttr.showError(_("Whoops, we couldn't retweet that Tweet."))
                },
                success: function(E, D) {
                    var C = D.retweetingStatus.id,
                    F = D.id;
                    D.sync("current_user_retweet", {
                        id: C
                    });
                    B.$find(".tweet[data-tweet-id=" + F + "]").attr("data-my-retweet-id", C)
                }
            });
            twttr.API.Status.bind("unretweet", {
                before: function(F, E) {
                    var C = E.requestParameters[0].id;
                    var D = B.$find(".tweet[data-my-retweet-id=" + C + "]");
                    var G = D.attr("data-tweet-id");
                    B._updateTweetDisplay(G, "unretweet")
                },
                error: function(G, D, F) {
                    var C = F.requestParameters[0].id;
                    var E = B.$find(".tweet[data-my-retweet-id=" + C + "]");
                    var H = E.attr("data-tweet-id");
                    B._updateTweetDisplay(H, "retweet")
                },
                success: function(F, D, E) {
                    var G = D.id;
                    var C = D.retweetingStatus.id;
                    B._updateTweetDisplay(G, "unretweet");
                    B.$find(".tweet[data-tweet-id=" + G + "]").attr("data-my-retweet-id", null)
                }
            });
            twttr.API.Status.bind("delete", {
                before: function(D, C) {
                    var E = C.requestParameters[0].id;
                    B._updateTweetDisplay(E, "hide")
                },
                error: function(E, C, D) {
                    var F = D.requestParameters[0].id;
                    B._updateTweetDisplay(F, "show")
                },
                success: function(E, C, D) {
                    var F = C.id;
                    B._updateTweetDisplay(F, "delete")
                }
            })
        },
        registerTweetActionEvents: function() {
            var B = this;
            this.$node.delegate(".tweet-actions .favorite-action, .tweet-actions .unfavorite-action", "click",
            function(C) {
                B.tweetActionFavorite($(this).closest(".tweet"), "click");
                C.preventDefault();
                C.stopPropagation();
                return false
            });
            this.$node.delegate(".tweet-actions .reply-action", "click",
            function(C) {
                B.tweetActionReply($(this).closest(".tweet"), "click");
                C.preventDefault();
                C.stopPropagation();
                return false
            });
            this.$node.delegate(".tweet-actions .delete-action", "click",
            function(C) {
                B.tweetActionDelete($(this).closest(".tweet"), "click");
                C.preventDefault();
                C.stopPropagation();
                return false
            });
            this.$node.delegate(".tweet-actions .retweet-action, .tweet-actions .unretweet-action", "click",
            function(C) {
                B.tweetActionRetweet($(this).closest(".tweet"), "click");
                C.preventDefault();
                C.stopPropagation();
                return false
            });
            this._registerTweetActionAPIListeners()
        }
    });
    return A
});
twttr.klass.mixin("twttr.mixins.whoToFollowHelper",
function(A) {
    A.methods({
        isWTFAvailable: function(B) {
            if (twttr.loggedIn) {
                return B ? twttr.decider.isAvailable("whotofollow_similarities") : twttr.decider.isAvailable("whotofollow_recommendations")
            } else {
                return twttr.decider.isAvailable("whotofollow_logged_out_similarities")
            }
        },
        trackImpressions: function(F, B, C, E) {
            var D = F.map(function(G, H) {
                return G.id
            });
            if (E) {
                this.currentRecommendations = this.currentRecommendations.map(function(H, G) {
                    if (H == E) {
                        return D.first()
                    } else {
                        return H
                    }
                })
            } else {
                this.currentRecommendations = D
            }
            C = C || {};
            scribe($.extend(this.mergeProfileId({
                event_name: B,
                recommended_users: D.array,
                recommended_users_count: F.length(),
                token: this.feedbackToken
            }), C), "whotofollow")
        },
        mergeProfileId: function(B) {
            if (this.screenName) {
                $.extend(B, {
                    to_user_id: twttr.profileUser.id
                })
            }
            return B
        },
        recsToUsers: function(C) {
            var B = this;
            if (C.length()) {
                this.feedbackToken = C.first().token
            }
            return C.map(function(G, F) {
                G.user.attributes.dismissable = !B.screenName || twttr.currentUser.id == twttr.profileUser.id;
                var D = "";
                if (G.attributes.connections && G.attributes.connections.length > 0) {
                    var E = G.attributes.connections.length;
                    D = '<span title="' + twttr.map(G.attributes.connections,
                    function(H, I) {
                        return "@" + H.screen_name
                    }).join(", ") + '">' + _("{{usersCount}} in common", {
                        usersCount: (E >= 10) ? "10+": "" + E
                    }) + "</span>"
                }
                G.user.attributes.socialcontext = D;
                return G.user
            })
        },
        fetch: function(B) {
            if (this.screenName) {
                twttr.profileUser.similarUsers(B)
            } else {
                twttr.currentUser.recommendedUsers(B)
            }
        },
        attachWTFProfileEvents: function(B, D) {
            var C = this;
            D.delegate(".user-small-list-item .user-screen-name, .user-small-list-item .user-thumb", "click",
            function(H) {
                var F = $(this).closest(".user-small-list-item"),
                G = F.attr("data-user-id"),
                E = C.mergeProfileId({
                    rating: 6,
                    recommended_user_id: G,
                    token: C.feedbackToken
                });
                twttr.API.UserRecommendation.rate(E);
                scribe($.extend({
                    event_name: B
                },
                E), "whotofollow");
                scribble("view-profile", {
                    profile_user_id: G,
                    component: "dashboard",
                    subcomponent: "who-to-follow",
                    target: $(H.target).is("a") ? "link": "image"
                })
            })
        },
        attachWTFFollowEvents: function(B, D) {
            var C = this;
            D.delegate(".user-follow-link", "click",
            function(H) {
                var F = $(this).closest(".user-small-list-item"),
                G = F.attr("data-user-id"),
                E = C.mergeProfileId({
                    rating: 1,
                    recommended_user_id: G,
                    token: C.feedbackToken
                });
                twttr.API.UserRecommendation.rate(E);
                scribe($.extend({
                    event_name: B
                },
                E), "whotofollow");
                scribble("follow-user", {
                    profile_user_id: G,
                    component: "dashboard",
                    subcomponent: "who-to-follow"
                })
            })
        },
        attachWTFDismissEvents: function(B, D) {
            var C = this;
            D.delegate(".user-small-list-item .dismiss", "click",
            function(K) {
                var J = $(this).closest(".user-small-list-item");
                var E = parseInt(J.attr("data-user-id"));
                J.animate({
                    opacity: 0
                },
                300);
                var G = function(L) {
                    if (L && L.length()) {
                        var O = C.recsToUsers(L);
                        var N = O.first();
                        if (N) {
                            var M = $((new twttr.views.UserSmallListItem(N)).html());
                            C.trackImpressions(O, B, I, E);
                            M.css({
                                opacity: 0
                            });
                            J.replaceWith(M);
                            M.animate({
                                opacity: 1
                            },
                            300)
                        }
                    } else {
                        J.fadeOut(200,
                        function() {
                            J.animate({
                                height: 1
                            },
                            100, null,
                            function() {
                                J.remove();
                                if (C.$find("ul.recommended-followers > li.user-small-list-item").length == 0) {
                                    C.trigger("notRendered", "noMoreRecommendations");
                                    C.$node.empty()
                                }
                            })
                        })
                    }
                };
                var I = C.mergeProfileId({
                    excluded: C.currentRecommendations.join(","),
                    success: G,
                    error: F
                });
                var H = twttr.merge({
                    user_id: I.to_user_id
                },
                I);
                var F = function() {
                    twttr.showError(_("Whoops! Something went wrong. Please try again!"));
                    J.css({
                        opacity: 1
                    })
                };
                if (J.hasClass("following")) {
                    C.fetch(twttr.merge(H, {
                        limit: 1
                    }))
                } else {
                    twttr.API.UserRecommendation.hide(E, C.feedbackToken, H)
                }
            })
        },
        attachWTFHideEvents: function() {
            var B = this;
            this.$find(".profile-actions > .dismiss").click(function() {
                B.$find(".wtf-dropdown").fadeOut(300)
            })
        }
    })
});
twttr.klass("twttr.Editor",
function(A, B) {
    var D = this;
    $(A).addClass("twttr-editor");
    this.options = B || {};
    this._ghostText = this.options.ghostText || "";
    this._defaultContent = this.options.defaultContent || "";
    var C = this.options.width || "100%",
    F = this.options.height || "auto";
    this.$editor = $("<textarea/>").css({
        width: C,
        height: F
    }).addClass("twitter-anywhere-tweet-box-editor").val(this._defaultContent);
    var E = $(A);
    if (this.options.condensed) {
        E.addClass("condensed")
    }
    E.html(this.$editor);
    this._registerEvents()
}).methods(twttr.EventProvider).methods({
    content: function() {
        return this.$editor.val()
    },
    setContent: function(B) {
        this.$editor.val(B);
        var A = this.content();
        this.trigger("didChangeContent", [A, A.length])
    },
    height: function(A) {
        this.$editor.css("height", A)
    },
    width: function(A) {
        this.$editor.css("width", A)
    },
    focus: function() {
        this.$editor.focus()
    },
    blur: function() {
        this.$editor.blur()
    },
    toggle: function() {
        this.$editor.toggle()
    },
    _registerEvents: function() {
        var B = this;
        this.$editor.bind("focus blur",
        function(C) {
            B.trigger(C.type, Array.prototype.slice.call(arguments, 1))
        });
        this.$editor.bind("keyup",
        function(C) {
            C.stopPropagation()
        });
        this.$editor.bind("keydown keypress",
        function(C) {
            C.stopPropagation();
            switch (C.keyCode) {
            case 9:
                C.preventDefault();
                B.trigger("blurFromTab", [C]);
                break;
            case 27:
                C.preventDefault();
                B.trigger("blurFromEscape");
                break
            }
        });
        var A = "change " + ($.browser.mozilla ? "paste input": "keyup");
        this.$editor.bind(A,
        function(D) {
            var C = B.content();
            B.trigger("didChangeContent", [C, C.length])
        })
    }
});
var TwitterText = (function() {
    function A(F, D) {
        var H = document.createElement("div");
        var C = $.makeArray(F.childNodes);
        $.each(C,
        function(I, J) {
            A(J, D)
        });
        if (F.nodeType == 3) {
            if (!F.nodeValue.match(D)) {
                return
            }
            var B = F.nodeValue.replace(D, "<strong>$1</strong>");
            H.innerHTML = B;
            var G = F.parentNode;
            var E = H.lastChild;
            G.replaceChild(E, F);
            while (H.firstChild) {
                G.insertBefore(H.firstChild, E)
            }
        }
    }
    return {
        textHighlight: function() {
            var B = {};
            var D = /\"|\'|(?:\bOR\b)|(?:\bAND\b)/g;
            var C = function(F) {
                if (B[F]) {
                    return B[F]
                }
                F = F.replace(D, "");
                var G = F.split(/\s+/);
                var E = G.join("|");
                E += "|" + G.join("");
                B[F] = new RegExp("(" + E + ")", "gi");
                return B[F]
            };
            return function(F, G) {
                var E = C(G);
                A(F, E)
            }
        } ()
    }
} ());
/*
 * linkify - v0.3 - 6/27/2009
 * http://benalman.com/code/test/js-linkify/
 *
 * Copyright (c) 2009 "Cowboy" Ben Alman
 * Licensed under the MIT license
 * http://benalman.com/about/license/
 *
 * Some regexps adapted from http://userscripts.org/scripts/review/7122
 */
 (function() {
    var B = (function() {
        var J = "[a-z\\d-]+://",
        L = "(?:(?:[0-9]|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:[0-9]|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])",
        K = "(?:(?:[^\\s!@#$%^&*()_=+[\\]{}\\\\|;:'\",.<>/?]+)\\.)+",
        R = "(?:ac|ad|aero|ae|af|ag|ai|al|am|an|ao|aq|arpa|ar|asia|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|biz|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|cat|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|coop|com|co|cr|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|edu|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gov|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|info|int|in|io|iq|ir|is|it|je|jm|jobs|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mil|mk|ml|mm|mn|mobi|mo|mp|mq|mr|ms|mt|museum|mu|mv|mw|mx|my|mz|name|na|nc|net|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|org|pa|pe|pf|pg|ph|pk|pl|pm|pn|pro|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tel|tf|tg|th|tj|tk|tl|tm|tn|to|tp|travel|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|xn--0zwm56d|xn--11b5bs3a9aj6g|xn--80akhbyknj4f|xn--9t4b11yi5a|xn--deba0ad|xn--g6w251d|xn--hgbk6aj7f53bba|xn--hlcj6aya9esc7a|xn--jxalpdlp|xn--kgbechtv|xn--zckzah|ye|yt|yu|za|zm|zw)",
        G = "(?:" + K + R + "|" + L + ")",
        S = "(?:[;/][^#?<>\\s]*)?",
        H = "(?:\\?[^#<>\\s]*)?(?:#[^<>\\s]*)?",
        I = "\\b" + J + G + "(?:/[a-z0-9!*'\\(\\);:=+$/%#\\[\\]\\-_,~@\\.\\?]+)?",
        F = "\\b" + G + S + H + "(?!\\w)",
        Q = "mailto:",
        M = "(?:" + Q + ")?[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@" + G + H + "(?!\\w)",
        E = new RegExp("(?:" + I + "|" + F + "|" + M + ")", "ig"),
        O = new RegExp("^" + J, "i"),
        P = {
            "'": "`",
            ">": "<",
            ")": "(",
            "]": "[",
            "}": "{",
            "Ã‚Â»": "Ã‚Â«",
            "Ã¢â‚¬Âº": "Ã¢â‚¬Â¹"
        },
        N = {
            callback: function(W, T, U) {
                U = U || {};
                var V = U.nofollow ? 'rel="nofollow"': "";
                return T ? '<a class="twitter-timeline-link" target="_blank" ' + V + '" href="' + h(T) + '" title="' + h(T) + '">' + h(W) + "</a>": W
            },
            punct_regexp: /(?:[!?.,:;'"]|(?:&|&amp;)(?:lt|gt|quot|apos|raquo|laquo|rsaquo|lsaquo);)$/
        };
        return function(Z, k) {
            k = k || {};
            var b,
            Y,
            d,
            U,
            a = "",
            X = [],
            W,
            j,
            g,
            T,
            V,
            f,
            e,
            c;
            for (Y in N) {
                if (k[Y] === undefined) {
                    k[Y] = N[Y]
                }
            }
            while (b = E.exec(Z)) {
                d = b[0];
                j = E.lastIndex;
                g = j - d.length;
                if (/[\/:]/.test(Z.charAt(g - 1))) {
                    continue
                }
                do {
                    T = d;
                    c = d.substr( - 1);
                    e = P[c];
                    if (e) {
                        V = d.match(new RegExp("\\" + e + "(?!$)", "g"));
                        f = d.match(new RegExp("\\" + c, "g"));
                        if ((V ? V.length: 0) < (f ? f.length: 0)) {
                            d = d.substr(0, d.length - 1);
                            j--
                        }
                    }
                    if (k.punct_regexp) {
                        d = d.replace(k.punct_regexp,
                        function(i) {
                            j -= i.length;
                            return ""
                        })
                    }
                }
                while (d.length && d !== T);
                U = d;
                if (!O.test(U)) {
                    U = (U.indexOf("@") !== -1 ? (!U.indexOf(Q) ? "": Q) : !U.indexOf("irc.") ? "irc://": !U.indexOf("ftp.") ? "ftp://": "http://") + U
                }
                if (W != g) {
                    X.push([Z.slice(W, g)]);
                    W = j
                }
                X.push([d, U, {
                    nofollow: k.nofollow
                }])
            }
            X.push([Z.substr(W)]);
            for (Y = 0; Y < X.length; Y++) {
                a += k.callback.apply(window, X[Y])
            }
            return a || Z
        }
    })();
    var D = "Ã€ÃÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃÃŽÃÃÃ‘Ã’Ã“Ã”Ã•Ã–Ã˜Ã™ÃšÃ›ÃœÃÃžÃŸÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾\\303\\277",
    C = "[A-Z0-9_" + D + "]",
    A = new RegExp("(^|\\s+)(#|ï¼ƒ)([0-9A-Z_]*[A-Z_]+" + C + "*)", "ig");
    twttr.aug(twttr.util, {
        linkify: (function() {
            function F(J, I) {
                return B(J, I)
            }
            function E(I) {
                return I.replace(/\B([@ï¼ ](?:<[^>]+>)?)(?![a-zA-Z0-9_]{1,20}\/)([a-zA-Z0-9_]{1,20}(?![\/]))/g,
                function(J, K, L) {
                    return K + '<a target="_blank" class="twitter-atreply" data-screen-name="' + L + '" href="/' + L + '">' + L + "</a>"
                })
            }
            function G(I) {
                return I.replace(/\B([@ï¼ ](?:<[^>]+>)?)([a-zA-Z0-9_]{1,20}\/[a-zA-Z0-9_-]+)/g,
                function(J, L, K) {
                    return L + '<a target="_blank" class="twitter-listname" href="/' + K + '">' + K + "</a>"
                })
            }
            function H(I) {
                return I.replace(A,
                function(J, L, K, M) {
                    return L + '<a target="_blank" class="twitter-hashtag" href="/#search/%23' + M + '">' + K + M + "</a>"
                })
            }
            return function(J, I) {
                return E(G(H(F(J, I))))
            }
        } ()),
        queryHighlight: function(E, G) {
            var F = G.replace(/<[^>]+>/g, "");
            return twttr.util.hitHighlight(G, twttr.util.highlightIndices(E, F))
        },
        escapeRegExpChars: (function() {
            var E = "\\/{}|()[]?.*:^$";
            specialCharsMatcher = new RegExp("((\\" + E.split("").join(")|(\\") + "))", "gi");
            return function(F) {
                return F.replace(specialCharsMatcher,
                function(G, H) {
                    return "\\" + H
                })
            }
        } ()),
        highlightIndices: function(G, J) {
            G = twttr.util.escapeRegExpChars(G);
            var H = G.split(/\s+/);
            var I = [];
            var E = "(" + H.join(")|(") + ")";
            var F = new RegExp("(^|\\b|\\W)(" + E + ")\\b", "gi");
            J.replace(F,
            function(K, M, L) {
                var N = arguments[arguments.length - 2] + M.length;
                I.push([N, N + L.length])
            });
            return I
        },
        hitHighlight: function(P, R, G) {
            var S = "span class='query-token'";
            R = R || [];
            G = G || {};
            if (R.length === 0) {
                return P
            }
            var Z = G.tag || S,
            Q = ["<" + Z + ">", "</" + Z + ">"],
            a = P.split("<"),
            b,
            O = [],
            T,
            V,
            U;
            for (V = 0; V < a.length; V += 1) {
                T = a[V];
                if (!T) {
                    O.push("")
                } else {
                    b = T.split(">");
                    for (U = 0; U < b.length; U += 1) {
                        O.push(b[U])
                    }
                }
            }
            var M = "",
            Y = 0,
            N = O[0],
            E = 0,
            J = 0,
            K = false,
            F = N,
            H = [],
            I,
            W,
            c,
            X,
            L;
            for (V = 0; V < R.length; V += 1) {
                for (U = 0; U < R[V].length; U += 1) {
                    H.push(R[V][U])
                }
            }
            for (I = 0; I < H.length; I += 1) {
                W = H[I];
                c = Q[I % 2];
                X = false;
                while (N != null && W >= E + N.length) {
                    M += F.slice(J);
                    if (K && W === E + F.length) {
                        M += c;
                        X = true
                    }
                    if (O[Y + 1]) {
                        M += "<" + O[Y + 1] + ">"
                    }
                    E += F.length;
                    J = 0;
                    Y += 2;
                    N = O[Y];
                    F = N;
                    K = false
                }
                if (!X && N != null) {
                    L = W - E;
                    M += F.slice(J, L) + c;
                    J = L;
                    if (I % 2 === 0) {
                        K = true
                    }
                }
            }
            if (N != null) {
                if (J < F.length) {
                    M += F.slice(J)
                }
                for (I = Y + 1; I < O.length; I += 1) {
                    M += (I % 2 === 0 ? O[I] : "<" + O[I] + ">")
                }
            }
            return M
        }
    })
} ()); (function() {
    twttr.setup = function() {
        if (twttr.currentUser) {
            twttr.caches.User = new twttr.caches.local.User(twttr.currentUser.screenName)
        }
        if (twttr.onNotice) {
            twttr.showMessage(twttr.onNotice);
            delete twttr.onNotice
        }
        twttr.app.init();
        twttr.$win = $(window);
        twttr.$doc = $(document);
        twttr["interface"].setup();
        twttr.loadBar();
        twttr.search.setup();
        twttr.API.globalEvents.bind("rate_limited",
        function(C) {
            twttr.showMessage(_("Sorry! You've hit your hourly usage limit. Try again soon."))
        });
        if ($(".welcome-banner-outer").length > 0) {
            var B = twttr.banners.welcomeToPhoenix();
            B.bind("closed",
            function() {
                $.cookie("phx_seen_banner", true, {
                    expires: 365
                })
            });
            $(".welcome-banner-outer").remove();
            B.insert()
        }
        if (!$.cookie("phx_seen_dialog") && twttr.decider.isAvailable("phoenix_first_time")) {
            var A = twttr.dialogs.firstTime();
            A.bind("close",
            function() {
                $.cookie("phx_seen_dialog", true, {
                    expires: 365
                })
            });
            A.open()
        }
        twttr.router.bind("routed",
        function(D, C) {
            twttr.$win.scrollTop(0)
        });
        twttr.router.bind("urlChanged",
        function(D, C) {
            twttr.trackPageView(C.name)
        });
        twttr.router.bind("routeNotFound",
        function() {
            twttr.app.switchToPage("404").notFound()
        });
        twttr.router.startRouting();
        if (twttr.decider.isAvailable("infinite_scroll")) {
            twttr.$win.bind("scroll",
            function(E) {
                var D = twttr.app.currentPage(),
                C;
                if (twttr.widget.Dialog.currentModal) {
                    return
                }
                if (Math.abs(twttr.$win.scrollTop() + twttr.$win.height() - twttr.$doc.height()) < 500) {
                    C = D.streamManager;
                    if (C) {
                        C.getMoreOldItems(function(F) {
                            scribble("stream-scrolled", {
                                page: F._page,
                                stream: F._cacheKey,
                                focused_tweet_id: F.focusedItemId || ""
                            })
                        })
                    }
                }
                if (D.repositionDetailsPane) {
                    D.repositionDetailsPane()
                }
            })
        }
        twttr.$win.bind("resize",
        function(D) {
            var C = twttr.app.currentPage();
            if (C && C.resizeDetailsPane) {
                C.resizeDetailsPane()
            }
        }); (function() {
            var C = 0;
            function D() {
                var G = +new Date;
                var F = twttr.app.currentPage().$find("._timestamp[data-time$=" + C + "000]").each(function() {
                    var I = $(this),
                    H = parseInt(I.attr("data-time"), 10);
                    if (G - H > 86400000) {
                        I.removeClass("_timestamp").addClass("_old-timestamp")
                    } else {
                        var J = twttr.helpers.timeAgo(H, JSON.parse(I.attr("data-long-form") || "false"), JSON.parse(I.attr("data-include-sec") || "false"));
                        if (J !== I.text()) {
                            I.text(J)
                        }
                    }
                });
                var E = +new Date - G;
                C++;
                C %= 10;
                setTimeout(D, 2000)
            }
            setTimeout(D, 2000)
        } ());
        twttr.API.User.bind("follow",
        function(D, C) {
            twttr.currentUser.sync("friendsCount", ++twttr.currentUser.friendsCount);
            twttr.widget.Autocomplete.getAutocompletedUsers(function() {
                twttr.widget.Autocomplete.addToList([C.id, C.screenName, C.name, C.profileImageUrl])
            })
        });
        twttr.API.User.bind("unfollow",
        function(D, C) {
            twttr.currentUser.sync("friendsCount", Math.max(--twttr.currentUser.friendsCount, 0))
        })
    };
    twttr.showError = function(A) {
        twttr.openMessageDrawer(A, "error")
    };
    twttr.showMessage = function(B) {
        var A = twttr.openMessageDrawer(B, "message", {
            close_button: false
        });
        if (A) {
            setTimeout(function() {
                A.$dom.css("opacity", 1).animate({
                    opacity: 0
                },
                1000,
                function() {
                    A.$dom.remove();
                    twttr.views.MessageDrawer.isOpen = false
                })
            },
            2000)
        }
    }; (function() {
        var A = {
            close_button: true
        };
        twttr.openMessageDrawer = function(E, D, C) {
            C = twttr.merge({},
            A, C || {});
            C.text = E;
            C.type = D;
            twttr.views.MessageDrawer.close();
            var B = new twttr.views.MessageDrawer(C);
            B.render("#message-drawer", "append");
            twttr.views.MessageDrawer.isOpen = true;
            return B
        }
    } ());
    twttr.messageNotification = function(C) {
        var A = new twttr.views.MessageNotification({
            message: C.attributes
        }),
        E = C.senderScreenName,
        B = C.id;
        $("#message-notifications").append(A.$html());
        var D = $("#message-notifications [data-message-id=" + B + "].notification");
        D.bind("click",
        function() {
            var G = $(this);
            G.unbind();
            G.find(".message-notification-reply-box").show();
            var F = new twttr.Editor("#message-notifications [data-message-id=" + B + "].notification  .message-notification-reply-editor",
            function() {
                var H = this;
                this.focus();
                this.height(36);
                $("#message-notifications [data-message-id=" + B + "].notification .message-notification-reply-button").click(function() {
                    D.html("Sent!");
                    setTimeout(function() {
                        D.remove()
                    },
                    2000);
                    twttr.API.DirectMessage.send(E, H.content())
                })
            })
        })
    };
    twttr.loadBar = function() {
        $("#global-nav a").each(function() {
            $(this).attr("href", twttr.router.lookupAndNormalizeRoute($(this).attr("href")))
        });
        if (twttr.loggedIn) {
            $("#global-nav").delegate("a", "mousedown",
            function(B) {
                var A = $(this);
                scribble("globalnav", {
                    input: "click",
                    name: A.text(),
                    href: A.attr("href")
                })
            })
        }
    };
    twttr.logMe = function(A) {
        console.log("%o", A)
    };
    twttr.logCollection = function(A) {
        A.each(logMe)
    };
    twttr.provide("twttr.ui");
    twttr.ui.toggleSpinner = function(B, A) {
        if (A) {
            var C = $('<div class="loading-spinner"><img src="/phoenix/img/loader.gif" alt="' + _("Loading") + '"/></div>').appendTo(B)
        } else {
            $(B).find("div.loading-spinner").remove()
        }
    }
} ()); (function() {
    twttr.provide("twttr.users");
    twttr.users.autocompleted = [];
    twttr.aug(twttr.util, {
        leven: function(I, G) {
            var E,
            F;
            var A = I.length;
            var B = G.length;
            if (!A) {
                return B
            }
            if (!B) {
                return A
            }
            var H = [];
            for (var D = 0; D <= A; D++) {
                H[D] = [];
                H[D][0] = D
            }
            for (var C = 0; C <= B; C++) {
                H[0][C] = C
            }
            for (var D = 1; D <= A; D++) {
                E = I.charAt(D - 1);
                for (var C = 1; C <= B; C++) {
                    H[D][C] = Math.min(H[D - 1][C] + 1, H[D][C - 1] + 1, H[D - 1][C - 1] + (E == G.charAt(C - 1) ? 0: 1))
                }
            }
            return H[A][B]
        }
    });
    twttr.klass("twttr.widget.Autocomplete",
    function(B) {
        var A = {
            limit: 5,
            textarea: false,
            preselect: true
        };
        this.options = twttr.merge({},
        A, B);
        this.limit = this.options.limit;
        this.$input = $(this.options.input);
        this.$container = $('<ul class="autocomplete-container"></ul>').insertAfter(this.options.input);
        this._isCompletionsOpen = false;
        if (twttr.decider.isAvailable("phoenix_autocomplete") || twttr.util.params().autocomplete) {
            this.registerEvents()
        }
    }).statics({
        cache: {},
        regCache: new twttr.CacheProvider,
        hashtagCache: {},
        _isCompletionsOpen: false,
        nextCursor: -1,
        cursorCount: 0,
        requestedUsers: false,
        getAutocompletedUsers: function(D) {
            var B = this;
            if (twttr.decider.isAvailable("phoenix_autocomplete") || twttr.util.params().autocomplete) {
                function C(E) {
                    return twttr.map(E,
                    function(F, G) {
                        return [F.id, F.screenName, F.name, F.profileImageUrl]
                    })
                }
                if (!this.requestedUsers) {
                    this.requestedUsers = true;
                    var A = twttr.caches.User.get("autocomplete_friends");
                    if (A) {
                        twttr.users.autocompleted = A;
                        if (D) {
                            D()
                        }
                    } else { (function() {
                            twttr.widget.Autocomplete.addToList([twttr.currentUser.id, twttr.currentUser.screenName, twttr.currentUser.name, twttr.currentUser.profileImageUrl]);
                            function E(F) {
                                if (++B.cursorCount <= 5) {
                                    twttr.currentUser.friends({
                                        count: 100,
                                        cursor: F,
                                        success: twttr.bind(B,
                                        function(H, G) {
                                            twttr.widget.Autocomplete.invalidateCache();
                                            if (H.isEmpty()) {
                                                if (D) {
                                                    D()
                                                }
                                                return
                                            }
                                            H = C(H.toArray());
                                            twttr.users.autocompleted.push.apply(twttr.users.autocompleted, H);
                                            twttr.widget.Autocomplete.resetStorageCache();
                                            if (G.response.next_cursor) {
                                                E(G.response.next_cursor)
                                            } else {
                                                if (D) {
                                                    D()
                                                }
                                            }
                                        })
                                    })
                                } else {
                                    if (D) {
                                        D()
                                    }
                                }
                            }
                            E(twttr.widget.Autocomplete.nextCursor)
                        } ())
                    }
                } else {
                    if (D) {
                        D()
                    }
                }
            }
        }
    }).methods(twttr.EventProvider).statics({
        username: /^[@ï¼ ]([a-zA-Z0-9_]{1,20})/,
        hashtag: /^[#ï¼ƒ]([a-zA-Z0-9_]+)/,
        transformAvatar: /(.+)(?:_normal)\.(\w+)$/,
        spaceBoundary: /\s|$/,
        startsWithAt: /^[@ï¼ ]/,
        wordEnd: /\S+$/,
        nonWords: /\W/gi,
        _matchesContiguously: function(B, E) {
            var D = twttr.widget.Autocomplete;
            var A = D._matchesContiguouslyCaches.matchers = D._matchesContiguouslyCaches.matchers || {};
            var C = D._matchesContiguouslyCaches.results = D._matchesContiguouslyCaches.results || {};
            if (C[B] && C[B][E] !== undefined) {
                return C[B][E]
            }
            A[B] = A[B] || new RegExp("^" + B, "i");
            C[B] = C[B] || {};
            C[B][E] = A[B].test(E.replace(/\W/, ""));
            return C[B][E]
        },
        _matchesConsecutively: function(B, E) {
            var D = twttr.widget.Autocomplete;
            var A = D._matchesConsecutivelyCaches.matchers = D._matchesConsecutivelyCaches.matchers || {};
            var C = D._matchesConsecutivelyCaches.results = D._matchesConsecutivelyCaches.results || {};
            if (C[B] && C[B][E] !== undefined) {
                return C[B][E]
            }
            A[B] = A[B] || new RegExp(B.split("").join(".*"), "i");
            C[B] = C[B] || {};
            C[B][E] = A[B].test(E);
            return C[B][E]
        },
        levenSorter: function(B, A) {
            var D = twttr.widget.Autocomplete._currentPrefix;
            var E = twttr.util.leven(B, D);
            var C = twttr.util.leven(A, D);
            if (E < C) {
                return - 1
            } else {
                if (E > C) {
                    return 1
                } else {
                    return 0
                }
            }
        },
        sorter: function(G, E) {
            var I = twttr.widget.Autocomplete._matchesContiguously;
            var D = twttr.widget.Autocomplete._matchesConsecutively;
            var F = twttr.widget.Autocomplete._currentPrefix;
            var B = twttr.util.leven(G[1], F),
            C = twttr.util.leven(E[1], F),
            A = twttr.util.leven(G[2], F),
            H = twttr.util.leven(E[2], F);
            if (I(F, G[1]) && !I(F, E[1])) {
                return - 1
            }
            if (!I(F, G[1]) && I(F, E[1])) {
                return 1
            }
            if (I(F, G[2]) && !I(F, E[2])) {
                return - 1
            }
            if (!I(F, G[2]) && I(F, E[2])) {
                return 1
            }
            if (D(F, G[1]) && !D(F, E[1])) {
                return - 1
            }
            if (!D(F, G[1]) && D(F, E[1])) {
                return 1
            }
            if (D(F, G[2]) && !D(F, E[2])) {
                return - 1
            }
            if (!D(F, G[2]) && D(F, E[2])) {
                return 1
            }
            if (B < C) {
                return - 1
            } else {
                if (B > C) {
                    return 1
                }
            }
            if (A < H) {
                return - 1
            } else {
                if (A > H) {
                    return 1
                }
            }
            return 0
        }
    }).statics({
        _matchesContiguouslyCaches: {
            results: {},
            matchers: {}
        },
        _matchesConsecutivelyCaches: {
            results: {},
            matchers: {}
        }
    }).statics({
        invalidateCache: function(C) {
            if (!C) {
                this.cache = {};
                twttr.widget.Autocomplete._matchesConsecutivelyCaches.results = {};
                twttr.widget.Autocomplete._matchesConsecutivelyCaches.matchers = {};
                twttr.widget.Autocomplete._matchesContiguouslyCaches.results = {};
                twttr.widget.Autocomplete._matchesContiguouslyCaches.matchers = {};
                return
            }
            var A = "";
            C = C.split("");
            for (var B = C.length - 1; B >= 0; B--) {
                A += C.shift();
                delete this.cache[A];
                delete twttr.widget.Autocomplete._matchesConsecutivelyCaches.results[A];
                delete twttr.widget.Autocomplete._matchesConsecutivelyCaches.matchers[A];
                delete twttr.widget.Autocomplete._matchesContiguouslyCaches.results[A];
                delete twttr.widget.Autocomplete._matchesContiguouslyCaches.matchers[A]
            }
        },
        resetStorageCache: function() {
            var B = [];
            var C = 0;
            twttr.users.autocompleted.sort(function(F, E) {
                if (F[0] < E[0]) {
                    return - 1
                } else {
                    if (F[0] > E[0]) {
                        return 1
                    }
                }
                return 0
            });
            for (var D = 0, A = twttr.users.autocompleted.length; D < A; D++) {
                if (twttr.users.autocompleted[D + 1] && twttr.users.autocompleted[D][0] == twttr.users.autocompleted[D + 1][0]) {
                    continue
                }
                B[C++] = twttr.users.autocompleted[D]
            }
            twttr.users.autocompleted = B;
            twttr.caches.User.set("autocomplete_friends", twttr.users.autocompleted, 60 * 60 * 24 * 3 * 1000)
        },
        addToList: function(C) {
            var B = false;
            for (var D = 0, A = twttr.users.autocompleted.length; D < A; ++D) {
                if (twttr.users.autocompleted[D][1] === C[1]) {
                    B = true;
                    break
                }
            }
            if (!B) {
                twttr.users.autocompleted.push(C)
            }
            twttr.widget.Autocomplete.invalidateCache(C[1]);
            this.resetStorageCache()
        }
    }).methods({
        registerEvents: function() {
            var B = this;
            this.$input.bind("blur", twttr.bind(this,
            function(C) {
                setTimeout(twttr.bind(this,
                function() {
                    this.hide()
                }), 1000)
            }));
            twttr.widget.Dialog.bind("close", twttr.bind(this,
            function() {
                this.hide()
            }));
            var A = "keypress" + ($.browser.webkit || $.browser.msie ? " keydown": "");
            this.$input.bind("keyup click", twttr.bind(this, this.keyup));
            this.$input.bind(A, twttr.bind(this, this.keypress));
            this.$container.bind("click", twttr.bind(this,
            function(C) {
                if ($(C.target).hasClass("twttr-follow-notice")) {
                    return
                }
                this.select();
                this.$input.focus()
            }));
            this.$input.bind("keydown",
            function(C) {
                C.stopPropagation()
            });
            this.$container.delegate("li[data-user-id]", "mouseenter",
            function(C) {
                B.$container.find("li.selected").removeClass("selected");
                $(this).addClass("selected")
            });
            this.position()
        },
        getCaret: function() {
            var D = this.$input[0];
            var E = 0;
            if (document.selection) {
                D.focus();
                var B = document.selection.createRange();
                if (B == null) {
                    return 0
                }
                var A = D.createTextRange(),
                C = A.duplicate();
                A.moveToBookmark(B.getBookmark());
                C.setEndPoint("EndToStart", A);
                E = C.text.length
            } else {
                if (D.selectionStart || D.selectionStart == "0") {
                    E = D.selectionStart
                }
            }
            return E
        },
        getCurrentWord: function(G) {
            var D = this.getCurrentText();
            var F = D.slice(0, G);
            var B = D.slice(G, D.length);
            var H = D.charAt(G - 1);
            if (!H || H === " ") {
                return ""
            }
            this.leftBoundary = F.search(this.constructor.wordEnd);
            var C = F.slice(this.leftBoundary, F.length);
            var A = B.slice(0, B.search(this.constructor.spaceBoundary));
            var E = C.concat(A);
            this.rightBoundary = this.leftBoundary + E.length;
            return E
        },
        getCurrentText: function() {
            return this.$input.val()
        },
        replaceCurrentWord: function(B) {
            var E = this.getCurrentText().split("");
            this.oldValueArray = E;
            var D = E.slice(0, this.leftBoundary);
            var A = E.slice(this.rightBoundary, E.length);
            var C = (D.join("") + B).length + 2;
            return {
                value: D.join("") + B + " " + A.join(""),
                cursor: C
            }
        },
        setCaretPosition: function(C) {
            var B = this.$input[0];
            if (B.setSelectionRange) {
                B.focus();
                B.setSelectionRange(C, C)
            } else {
                if (B.createTextRange) {
                    var A = B.createTextRange();
                    A.collapse(true);
                    A.moveEnd("character", C);
                    A.moveStart("character", C);
                    A.select()
                }
            }
        },
        set: function(B) {
            if (this.options.textarea) {
                var A = this.replaceCurrentWord(B);
                this.$input.val(A.value);
                this.setCaretPosition(A.cursor)
            } else {
                this.$input.val(B)
            }
        },
        hide: function() {
            setTimeout(twttr.bind(this,
            function() {
                this.$container.css("visibility", "hidden");
                this._isCompletionsOpen = false;
                this.constructor._isCompletionsOpen = false
            }), 0)
        },
        show: function() {
            this.$container.css("visibility", "visible");
            this.constructor._isCompletionsOpen = true;
            this._isCompletionsOpen = true
        },
        keypress: function(A) {
            A.stopPropagation();
            switch (A.keyCode) {
            case 9:
            case 13:
            case 27:
                if (this._isCompletionsOpen) {
                    A.preventDefault()
                }
                break;
            case 38:
                if (this._isCompletionsOpen) {
                    this.previous();
                    A.preventDefault()
                }
                break;
            case 40:
                if (this._isCompletionsOpen) {
                    this.next();
                    A.preventDefault()
                }
                break
            }
        },
        keyup: function(A) {
            A.stopPropagation();
            if (A && (A.keyCode === 9 || A.keyCode === 16) && !this._isCompletionsOpen) {
                return
            }
            var B;
            if (this.options.textarea) {
                B = this.getCurrentWord(this.getCaret());
                if (B.match(this.constructor.username)) {
                    B = RegExp.$1;
                    this.autocompleteType = "username"
                } else {
                    if (B.match(this.constructor.hashtag)) {
                        B = RegExp.$1;
                        this.autocompleteType = "hashtag"
                    } else {
                        this.hide();
                        return
                    }
                }
            } else {
                this.autocompleteType = "username";
                B = this.$input.val()
            }
            if (B.length > 0) {
                switch (A.keyCode) {
                case 27:
                    this.hide();
                    A.stopPropagation();
                    break;
                case 38:
                case 40:
                    break;
                case 9:
                case 13:
                    if (!A.shiftKey && this._isCompletionsOpen) {
                        this.select()
                    }
                    break;
                default:
                    if (this.autocompleteType == "hashtag") {
                        this.lookUpHashtag(B)
                    } else {
                        this.lookUpUser(B)
                    }
                    break
                }
            } else {
                this.hide()
            }
        },
        select: function() {
            var D = this.$container.find("li.selected");
            var E = D.find("b").text();
            var A = D.find("img").attr("src");
            this.set(E);
            this.hide();
            if (this.autocompleteType === "username") {
                var C = D.attr("data-user-screenname");
                var B = D.attr("data-user-id");
                this.trigger("select", [this.autocompleteType, E, A, C, B])
            } else {
                this.trigger("select", [this.autocompleteType, E, A])
            }
        },
        sanitize: function(A) {
            this.constructor._currentPrefix = A.replace(this.constructor.nonWords, "");
            return this.constructor._currentPrefix
        },
        appendNotice: function(A) {
            if (twttr.currentUser && twttr.currentUser.friendsCount > 500) {
                A += '<li class="twttr-follow-notice">' + _("<em>Showing most recent 500 you're following</em>") + "</li>"
            }
            return A
        },
        lookUpHashtag: function(F) {
            var D = this;
            F = this.sanitize(F);
            var C = this.constructor.hashtagCache[F];
            if (C) {
                this.$container.html(C);
                this.$container.find("li:first").addClass("selected");
                this.show();
                return
            }
            var G = function(H) {
                if (H.match(D.regexPrefix)) {
                    return H
                }
            };
            var A = twttr.merge({},
            this.getFilteredResults(F, twttr.suggestedHashtags, G, this.constructor.levenSorter), true);
            var B = this.getItemTemplate(A,
            function(I, H) {
                return '<li class="hashtag-completion"><b>#' + I.replace(H, "<strong>$1</strong>") + "</b></li>"
            }).slice(0, this.limit);
            if (B.length > 0) {
                var E = B.join("");
                this.constructor.hashtagCache[F] = E;
                this.$container.html(E);
                this.$container.find("li:first").addClass("selected");
                this.show()
            } else {
                this.hide()
            }
        },
        lookUpUser: function(F) {
            var D = this;
            F = this.sanitize(F);
            var C = this.constructor.cache[F];
            if (C) {
                C = this.appendNotice(C);
                this.$container.html(C);
                if (this.options.preselect) {
                    this.$container.find("li:first").addClass("selected")
                }
                this.show();
                return
            }
            var G = function(H) {
                if (H[1].match(D.regexPrefix)) {
                    return H
                } else {
                    if (H[2].replace(D.constructor.nonWords, "").match(D.regexPrefix)) {
                        return H
                    }
                }
            };
            var A = twttr.merge({},
            this.getFilteredResults(F, twttr.users.autocompleted, G, this.constructor.sorter), true);
            var B = this.getItemTemplate(A,
            function(H, J) {
                var I = H[3].replace(D.constructor.transformAvatar, "$1_mini.$2");
                return '<li data-user-id="' + H[0] + '" data-user-screenname="' + H[1] + '"><img src="' + I + '"/> <span><b>@' + H[1].replace(J, "<strong>$1</strong>") + "</b> <em>" + h(H[2]).replace(J, "<strong>$1</strong>") + "</em></span></li>"
            }).slice(0, this.limit);
            if (B.length > 0) {
                var E = B.join("");
                this.constructor.cache[F] = E;
                E = this.appendNotice(E);
                this.$container.html(E);
                if (this.options.preselect) {
                    this.$container.find("li:first").addClass("selected")
                }
                this.show()
            } else {
                this.hide()
            }
        },
        position: function() {
            setTimeout(twttr.bind(this,
            function() {
                var B = Math.round(this.$input.position().top + this.$input.innerHeight() + 1),
                A = Math.round(this.$input.position().left);
                this.$container.css({
                    top: B,
                    left: A
                })
            }), 10);
            this.$container.css({
                width: this.$input.innerWidth()
            })
        },
        getItemTemplate: function(B, C) {
            var A = new RegExp("(" + this.constructor._currentPrefix.split("").join("|") + ")", "gi");
            return twttr.batchObject(B, twttr.bind(this,
            function(E, D) {
                return C(D, A)
            }))
        },
        getFilteredResults: function(B, E, G, J) {
            var C = this;
            var I;
            var F = this.constructor.regCache.get(B);
            if (F) {
                this.regexPrefix = F
            } else {
                var H = B.split("");
                var A = "^" + H.join("\\w*");
                this.regexPrefix = new RegExp(A, "i");
                this.constructor.regCache.set(B, this.regexPrefix)
            }
            var D = twttr.filter(E, G);
            return D.sort(J)
        },
        next: function() {
            var A = this.$container.find("li.selected");
            if (!A.length) {
                this.$container.find("li[data-user-id]:first").addClass("selected");
                return
            }
            A = A.removeClass("selected").next("li[data-user-id]");
            if (A.length) {
                A.addClass("selected")
            } else {
                this.$container.find("li:first").addClass("selected")
            }
        },
        previous: function() {
            var A = this.$container.find("li.selected");
            if (!A.length) {
                this.$container.find("li[data-user-id]:last").addClass("selected");
                return
            }
            A = A.removeClass("selected").prev("li[data-user-id]");
            if (A.length) {
                A.addClass("selected")
            } else {
                if (twttr.currentUser && twttr.currentUser.friendsCount > 500) {
                    this.$container.find("li:last").prev("li[data-user-id]").addClass("selected")
                } else {
                    this.$container.find("li:last").addClass("selected")
                }
            }
        }
    })
} ()); (function(A) {
    A.search = {
        setup: function() {
            var D = this;
            this.$searchQuery = $("#search-query");
            if (!Modernizr.input.placeholder) {
                var C = this.$searchQuery.attr("placeholder");
                var B = false;
                this.$searchQuery.focus(function() {
                    if (B) {
                        $(this).val("");
                        B = false
                    }
                    $(this).addClass("focused");
                    this.select()
                }).blur(function() {
                    if (!B && D.$searchQuery.val() === "") {
                        B = true;
                        D.$searchQuery.val(C)
                    }
                    $(this).removeClass("focused")
                });
                if (!this.$searchQuery[0].hasFocus) {
                    this.$searchQuery.blur()
                } else {
                    this.$searchQuery.addClass("focused")
                }
            }
        },
        clear: function() {
            this.$searchQuery.focus().val("").blur()
        },
        doSearch: function(B) {
            if (!this.$searchQuery[0].hasFocus) {
                this.$searchQuery.focus()
            }
            if (B) {
                this.$searchQuery.val(B)
            }
            B = this.$searchQuery.val();
            this.$searchQuery.blur();
            if (B) {
                A.router.routeTo(A.router.searchResultsPath({
                    query: B
                }))
            }
        }
    }
} (twttr));
twttr.helpers = {
    timeWords: {
        longForm: {
            singular: {
                now: "now",
                seconds: "{{one}} second ago",
                minutes: "{{one}} minute ago",
                hours: "{{one}} hour ago",
                days: "{{one}} day ago"
            },
            plural: {
                now: "now",
                seconds: "{{plural_number}} seconds ago",
                minutes: "{{plural_number}} minutes ago",
                hours: "{{plural_number}} hours ago",
                days: "{{plural_number}} days ago"
            }
        },
        shortForm: {
            singular: {
                now: "now",
                seconds: "{{one}} sec",
                minutes: "{{one}} min",
                hours: "{{one}} hr",
                days: "{{one}} day"
            },
            plural: {
                now: "now",
                seconds: "{{plural_number}} sec",
                minutes: "{{plural_number}} mins",
                hours: "{{plural_number}} hrs",
                days: "{{plural_number}} days"
            }
        }
    },
    dates: {
        months: [_("Jan"), _("Feb"), _("Mar"), _("Apr"), _("May"), _("Jun"), _("Jul"), _("Aug"), _("Sep"), _("Oct"), _("Nov"), _("Dec")],
        dates: [_("1st"), _("2nd"), _("3rd"), _("4th"), _("5th"), _("6th"), _("7th"), _("8th"), _("9th"), _("10th"), _("11th"), _("12th"), _("13th"), _("14th"), _("15th"), _("16th"), _("17th"), _("18th"), _("19th"), _("20th"), _("21st"), _("22nd"), _("23rd"), _("24th"), _("25th"), _("26th"), _("27th"), _("28th"), _("29th"), _("30th"), _("31st")]
    },
    hexToRGBA: function(C, B) {
        if (!C || !C.match(/^#?([0-9A-F]{6}|[0-9A-F]{3})$/i) || !RegExp.$1) {
            return
        }
        RegExp.$1.match(/(..?)(..?)(..?)/);
        var E = parseInt((RegExp.$1 + RegExp.$1).slice(0, 2), 16),
        D = parseInt((RegExp.$2 + RegExp.$2).slice(0, 2), 16),
        A = parseInt((RegExp.$3 + RegExp.$3).slice(0, 2), 16);
        return "rgba(" + [E, D, A, B || "1"].join(",") + ")"
    },
    sanitizeCssColor: function(A) {
        if (A.match(/^[0-9a-f]{3,6}$/i)) {
            return A
        }
    },
    parseDateString: function(A) {
        var B = new Date(A);
        if ($.browser.msie && A) {
            B = new Date(Date.parse(A.replace(/( \+)/, " UTC$1")))
        }
        return + B
    },
    prettyTime: function(A) {
        var C = new Date(A),
        B = {
            month: twttr.helpers.dates.months[C.getMonth()],
            hours24: C.getHours(),
            hours12: (C.getHours() % 12) || 12,
            minutes: C.getMinutes().toString().replace(/^(\d)$/, "0$1"),
            amPm: C.getHours() < 12 ? _("AM") : _("PM"),
            date: twttr.helpers.dates.dates[C.getDate() - 1]
        };
        return _("{{hours12}}:{{minutes}} {{amPm}} {{month}} {{date}}", B)
    },
    prettyTimeFromString: function(A) {
        return twttr.helpers.prettyTime(twttr.helpers.parseDateString(A))
    },
    timeAgoFromString: function(B, A, C) {
        return twttr.helpers.timeAgo(twttr.helpers.parseDateString(B), A, C)
    },
    timeAgo: function(F, E, D) {
        var K = twttr.helpers.timeWords[E ? "longForm": "shortForm"];
        var O = new Date;
        var I = new Date(F);
        var M = O - I;
        var C = 1000,
        G = C * 60,
        H = G * 60,
        L = H * 24,
        B = L * 7,
        N,
        A,
        J;
        if (isNaN(M) || M < 0) {
            return ""
        }
        if (M < C * 7) {
            N = "";
            A = "now";
            D = false
        } else {
            if (M < G) {
                N = Math.floor(M / C);
                A = "seconds";
                D = false
            } else {
                if (M < H) {
                    N = Math.floor(M / G);
                    A = "minutes";
                    D = false
                } else {
                    if (M < L) {
                        N = Math.floor(M / H);
                        A = "hours";
                        D = false
                    } else {
                        if (M < L * 365) {
                            J = _("{{date}} {{month}}", {
                                date: I.getDate(),
                                month: twttr.helpers.dates.months[I.getMonth()]
                            })
                        } else {
                            J = _("{{date}} {{month}} {{year}}", {
                                date: I.getDate(),
                                month: twttr.helpers.dates.months[I.getMonth()],
                                year: I.getFullYear().toString().slice(2)
                            })
                        }
                    }
                }
            }
        }
        if (!J) {
            if (N === 1) {
                K = K.singular
            } else {
                K = K.plural
            }
            J = _(K[A], {
                one: N,
                plural_number: N
            })
        }
        if (D) {
            J += _(" at {{time}}", {
                time: I.toTimeString().split(":").slice(0, 2).join(":")
            })
        }
        return J
    },
    transformProfileImageUrl: function(B, A) {
        if (!twttr.is.string(B)) {
            return B
        }
        if (!A && B.match(/default_profile_\d_normal.png$/)) {
            A = "bigger"
        }
        if (A) {
            return B.replace(/_normal\.(jpg|jpeg|gif|png)$/, "_" + A + ".$1")
        } else {
            return B.replace(/_normal\.(jpg|jpeg|gif|png)$/, ".$1")
        }
    },
    isCurrentUser: function(A) {
        return ! twttr.currentUser ? false: twttr.is.string(A) ? twttr.currentUser.screenName === A: twttr.is.object(A) ? A.id === twttr.currentUser.id: twttr.currentUser.id === A
    },
    canViewUser: function(A) {
        return ! A["protected"] || A.following || this.isCurrentUser(A) || twttr.isAdmin
    },
    truncate: function(C, A, B) {
        B = B || "...";
        return C.slice(0, A - B.length) + B
    },
    getUserIdentifier: function(A) {
        var C = parseInt(A.attr("data-user-id"), 10),
        B = A.attr("data-screen-name");
        return isNaN(C) ? B: C
    },
    isModifier: function(A) {
        return !! (A.shiftKey || A.metaKey || A.ctrlKey)
    }
};
twttr.viewHelpers = {
    addMapLink: function(A, B) {},
    listItems: function(A) {
        return twttr.inject(A.array, [],
        function(E, B, D) {
            var C = twttr.app.currentPageName() === "home" ? "listInHomePath": "userListPath";
            E.push({
                href: twttr.router[C]({
                    screen_name: D.user.screenName,
                    list_slug: D.slug
                }),
                name: D.fullName,
                icon_class: "list-icon",
                type: "list",
                id: D.id,
                is_private: D.mode === "private"
            });
            return E
        })
    },
    listMembershipsItems: function(A, B) {
        A.memberships(function(C) {
            var D = C.array.length;
            if (D === 0) {
                B([]);
                return
            }
            var E = twttr.helpers.isCurrentUser(A) ? _("Lists following you") : _("Lists following @{{screenName}}", A);
            B([{
                name: E,
                href: twttr.router.membershipsPath({
                    screen_name: A.screenName
                })
            }])
        })
    },
    listSubscriptionItems: function(A, B) {
        A.subscriptions(function(C) {
            var F = C.array.length;
            if (F === 0) {
                B([]);
                return
            }
            var G = twttr.helpers.isCurrentUser(A) ? _("Lists you follow") : _("Lists @{{screenName}} follows", A);
            var E = twttr.viewHelpers.listItems(C.slice(0, 10));
            var D = twttr.router.subscriptionsPath({
                screen_name: A.screenName
            });
            E.unshift({
                name: G,
                href: D
            });
            if (F > 10) {
                E.push({
                    name: _("View All"),
                    href: D
                })
            }
            B(E)
        })
    },
    profileListItems: function(A, B) {
        A.lists(function(C) {
            var F = C.array.length;
            if (F === 0) {
                B([]);
                return
            }
            var G = twttr.helpers.isCurrentUser(A) ? _("Lists by you") : _("Lists by @{{screenName}}", A);
            var E = twttr.viewHelpers.listItems(C.slice(0, 10));
            var D = twttr.router.userListsPath({
                screen_name: A.screenName
            });
            E.unshift({
                name: G,
                href: D
            });
            if (F > 10) {
                E.push({
                    name: _("View All"),
                    href: D
                })
            }
            B(E)
        })
    },
    createListItem: function(A) {
        var B = twttr.app.currentPageName() !== "home";
        return {
            name: _("Create a list"),
            icon_class: "list",
            href: "#",
            handlers: {
                click: function() {
                    new twttr.widget.ListDialog({
                        onSuccess: function(C) {
                            if (B) {
                                C.add(A, {})
                            }
                            this.close()
                        }
                    }).open()
                }
            }
        }
    },
    noListsItem: function(A) {
        if (twttr.app.currentPageName() === "home") {
            return {
                itemView: "NoLists"
            }
        } else {
            return {
                name: _("@{{screenName}} doesn't have any lists yet.", A)
            }
        }
    },
    superListDropdown: function(D, B, H) {
        var E = null;
        var G = null;
        var A = null;
        var C = [];
        twttr.viewHelpers.profileListItems(D,
        function(I) {
            A = I;
            F()
        });
        twttr.viewHelpers.listSubscriptionItems(D,
        function(I) {
            E = I;
            F()
        });
        twttr.viewHelpers.listMembershipsItems(D,
        function(I) {
            G = I;
            F()
        });
        var F = function() {
            if (E !== null && G !== null && A !== null) {
                var I = [];
                if (E.length === 0 && G.length === 0 && A.length === 0) {
                    I.push([twttr.viewHelpers.noListsItem(D)])
                }
                if (twttr.helpers.isCurrentUser(D)) {
                    A.push(twttr.viewHelpers.createListItem(D))
                }
                I.push(A, E, G);
                $.each(I,
                function(K, J) {
                    if (C.length && J.length) {
                        C.push({
                            divider: true
                        })
                    }
                    C = C.concat(J)
                });
                H(new twttr.control.Dropdown(B, {
                    itemView: "StreamLink",
                    items: C
                }))
            }
        }
    },
    getLists: function(A) {
        twttr.currentUser.lists(A)
    },
    openListDropDown: function(A, B, D) {
        var C = this;
        this.getLists(function(E) {
            var H = [];
            var G = {};
            var I = function(J) {
                E.each(function(L) {
                    H.push(F(L))
                });
                H.push({
                    label: _("Create a list"),
                    icon: "list",
                    handlers: {
                        click: function() {
                            new twttr.widget.ListDialog({
                                onSuccess: function(L) {
                                    L.add(A, {
                                        success: function(N) {
                                            G[L.id] = true;
                                            var M = K.addItem(F(L), "prependTo");
                                            M.bind("click", C.handler(L, A))
                                        }
                                    });
                                    this.close()
                                }
                            }).open()
                        }
                    }
                });
                var K = new twttr.control.Dropdown(B, {
                    view: "CheckboxDropdown",
                    items: H,
                    itemView: twttr.views.CheckboxListItem,
                    direction: "right"
                });
                D(K)
            };
            var F = function(J) {
                return {
                    label: h(J.name),
                    id: J.id,
                    userIsMember: G[J.id],
                    isPrivate: J.mode === "private",
                    handlers: {
                        click: C.handler(J, A)
                    }
                }
            };
            if (E.length()) {
                A.memberships({
                    filter_to_owned_lists: true,
                    success: function(J) {
                        J.each(function(L, K) {
                            G[L.id] = true
                        });
                        I()
                    }
                })
            } else {
                I()
            }
        })
    },
    handler: function(B, A) {
        return function(E) {
            E.stopPropagation();
            var C = $(this).find("input[type=checkbox]");
            var D = $(this).find("img");
            C.attr("checked", !C.attr("checked"));
            C.hide();
            D.show();
            B[C.attr("checked") ? "add": "remove"](A, {
                success: function() {
                    D.hide();
                    C.show()
                },
                error: function() {
                    C.attr("checked", !C.attr("checked"));
                    D.hide();
                    C.show();
                    twttr.showError(_("There was an error updating the list"))
                }
            })
        }
    }
}; (function() {
    var A = {
        condensed: true,
        ghostText: "",
        defaultContent: "",
        width: 560,
        height: 73,
        template: {
            show_geo: true,
            show_title: true,
            title: _("Whatâ€™s happening?"),
            button_text: _("Tweet")
        },
        statusAction: "update"
    };
    var B = 1;
    var D = {};
    var C = {
        update: "Status",
        reply: "Status",
        dm: "DirectMessage",
        directMessage: "DirectMessage"
    };
    var F = {
        tweet: _("Tweet"),
        send: _("Send Message")
    };
    var E = /^dm?\s+[@ï¼ ]?([a-zA-Z0-9_]{1,20}) /;
    twttr.klass("twttr.TweetBox",
    function(G, H) {
        this.options = twttr.merge({},
        A, H || {},
        true);
        var I = {
            ghostText: this.options.ghostText,
            defaultContent: this.options.defaultContent,
            width: this.options.width,
            height: this.options.height
        };
        this.id = this.options.id || B++;
        D[this.id] = this;
        this.$container = $(G);
        this.view = new twttr.views.TweetBox(this.options.template).render(G, "append");
        this.editor = new twttr.Editor(this.$container.find(".text-area"), I);
        this.autocomplete = new twttr.widget.Autocomplete({
            input: this.editor.$editor,
            textarea: true,
            limit: 10
        });
        if (!this.options.condensed) {
            this.open()
        }
        this.$tweetButton = this.$container.find(".tweet-button");
        this.$title = this.$container.find("h2");
        this.registerEvents()
    }).statics({
        focus: function(G) {
            D[G].editor.focus()
        },
        truncate: function(H, G) {
            return H.split("").slice(0, G).join("")
        }
    }).statics(twttr.EventProvider).methods(twttr.EventProvider).methods({
        open: function() {
            var G = this;
            if (this._isOpen) {
                return
            }
            this._isOpen = true;
            twttr.widget.Autocomplete.getAutocompletedUsers();
            this.$container.find(".tweet-box").removeClass("condensed");
            this.trigger("open");
            this.autocomplete.position();
            if (this.options.template.show_geo && twttr.decider.isAvailable("geo_ui_dropdown_available")) {
                twttr.geo.resetGeoControls()
            }
        },
        close: function() {
            if (!this._isOpen) {
                return
            }
            this.$container.find(".tweet-box").addClass("condensed");
            this.trigger("close");
            this._isOpen = false
        },
        tweet: function() {
            var G = this._shouldTweet();
            if (G.shouldTweet) {
                this.makeRequest.apply(this, G.args)
            }
            if (G.msg) {
                twttr.showError(G.msg)
            }
            if (G.redirectToProfile) {
                twttr.router.routeTo(twttr.router.profilePath({
                    screen_name: G.redirectToProfile
                }))
            }
        },
        _shouldTweet: function() {
            var K = [],
            M = this.options.statusAction,
            G = C[M];
            if (M === "update" && this.editor.content().match(/^@(\w{1,20})\s*$/)) {
                var J = RegExp.$1;
                this.$container.find(".tweet-spinner").show();
                this.$container.find(".tweet-counter").hide();
                return {
                    shouldTweet: false,
                    redirectToProfile: J
                }
            }
            if (this._sendingStatus) {
                return {
                    shouldTweet: false
                }
            }
            if (this.editor.content().length > 140) {
                return {
                    shouldTweet: false,
                    msg: _("Your tweet was over 140 characters. You'll have to be more clever.")
                }
            }
            if (this.editor.content().length == 0) {
                return {
                    shouldTweet: false
                }
            }
            if (M == "directMessage" && twttr.is.blank(this.options.data.getUser())) {
                return {
                    shouldTweet: false,
                    msg: _("Whoops! You forgot to type in a username.")
                }
            }
            var L = this;
            var I = {
                before: function() {
                    L.$container.find(".tweet-spinner").show();
                    L.$container.find(".tweet-counter").hide();
                    L.$tweetButton.addClass("disabled")
                },
                complete: function() {
                    L.$container.find(".tweet-spinner").hide();
                    L.$container.find(".tweet-counter").show();
                    L.$tweetButton.addClass("disabled");
                    L._sendingStatus = false
                },
                success: function(N) {
                    L.close();
                    if (L.options.statusAction == "directMessage" || L.editor.content().match(E)) {
                        L.trigger("dmSuccess", [N, L.options.statusAction])
                    } else {
                        L.trigger("tweetSuccess", [N, L.options.statusAction]);
                        L.constructor.trigger("tweetSuccess", [N, L.options.statusAction])
                    }
                    L.editor.setContent("");
                    scribble("tweet", {
                        tweet_type: L.options.statusAction,
                        origin: L.options.origin,
                        input: L.options.inputSource,
                        component: L.options.component
                    })
                },
                error: function(N) {
                    if (L.options.statusAction === "directMessage" || L.editor.content().match(E)) {
                        twttr.showError(_("Sorry, you can't message someone who isn't following you."))
                    } else {
                        twttr.showError(_("Sorry! We did something wrong. Try sending your tweet again in a minute"))
                    }
                    L.trigger("tweetError")
                }
            };
            var H = twttr.geo.currentLocation;
            if (H) {
                if (twttr.is.number(H.lat) && twttr.is.number(H.lon)) {
                    I.lat = H.lat;
                    I.lon = H.lon;
                    I.display_coordinates = false
                }
                if (H.place_id) {
                    I.place_id = H.place_id
                }
            }
            switch (M) {
            case "update":
                K = [this.editor.content(), I];
                break;
            case "reply":
                I.impression_id = this.options.data.impressionId;
                K = [this.options.data.tweetId, this.editor.content(), I];
                break;
            case "directMessage":
                M = "send";
                K = [this.options.data.getUser(), this.editor.content(), I];
                break
            }
            return {
                shouldTweet: true,
                args: [G, M, K]
            }
        },
        makeRequest: function(G, I, H) {
            this._sendingStatus = true;
            twttr.API[G][I].apply(twttr.API[G], H)
        },
        registerEvents: function() {
            var G = this;
            this.editor.bind("focus",
            function(I) {
                G.open()
            });
            this.editor.bind("blurFromTab",
            function(I, J) {
                if (!G.autocomplete._isCompletionsOpen) {
                    G.$container.find(".tweet-button").focus()
                }
            });
            this.editor.bind("blurFromEscape",
            function(I) {
                if (!G.autocomplete._isCompletionsOpen) {
                    G.trigger("blurFromEscape")
                }
            });
            var H = this.$container.find(".tweet-counter");
            this.$tweetButton.addClass("disabled");
            this.editor.bind("didChangeContent", twttr.bind(this,
            function(J, K, I) {
                H.text(140 - I);
                if (I > 140 || I == 0) {
                    this.$tweetButton.addClass("disabled")
                } else {
                    this.$tweetButton.removeClass("disabled")
                }
                if (I > 120 && I < 130) {
                    H.addClass("warn").removeClass("superwarn")
                } else {
                    if (I >= 130) {
                        H.addClass("superwarn").removeClass("warn")
                    } else {
                        H.removeClass("superwarn").removeClass("warn")
                    }
                }
            }));
            if (this.options.defaultContent.length > 0) {
                this.editor.trigger("didChangeContent", [this.options.defaultContent, this.options.defaultContent.length]);
                setTimeout(twttr.bind(this,
                function() {
                    this.open();
                    this.editor.focus()
                }), 0)
            }
            this.$tweetButton.bind("keypress", twttr.bind(this,
            function(I) {
                I.stopPropagation();
                if (I.keyCode === twttr.constants.keyCodes.enter || I.charCode === twttr.constants.charCodes.space) {
                    this.tweet();
                    I.preventDefault();
                    return false
                }
            })).bind("click", twttr.bind(this,
            function(I) {
                this.tweet();
                I.preventDefault()
            }));
            if (this.options.statusAction == "update") {
                this.editor.bind("didChangeContent", twttr.bind(this,
                function(I, J) {
                    this.$tweetButton[0].childNodes[0].nodeValue = J.match(E) ? F.send: F.tweet;
                    if (J.match(E)) {
                        var K = RegExp.$1;
                        this.$title.html(_("Message {{username}}", {
                            username: K
                        }));
                        this.trigger("titleChanged", [this.$title.html()])
                    } else {
                        this.$title.html(this.options.template.title);
                        this.trigger("titleChanged", [false])
                    }
                }))
            }
            this.trigger("ready")
        }
    })
} ());
twttr.tweetCache = {
    get: function(A) {
        return this._cache[A]
    },
    put: function(A) {
        this._cache[A.id] = A
    },
    putAll: function(A) {
        A.each(function(B) {
            twttr.tweetCache.put(B)
        })
    },
    dirty: function(A) {
        delete this._cache[A]
    },
    has: function(A) {
        return !! this._cache[A]
    },
    _cache: {}
};
twttr["interface"] = {
    setup: function() {
        $("a[href^=#]").live("click",
        function(A) {
            A.preventDefault()
        });
        $(".user-profile-link").live("click", twttr.scribbles.logViewProfileDetails);
        $("a[href^=/]").live("click",
        function(B) {
            var D = $(this),
            A = D.attr("href"),
            C = D.attr("target");
            if ((C && twttr.router.shouldRedirectTo(A)) || B.metaKey || B.shiftKey) {
                return
            }
            twttr.router.routeTo(D.attr("href"));
            B.preventDefault();
            return false
        });
        $("#doc").bind("click",
        function(C) {
            var B = $("#session"),
            A = B.get(0);
            if (C.target !== A && !$.contains(A, C.target)) {
                $(".profile-dropdown").hide();
                B.removeClass("active")
            }
        });
        $("#session").click(function(B) {
            var A = $(this);
            if (A.hasClass("active")) {
                $(".profile-dropdown").hide();
                $(this).removeClass("active")
            } else {
                $(".profile-dropdown").show();
                $(this).addClass("active")
            }
        });
        $("#sign-in-link").click(function(A) {
            $("#signin_menu").toggle();
            $("#username").focus();
            $(this).toggleClass("active");
            return false
        });
        $(".tweet a.twitter-timeline-link").live("mousedown",
        function() {
            var B = $(this);
            var A = {};
            if (B.is(".dashboard a")) {
                A.component = "dashboard"
            } else {
                if (B.is(".details-pane a")) {
                    A.component = "details-pane";
                    if (B.is(".related-tweets a")) {
                        A.subcomponent = "related-tweets"
                    }
                } else {
                    if (B.is(".stream-tweet a")) {
                        A.component = "stream"
                    } else {
                        if (B.is(".twttr-dialog a")) {
                            A.component = "dialog";
                            A.dialog_type = B.closest(".twttr-dialog").attr("type")
                        }
                    }
                }
            }
            A.tweet_id = B.closest(".tweet").attr("data-tweet-id");
            A.input = "click";
            A.href = B.attr("href");
            A.text = B.text();
            scribble("tweet-link", A)
        });
        $(".media-attribution-link").live("click",
        function(A) {
            scribble("follow-attribution-link", {
                component: "inline-media",
                input: "click",
                type: $(this).attr("data-media-type")
            })
        });
        $(".inline-media-image").live("click",
        function(A) {
            scribble("open-inline-media-photo", {
                component: "inline-media",
                input: "click",
                type: $(this).attr("data-media-type")
            })
        });
        $("#new-tweet").click(function(A) {
            new twttr.widget.TweetDialog({
                modal: false,
                draggable: true,
                template: {
                    title: _("Whatâ€™s happening?")
                },
                origin: "new-tweet-titlebar-button"
            }).open().focus()
        });
        $("#search-form .glass").click(function(A) {
            $("#search-form").submit()
        });
        $("#search-form").submit(function(B) {
            var A = $("#search-query");
            if (A.val()) {
                twttr.search.doSearch()
            }
            B.preventDefault()
        });
        $("#message-drawer").delegate(".dismiss", "click",
        function() {
            twttr.views.MessageDrawer.close();
            return false
        });
        $(".mention-action").live("click",
        function(C) {
            var B = $(this);
            var A = B.attr("data-screen-name");
            twttr.userActions.mention(A);
            return false
        });
        $(".signout-button").click(function() {
            $(".signout-form").submit()
        });
        $(".back-to-top").live("click",
        function(A) {
            $(window).scrollTop(0);
            A.preventDefault();
            return false
        });
        $("#sms_codes_link").live("click",
        function(A) {
            twttr.dialogs.smsCodes().open()
        });
        $(".use-old-twitter").live("click",
        function(A) {
            $.cookie("phx_seen_banner", null);
            $.cookie("phx_seen_dialog", null)
        });
        twttr.admin.registerListeners();
        $(document).bind("keydown",
        function(A) {
            if (!twttr.loggedIn || twttr.shortcuts.currentKey) {
                return
            }
            switch (A.keyCode) {
            case 77:
                twttr.dialogs.directMessage({
                    origin:
                    "message-dialog-hotkey"
                }).open();
                scribble("dialog-direct-message", {
                    input: "keyboard"
                });
                A.preventDefault();
                break;
            case 78:
                new twttr.widget.TweetDialog({
                    modal:
                    false,
                    template: {
                        title: _("Whatâ€™s happening?")
                    },
                    origin: "new-tweet-hotkey"
                }).open().focus();
                scribble("dialog-new-tweet", {
                    input: "keyboard"
                });
                A.preventDefault();
                break
            }
        });
        $(document).bind("keypress", "/",
        function(A) {
            A.preventDefault();
            $("#search-query").focus();
            scribble("search-box-focus", {
                input: "keyboard"
            })
        });
        $("#search-query").bind("keyup keypress keydown",
        function(A) {
            A.stopPropagation()
        });
        $(document).bind("keypress",
        function(A) {
            return twttr.app.currentPage().onkeypress(A)
        });
        $(document).bind("keyup",
        function(A) {
            return twttr.app.currentPage().onkeyup(A)
        });
        $(document).bind("keydown",
        function(A) {
            return twttr.app.currentPage().onkeydown(A)
        });
        $(document).bind("keypress",
        function(A) {
            if (A.keyCode === twttr.constants.keyCodes.escape) {
                if (twttr.widget.Dialog.currentModal) {
                    twttr.widget.Dialog.close();
                    A.stopPropagation();
                    A.preventDefault()
                }
            } else {
                if (A.charCode == twttr.constants.charCodes.questionMark) {
                    A.preventDefault();
                    twttr.dialogs.keyboardShortcuts().toggle();
                    scribble("shortcut-dialog", {
                        input: "keyboard"
                    })
                }
            }
        });
        $("#keyboard-shortcut-trigger").live("click",
        function(A) {
            A.preventDefault();
            twttr.dialogs.keyboardShortcuts().open()
        });
        $(window).bind("load",
        function() {
            $(window).scrollTop(0)
        });
        $(window).bind("unload",
        function() {
            var A = {};
            if ($.browser.safari || $.browser.msie) {
                A.xhr = true;
                A.async = false
            }
            scribble.forceScribe(A)
        });
        if (!$.browser.msie) {
            $(window).blur(function() {
                scribble.forceScribe()
            })
        } else {
            document.onfocusout = function() {
                scribble.forceScribe()
            }
        } (function() {
            twttr.provide("twttr.shortcuts");
            twttr.shortcuts.currentKey = null;
            var A = [];
            var B = {
                71: "g",
                85: "u",
                82: "r",
                80: "p",
                72: "h",
                70: "f",
                88: "x",
                77: "m"
            };
            $(document).keydown(function(C) {
                if (twttr.shortcuts.verify(C)) {
                    C.preventDefault()
                } else {
                    twttr.shortcuts.currentKey = null
                }
            });
            twttr.magic("twttr.shortcuts.combo",
            function(D, C) {
                A.push({
                    keys: D,
                    fn: C
                })
            });
            twttr.magic("twttr.shortcuts.verify",
            function(F) {
                var G = F.keyCode;
                var C = false;
                for (var D = 0; D < A.length; D++) {
                    var E = A[D];
                    if (B[G] === E.keys[0]) {
                        C = true;
                        twttr.shortcuts.currentKey = B[G];
                        break
                    } else {
                        if (B[G] === E.keys[1] && twttr.shortcuts.currentKey === E.keys[0]) {
                            C = true;
                            twttr.shortcuts.currentKey = null;
                            E.fn();
                            break
                        }
                    }
                }
                return C
            })
        } ());
        twttr.shortcuts.combo(["g", "u"],
        function() {
            scribble("open-goto-user-dialog", {
                input: "keyboard"
            });
            twttr.widget.Autocomplete.getAutocompletedUsers();
            twttr.dialogs.goToUser().open()
        });
        twttr.shortcuts.combo(["g", "r"],
        function() {
            scribble("switch-stream", {
                input: "keyboard",
                toStream: "mentions"
            });
            twttr.router.routeTo(twttr.router.mentionsPath())
        });
        twttr.shortcuts.combo(["g", "p"],
        function() {
            scribble("switch-page", {
                input: "keyboard",
                toPage: "profile"
            });
            twttr.router.routeTo(twttr.router.profilePath({
                screen_name: twttr.currentUser.screenName
            }))
        });
        twttr.shortcuts.combo(["g", "m"],
        function() {
            scribble("switch-page", {
                input: "keyboard",
                toPage: "messages"
            });
            twttr.router.routeTo(twttr.router.messagesPath())
        });
        twttr.shortcuts.combo(["g", "h"],
        function() {
            scribble("switch-stream", {
                input: "keyboard",
                toStream: "home"
            });
            twttr.router.routeTo(twttr.router.homePath())
        });
        twttr.shortcuts.combo(["g", "f"],
        function() {
            scribble("switch-stream", {
                input: "keyboard",
                toStream: "favorites"
            });
            twttr.router.routeTo(twttr.router.favoritesPath())
        });
        if (twttr.decider.isAvailable("muteUsers")) {
            twttr.shortcuts.combo(["g", "x"],
            function() {
                twttr.widget.Autocomplete.getAutocompletedUsers();
                var A = new twttr.widget.MuteDialog().open()
            })
        }
        twttr.provide("twttr.secrets");
        twttr.secrets.secretSauce = function(A, B) {
            $(document).bind("keydown", B.split("->"),
            function(C) {
                if (twttr.decider.isAvailable(A)) {
                    twttr.secrets[A] = !twttr.secrets[A]
                }
            })
        };
        twttr.secrets.secretSauce("hideMentions", "x->o");
        twttr.secrets.secretSauce("allMedia", "x->i")
    }
}; (function(B) {
    var A = {
        ACTIVE: 30000,
        INACTIVE: 90000
    };
    var C = A.ACTIVE;
    $(window).focus(function() {
        C = A.ACTIVE
    });
    $(window).blur(function() {
        C = A.INACTIVE
    });
    B.tweetStream = function(F, E) {
        if (!E) {
            E = function() {
                B.streams.TweetStream.apply(this, arguments)
            }
        }
        var D = B.stream(F, E);
        D.superclass(B.streams.TweetStream);
        D.prototype._updateMethod = function() {};
        D.update = function(G) {
            this.prototype._updateMethod = G;
            return this
        };
        D.every = function(G) {
            this.prototype._interval = G * 1000;
            return this
        };
        D.setTitle = function(G) {
            this.prototype._setTitle = G;
            return this
        };
        D.deciderKey = function(G) {
            D._deciderKey = G;
            return D
        };
        D.pollingDeciderKey = function(G) {
            D._pollingDeciderKey = G;
            return D
        };
        return D
    };
    B.klass("twttr.streams.TweetStream",
    function() {
        var D = this;
        B.streams.Stream.apply(this, arguments);
        B.API.User.bind("block",
        function(F, E) {
            D.blockTweetsBy(E)
        });
        B.API.User.bind("unblock",
        function(F, E) {
            D.blockTweetsBy(E, true)
        });
        this.registerTweetActionEvents();
        this.periodicUpdater = null
    }).superclass(B.streams.Stream).mixin(B.mixins.tweetActionable).methods(B.EventProvider).methods({
        itemViewClass: "StreamTweet",
        streamItemType: "tweet"
    }).methods({
        afterFirstSwitchingTo: function() {
            var D = this;
            if (!this._attachedTweetBarEvent) {
                this._attachedTweetBarEvent = true;
                this.dom().delegate(".new-tweets-bar", "click",
                function() {
                    D._showNewItems()
                })
            }
            this.startPeriodicFetcher();
            this._loadedStreamOnce = true;
            this.isLoadingMore();
            this.fetchTweets(true,
            function(F, E) {
                F.render();
                F.doneLoadingMore();
                if (E !== B.streams.SUCCESS) {
                    D._showError(E)
                } else { (function() {
                        if (!D.noMoreOldItems) {
                            if (jQuery.contains(document.body, D.dom()[0])) {
                                if (D.dom().height() < $(window).height()) {
                                    D.getMoreOldItems(arguments.callee)
                                }
                            }
                        }
                    } ())
                }
            })
        },
        afterSwitchingToAgain: function() {
            this.fetchNewTweetsThenPoll()
        },
        _getStreamWhaleText: function() {
            return _("Loading Tweets seems to be taking a while.")
        },
        blockTweetsBy: function(E, D) {
            var F = this.constructor._name === "User" && this.screenName === E.screenName,
            G = this.constructor._name === "Search";
            if (F || G) {
                return
            }
            var H = this.$find('.stream-item [data-screen-name="' + E.screenName + '"]').parent();
            H[D ? "addClass": "removeClass"]("blocked")
        },
        onTweetActionDelete: function(E) {
            this.remove(E);
            for (var D = 0; D < this.items.length; D++) {
                if (this.items[D].id === E) {
                    this.items.splice(D, 1)
                }
            }
        },
        onTweetActionHide: function(D) {
            this.selectedItem(D).hide()
        },
        onTweetActionShow: function(D) {
            this.selectedItem(D).show()
        },
        onShowNewItems: function(D) {
            this.addInlineMediaIcons(D);
            this.$find(".new-tweets-bar").remove()
        },
        onShowOldItems: function(D) {
            this.addInlineMediaIcons(D)
        },
        beforeSwitchingAway: function() {
            this.stopPeriodicFetcher()
        },
        _fetchItems: function(D) {
            this.fetchTweets(true, D)
        },
        fetchTweets: function(F, D) {
            if (B.is.fn(F)) {
                D = F;
                F = false
            }
            if (!B.decider.isAvailable("tweet_streams") || (this.constructor._deciderKey && !B.decider.isAvailable(this.constructor._deciderKey))) {
                D(this, B.streams.DECIDER);
                return
            }
            var G = this;
            var E = F ? this._optionsForOld(D) : this._optionsForNew(D);
            E.include_entities = 1;
            E.contributor_details = true;
            this._updateMethod(E, this.params, D)
        },
        _idForTweet: function(D) {
            return D.wasRetweeted ? D.retweetingStatus.id: D.id
        },
        _optionsForNew: function(D) {
            var F = this;
            var E = {
                success: function(G) {
                    if (G instanceof B.API.util.BaseCollection) {
                        G = G.array
                    }
                    G = F.filterMutedUsers(G);
                    G = F.filterDeletedTweets(G);
                    F.unshift(G);
                    F._updateSinceId(G);
                    if (D) {
                        D(F, B.streams.SUCCESS)
                    }
                },
                error: function(G) {
                    if (G.status === 502) {
                        D(F, B.streams.WHALE)
                    } else {
                        D(F, B.streams.ERROR)
                    }
                }
            };
            if (this.items.length) {
                E.since_id = this._sinceId
            }
            return E
        },
        _updateSinceId: function(F) {
            if (!B.is.array(F)) {
                F = Array.prototype.slice.call(arguments)
            }
            for (var D = 0; D < F.length; D++) {
                var E = F[D],
                G = this._idForTweet(E);
                if (!E.sponsoredResult && E.resultCategory !== "popular") {
                    if (G > (this._sinceId || 0)) {
                        this._sinceId = G
                    }
                    return
                }
            }
        },
        filterMutedUsers: function(E) {
            if (B.currentUser && this.constructor._name == "Home") {
                var D = B.caches.User.get("muted");
                E = B.filter(E,
                function(F) {
                    if (!B.is.def(D) || (F.wasRetweeted && !B.is.def(D[F.retweetingStatus.user.id])) || (!F.wasRetweeted && !B.is.def(D[F.user.id]))) {
                        return F
                    }
                })
            }
            return E
        },
        filterDeletedTweets: function(D) {
            return B.filter(D,
            function(E) {
                if (!B.app.caches.deletedTweets.get(E.id)) {
                    return E
                }
            })
        },
        hasPromotedTweet: function() {
            for (var D = 0; D < this.items.length; D++) {
                if (this.items[D].sponsoredResult) {
                    return true
                }
            }
            return false
        },
        _optionsForOld: function(D) {
            var F = this;
            var E = {
                success: function(G) {
                    if (E.max_id) {
                        G = G.slice(1)
                    }
                    if (G instanceof B.API.util.BaseCollection) {
                        G = G.array
                    }
                    G = F.filterMutedUsers(G);
                    G = F.filterDeletedTweets(G);
                    F.push(G);
                    F._updateSinceId(G);
                    if (!G.length) {
                        F.reachedTheEnd()
                    }
                    if (D) {
                        D(F, B.streams.SUCCESS)
                    }
                },
                error: function(G) {
                    if (G.status === 502) {
                        D(F, B.streams.WHALE)
                    } else {
                        D(F, B.streams.ERROR)
                    }
                },
                timeout: function(G) {
                    G.retry()
                },
                cancel: function() {
                    D(F, B.streams.TIMEOUT)
                }
            };
            if (this.items.length) {
                E.max_id = this._idForTweet(this.items[this.items.length - 1]);
                E.count = 21
            }
            return E
        },
        _getInterval: function() {
            return C
        },
        startPeriodicFetcher: function() {
            if (this.periodicUpdater || !B.decider.isAvailable("tweet_streams_polling") || (this.constructor._pollingDeciderKey && !B.decider.isAvailable(this.constructor._pollingDeciderKey))) {
                return
            }
            this.periodicUpdater = setTimeout(B.bind(this, this.fetchNewTweetsThenPoll), this._getInterval())
        },
        fetchNewTweetsThenPoll: function() {
            this.fetchTweets(B.bind(this,
            function(E) {
                var D = E.newItemsCount;
                if (D > 0) {
                    this.showNewTweetsBar(D);
                    this.trigger("newTweets", [E, D])
                }
            }));
            this.restartFetcher()
        },
        stopPeriodicFetcher: function() {
            if (this.periodicUpdater) {
                clearTimeout(this.periodicUpdater);
                this.periodicUpdater = null
            }
        },
        restartFetcher: function() {
            this.stopPeriodicFetcher();
            this.startPeriodicFetcher()
        },
        addInlineMediaIcons: function(D) {
            var F = this;
            var E = [];
            D.each(function(G, I) {
                var H = $(I);
                H.attr("media", true);
                E.push({
                    tweetId: H.attr("data-item-id"),
                    links: H.find("a.twitter-timeline-link")
                })
            });
            if (!E.length) {
                return
            }
            B.media.InlineMedia.process(E,
            function(I, H) {
                var G = B.batchObject(H,
                function(J, K) {
                    return ".stream-item[data-item-id=" + K + "]"
                }).join(",");
                $(G).find(".inlinemedia-icons").append("<span class='media " + I._icon + "' data-media-type='" + I._name.toLowerCase() + "'></span>")
            })
        },
        showNewTweetsBar: function(D) {
            var F = this.$find(".new-tweets-bar");
            var E = D == 1 ? _("1 new tweet") : _("{{count}} new tweets", {
                count: D
            });
            if (F.length > 0) {
                F.html(E)
            } else {
                F = $(new B.views.NewTweetsBar({
                    count: D,
                    tweets_count_phrase: E
                }).html());
                F.hide().prependTo(this.dom()).slideDown()
            }
        }
    });
    B.tweetStream("twttr.streams.Home",
    function() {
        B.streams.TweetStream.apply(this, arguments);
        var D = this;
        this.bind("didTweet",
        function(E, F) {
            D.fetchTweets(function(G) {
                G.render()
            })
        })
    }).update(function(D, F, E) {
        B.currentUser.homeTimeline(D)
    }).methods({
        _getStreamEndComponent: function() {
            if (B.currentUser.statusesCount < 15) {
                return new B.components.NextSteps()
            }
            return this.constructor.uber._getStreamEndComponent.apply(this, arguments)
        },
        _getEmptyStreamComponent: function() {
            return new B.components.NextSteps()
        }
    }).deciderKey("tweet_stream_home").pollingDeciderKey("tweet_stream_home_polling");
    B.tweetStream("twttr.streams.Mentions").statics({
        isLoadingRelationships: false
    }).setTitle(function(D) {
        D(_("Tweets mentioning {{username}}", {
            username: "@" + B.currentUser.screenName
        }))
    }).update(function(D, H, F) {
        var E = this;
        if (B.secrets && B.secrets.hideMentions) {
            var G = D.success;
            D.success = function(I) {
                G.apply(D, arguments);
                if (E.constructor.isLoadingRelationships) {
                    return
                }
                E.constructor.isLoadingRelationships = true;
                setTimeout(function() {
                    var J = {
                        user_a: B.currentUser.id,
                        user_ids: I.map(function(K) {
                            return K.user.id
                        }).join(",")
                    };
                    $.ajax({
                        url: "/account/batch_followed_by",
                        data: J,
                        dataType: "jsonp",
                        type: "get",
                        success: function(M) {
                            var K = [];
                            for (var L in M.relationships) {
                                if (!M.relationships[L]) {
                                    K.push(".stream-tweet[data-user-id=" + L + "]")
                                }
                            }
                            if (K.length > 0) {
                                $(K.join(",")).hide()
                            }
                            E.constructor.isLoadingRelationships = false
                        }
                    })
                },
                10)
            }
        }
        B.currentUser.mentions(D)
    }).methods({
        _getEmptyStreamHtml: function() {
            return _("Tweets that mention you, or are in reply to you, appear here.")
        }
    }).deciderKey("tweet_stream_mentions").pollingDeciderKey("tweet_stream_mentions_polling");
    B.tweetStream("twttr.streams.Favorites").setTitle(function(D) {
        if (!this.screenName || this.stream_user_is_current_user()) {
            D(_("Your Favorites"))
        } else {
            D(_("{{username}}'s Favorites", {
                username: this.screenName
            }))
        }
    }).update(function(D, F, E) {
        if (!this.screenName) {
            B.currentUser.favorites(D)
        } else {
            B.API.User.find(this.screenName).favorites(D)
        }
    }).methods({
        _getEmptyStreamHtml: function() {
            if (!this.screenName || this.stream_user_is_current_user()) {
                return _("Your favorite tweets get saved here. To favorite a tweet, hover over it and click: <span class='favorite-icon'></span> <strong>Favorite</strong>")
            } else {
                return _("<b>@{{screen_name}}</b> hasn't favorited any Tweets yet.", {
                    screen_name: this.screenName
                })
            }
        }
    }).deciderKey("tweet_stream_favorites").pollingDeciderKey("tweet_stream_favorites_polling");
    B.tweetStream("twttr.streams.User").update(function(D, F, E) {
        D.cacheOptions = {
            shouldCacheAssociated: false
        };
        D.include_rts = !this.params.noRetweets;
        if (this.params.canViewUser) {
            B.API.User.find(this.params.screenName).timeline(D)
        } else {
            E(this, B.streams.PROTECTED)
        }
    }).methods({
        _getStreamErrorComponent: function(D) {
            if (D === B.streams.PROTECTED) {
                return new B.components.ProtectedUser({
                    screen_name: this.params.screenName
                })
            } else {
                return this.constructor.uber._getStreamErrorComponent.apply(this, arguments)
            }
        },
        _getEmptyStreamHtml: function() {
            if (this.stream_user_is_current_user()) {
                return _("You haven't tweeted yet.")
            } else {
                return _("@{{screen_name}} hasn't tweeted yet.", {
                    screen_name: this.screenName
                })
            }
        }
    }).deciderKey("tweet_stream_user").pollingDeciderKey("tweet_stream_user_polling");
    B.tweetStream("twttr.streams.List").setTitle(function(D) {
        var E = this;
        this._getList(function(G) {
            var F = B.merge(E.params, G.attributes);
            D(new B.views.ListStreamTitle(F).html())
        })
    }).update(function(D, F, E) {
        this._getList(function(G) {
            G.statuses(D)
        })
    }).methods({
        _getEmptyStreamComponent: function() {
            if (B.helpers.isCurrentUser(this.screenName)) {
                return new B.components.AddPeople()
            } else {
                return new B.components.NoListMembers()
            }
        },
        _getList: function(D) {
            var E = this;
            this._fetchingCallbacks = this._fetchingCallbacks || [];
            this._fetchingCallbacks.push(D);
            if (this._fetching) {
                return
            }
            this._fetching = true;
            B.API.User.find(this.screenName).lists(function(G) {
                var H = G.find(function(I) {
                    E.memberCount = I.memberCount;
                    return I.slug === E.params.listSlug
                });
                if (!H) {
                    E.trigger("notFound");
                    return
                }
                var F;
                while (F = E._fetchingCallbacks.pop()) {
                    F(H)
                }
                E._list = H;
                E._fetching = false
            })
        }
    }).deciderKey("tweet_stream_list").pollingDeciderKey("tweet_stream_list_polling");
    B.tweetStream("twttr.streams.Search").setTitle(function(D) {
        if (!this.params.hideTitle) {
            D(new B.views.SearchStreamTitle(this.params).html())
        }
    }).update(function(F, I, H) {
        var G = this;
        if (!F.since_id) {
            var E = F.success;
            F.success = function(K, L) {
                G.logPromotedImpressions(K);
                G._next_page = L.response.next_page;
                var J = E.apply({},
                arguments);
                if (!G._next_page) {
                    G.reachedTheEnd()
                }
                return J
            }
        }
        if (F.max_id) {
            delete F.count;
            delete F.max_id;
            F.page = G._next_page
        }
        if (this.params.mode === "links") {
            F.filter = "links"
        } else {
            if (this.params.mode === "nearby") {
                var D = B.geo.currentLocation;
                if (D && D.lat && D.lon) {
                    F.near = D.lat + "," + D.lon
                } else {
                    if (B.currentUser.location) {
                        F.near = B.currentUser.location
                    }
                }
                F.within = "15mi"
            }
        }
        B.API.Status.search(this.params.query, F)
    }).methods({
        _shouldCache: false,
        scribeData: function() {
            return B.merge(B.streams.Stream.prototype.scribeData.apply(this), {
                query: this.params.query,
                type: this.params.mode
            })
        },
        logPromotedImpressions: function(D) {
            D.each(function(E) {
                if (E.sponsoredResult) {
                    B.API.Status.logImpression(E.sponsoredResult.impression_id)
                }
            })
        },
        _getEmptyStreamHtml: function() {
            if (this.params.mode === "links") {
                return _("No Tweet results with links for <strong>{{pretty_query}}</strong>.", this.params)
            } else {
                if (this.params.mode === "nearby") {
                    return _("No nearby Tweet results for <strong>{{pretty_query}}</strong>.", this.params)
                } else {
                    return _("No Tweet results for <strong>{{pretty_query}}</strong>.", this.params)
                }
            }
        },
        _getStreamEndHtml: function() {
            if (this.params.mode === "links") {
                return _("Older Tweet results with links for <strong>{{pretty_query}}</strong> are unavailable.", this.params)
            } else {
                if (this.params.mode === "nearby") {
                    return _("Older nearby Tweet results for <strong>{{pretty_query}}</strong> are unavailable.", this.params)
                } else {
                    return _("Older Tweet results for <strong>{{pretty_query}}</strong> are unavailable.", this.params)
                }
            }
        },
        onShowNewItems: function(D) {
            this.constructor.uber.onShowNewItems.apply(this, arguments);
            var E = this.$find(".promoted-tweet").parent();
            this.$streamItems().prepend(E)
        }
    }).deciderKey("tweet_stream_search").pollingDeciderKey("tweet_stream_search_polling");
    B.tweetStream("twttr.streams.RetweetsByYou").setTitle(function(D) {
        D(_("Retweets by you"))
    }).update(function(D, G, E) {
        var F = D.success;
        D.success = function(H) {
            H.each(function(I) {
                I.retweeted = I.attributes.retweeted = true
            });
            F(H)
        };
        B.currentUser.retweeting(D)
    }).every(180).methods({
        _getEmptyStreamHtml: function() {
            return _("You haven't retweeted anything yet. To spread the word to your followers, hover over a Tweet and click: <span class='retweet-icon'></span> <strong>Retweet</strong>")
        }
    }).deciderKey("tweet_stream_retweets_by_you").pollingDeciderKey("tweet_stream_retweets_by_you_polling");
    B.tweetStream("twttr.streams.RetweetsByOthers").setTitle(function(D) {
        D(_("Retweets by others"))
    }).update(function(D, F, E) {
        B.currentUser.retweets(D)
    }).methods({
        _getEmptyStreamHtml: function() {
            return _("Tweets that are retweeted by others appear here.")
        }
    }).deciderKey("tweet_stream_retweets_by_others").pollingDeciderKey("tweet_stream_retweets_by_others_polling");
    B.tweetStream("twttr.streams.YourTweetsRetweeted").setTitle(function(D) {
        D(_("Your tweets, retweeted"))
    }).update(function(D, F, E) {
        B.currentUser.retweeted(D)
    }).methods({
        _getEmptyStreamHtml: function() {
            return _("You haven't been retweeted yet. Check back here to see who has retweeted your Tweets.")
        }
    }).deciderKey("tweet_stream_your_tweets_retweeted").pollingDeciderKey("tweet_stream_your_tweets_retweeted_polling")
} (twttr));
twttr.klass("twttr.streams.StreamManager",
function() {
    var A = this;
    this.$node = $("<div/>");
    this.$titleContainer = $("<div/>").addClass("stream-title").appendTo(this.$node);
    this.$streamContainer = $("<div/>").appendTo(this.$node);
    this.$moreButton = $("<a class='more-button'>more</a>");
    if (!twttr.decider.isAvailable("infinite_scroll")) {
        this.$moreButton.appendTo(this.$node).click(function(B) {
            A.getMoreOldItems(function(C) {
                scribble("stream-more-button", {
                    page: C._cacheKey,
                    stream: C._cacheKey,
                    focused_tweet_id: C.focusedItemId || ""
                })
            });
            B.stopPropagation();
            B.preventDefault();
            return false
        })
    }
    this.streams = {};
    this.setCurrent(null)
}).statics({
    cacheKeyForStream: function(A) {
        return A._cacheKey
    },
    cacheKeyForStreamClass: function(B, C) {
        var A = B._name;
        if (C && !$.isEmptyObject(C)) {
            A += JSON.stringify(C)
        }
        return A.replace(/\W/g, "")
    }
}).methods(twttr.EventProvider).methods({
    $find: function() {
        return this.$node.find.apply(this.$node, arguments)
    },
    getCurrent: function() {
        return this.streams.current
    },
    setCurrent: function(A) {
        this.streams.current = A
    },
    onSwitchAway: function() {
        var A = this.getCurrent();
        if (A) {
            A.beforeSwitchingAway()
        }
    },
    switchTo: function(B, G, H) {
        scribble("stream-view", {
            stream_name: B._name
        });
        G = G || {};
        var A = this;
        var F = twttr.streams.StreamManager.cacheKeyForStreamClass(B, G);
        var E = this.getCurrent();
        var D;
        if (E) {
            var C = twttr.streams.StreamManager.cacheKeyForStream(E);
            if (C === F) {
                E.afterSwitchingToAgain(H);
                return
            }
            E.beforeSwitchingAway();
            E.dom().detach()
        }
        this.trigger("switchTo");
        if (this.streams[F]) {
            D = this.streams[F]
        } else {
            D = new B(G);
            D._cacheKey = F;
            D.bind("newItemsCountChanged", twttr.bind(this,
            function(J, I) {
                if (D === this.getCurrent()) {
                    this.trigger("newItemsCountChanged", [I])
                }
            }));
            D.bind("notFound", twttr.bind(this,
            function(I) {
                this.trigger("notFound")
            }));
            if (D._shouldCache) {
                this.streams[F] = D
            }
        }
        this.$streamContainer.prepend(D.dom());
        this.$titleContainer.empty();
        D._setTitle(twttr.bind(this,
        function(I) {
            if (I) {
                this.$titleContainer.html("<h2>" + I + "</h2>")
            }
        }));
        D.bind("streamEnd",
        function() {
            if (!twttr.decider.isAvailable("infinite_scroll")) {
                A.$moreButton.hide()
            }
        });
        D._alreadyMarkedEnd ? this.$moreButton.hide() : this.$moreButton.show();
        this.setCurrent(D);
        this.trigger("newItemsCountChanged", [D.newItemsCount]);
        D.afterFirstSwitchingTo(H);
        return D
    },
    getMoreOldItems: function(A) {
        if (this.getCurrent()) {
            this.getCurrent().getMoreOldItems(A)
        }
    }
}); (function() {
    twttr.magic("twttr.views", {
        makeDefaultViews: function(A) {
            twttr.map(A,
            function(C, B) {
                var D = twttr.util.capitalize(twttr.util.camelize(B));
                twttr.views[D] = twttr.views[D] || twttr.view("twttr.views." + D)
            })
        }
    });
    twttr.view = function(C, B) {
        if (!B) {
            B = function() {
                twttr.views.Base.apply(this, arguments)
            }
        }
        var A = twttr.klass(C, B);
        A.superclass(twttr.views.Base);
        A.template = function(D) {
            this._template = D;
            return this
        };
        twttr.view._setDefaultTemplate(A, C);
        A._partials = twttr.templates;
        return A
    };
    twttr.view._setDefaultTemplate = function(A, B) {
        A.template(twttr.templates[twttr.util.underscore(B.split(".")[2]).toLowerCase()])
    }
} ());
twttr.klass("twttr.ViewStack",
function(A, B) {
    this.$referenceNode = $(A);
    this.operation = B || "append";
    this._cache = {};
    this._stack = []
}).methods({
    cached: function(A) {
        if (!twttr.is.string(A)) {
            A = A.viewId
        }
        return twttr.is.def(this._cache[A])
    },
    size: function() {
        return this._stack.length
    },
    contains: function(A) {
        return twttr.inArray(A, this._stack)
    },
    remove: function(A) {
        delete this._cache[A.viewId]
    },
    top: function(A) {
        return this._stack[this._stack.length - 1 - (A || 0)]
    },
    push: function(A) {
        if (this._stack[this._stack.length - 1]) {
            this._stack[this._stack.length - 1].hide()
        }
        if (!this.cached(A)) {
            this._cache[A.viewId] = A;
            A._viewstack = this;
            this._stack.push(A);
            A.render(this.$referenceNode, this.operation)
        } else {
            A = this._cache[A.viewId];
            this._stack.push(A)
        }
        A.show();
        return A
    },
    pop: function(C) {
        var B = this._stack.pop(),
        A = this._stack[this._stack.length - 1];
        if (B) {
            B.hide()
        }
        if (A && !C) {
            A.show()
        }
        return B ? B: null
    },
    reset: function(A) {
        while (this.pop()) {}
        if (A) {
            return this.push(A)
        }
    }
});
twttr.augString("twttr.puffin",
function() {
    var A = "http://search.twitter.com/hugeurl";
    var C = "http://search.twitter.com/search/puffin";
    var B = {
        url: A,
        dataType: "jsonp",
        type: "get",
        data: {
            format: "json"
        },
        success: function() {}
    };
    return {
        expand: function(D, E) {
            this.request({
                data: {
                    url: D
                },
                success: function(F) {
                    E(F)
                }
            })
        },
        bulkExpand: function(D, E) {
            this.request({
                url: C + "?" + $.param({
                    url: D
                }),
                success: function(F) {
                    E(F)
                }
            })
        },
        request: function(D) {
            if (twttr.decider.isAvailable("phoenix_puffin")) {
                $.ajax(twttr.merge({},
                B, D, true))
            }
        }
    }
} ()); (function() {
    twttr.klass("twttr.media.InlineMedia",
    function() {}).methods(twttr.EventProvider).statics({
        expansionCache: {},
        process: function(G, D) {
            var H = {},
            B = [],
            A = [],
            I = this;
            function C(P) {
                var N = null;
                outer: for (var M in twttr.media.types) {
                    var L = twttr.media.types[M];
                    for (var O = L._matchers.length - 1; O >= 0; O--) {
                        if (P.match(L._matchers[O])) {
                            N = L;
                            break outer
                        }
                    }
                }
                return N
            }
            function J(M) {
                var L = {
                    matched: [],
                    unmatched: []
                };
                $.each(M,
                function(P, O) {
                    var Q = false;
                    if (I.expansionCache[O]) {
                        Q = true;
                        O = I.expansionCache[O]
                    }
                    var N = C(O);
                    if (N) {
                        L.matched.push({
                            url: O,
                            mediaType: N
                        })
                    } else {
                        if (!Q) {
                            L.unmatched.push(O)
                        }
                    }
                });
                return L
            }
            function E(L) {
                var M = {};
                $.each(L,
                function(Q, P) {
                    var O = P.mediaType._namespace;
                    var N = H[P.url];
                    if (twttr.is.def(M[O])) {
                        M[O] = M[O].concat(N)
                    } else {
                        M[O] = N
                    }
                });
                return M
            }
            $.each(G,
            function(M, L) {
                $.each(L.links,
                function(O, P) {
                    var N = P.getAttribute("data-expanded-url") || P.href;
                    if (!twttr.is.def(H[N])) {
                        H[N] = [L.tweetId]
                    } else {
                        H[N].push(L.tweetId)
                    }
                })
            });
            var K = twttr.batchObject(H,
            function(M, L) {
                return M
            });
            var F = J(K);
            $.each(E(F.matched),
            function(M, L) {
                D(twttr.media.types[M.split(".").pop()], L)
            });
            if (!$.isEmptyObject(F.unmatched)) {
                twttr.puffin.bulkExpand(F.unmatched,
                function(M) {
                    if (!jQuery.isEmptyObject(M)) {
                        var L = [];
                        $.each(M,
                        function(O, P) {
                            I.expansionCache[O] = P;
                            var N = C(P);
                            if (N) {
                                L.push({
                                    url: O,
                                    mediaType: N
                                })
                            }
                        });
                        $.each(E(L),
                        function(O, N) {
                            D(twttr.media.types[O.split(".").pop()], N)
                        })
                    }
                })
            }
        }
    }).methods({
        linkifyTweetText: function(D) {
            var A = [];
            var C = [];
            var B = $("<div>" + twttr.util.linkify(D.text) + "</div>");
            if (D.entities && D.entities.urls) {
                twttr.each(D.entities.urls,
                function(E) {
                    if (E.expanded_url) {
                        A.push(E.expanded_url);
                        C.push(E.url)
                    }
                })
            }
            B.children("a.twitter-timeline-link").each(function() {
                if (!twttr.inArray(this.href, C)) {
                    A.push(this.href)
                }
            });
            return A
        },
        addAttribution: function(A) {
            if (!A.constructor._url) {
                return ""
            }
            if (A._customAttribution) {
                return A._customAttribution()
            }
            var B = "          <div class='media-attribution'>            <span>via</span><img width=16px height=16px src='{icon_url}'/><a target='_blank' data-media-type='{media_type}' class='media-attribution-link' href='{url}'>{title}</a>          </div>";
            return twttr.supplant(B, {
                url: A.constructor._url,
                icon_url: A.constructor._favicon || (A.constructor._url + "/favicon.ico"),
                title: A.constructor._title || A.constructor._name,
                media_type: A.constructor._name
            })
        },
        _findMatchAndRender: function(A, B, J) {
            var F = this;
            if (!A) {
                return
            }
            var K = {
                width: B.width
            };
            function H(N, M, O) {
                var L = new M(O);
                L._process(N,
                function() {
                    L.html(function(P) {
                        if (!B.hideAttribution) {
                            P += F.addAttribution(L)
                        }
                        J(L, P)
                    },
                    K)
                })
            }
            var C = false;
            var I = {
                url: B.linkToTweet ? B.linkToTweet: A
            };
            outer: for (var D in twttr.media.types) {
                var G = twttr.media.types[D];
                for (var E = G._matchers.length - 1; E >= 0; E--) {
                    if (A.match(G._matchers[E])) {
                        C = true;
                        H(RegExp.$1, G, I);
                        break outer
                    }
                }
            }
            return C
        },
        render: function(F, B, G) {
            if (twttr.is.fn(B)) {
                G = B;
                B = {}
            }
            var E = this;
            var A = this.linkifyTweetText(F);
            function C(I) {
                I = E.constructor.expansionCache[I] || I;
                var H = E._findMatchAndRender(I, B, G);
                if (!H) {
                    twttr.puffin.expand(I,
                    function(J) {
                        E._findMatchAndRender(J, B, G)
                    })
                }
            }
            for (var D = 0; D < A.length; D++) {
                C(A[D])
            }
        },
        renderPicsByThisUser: function(B, A, F) {
            if (twttr.is.fn(A)) {
                F = A;
                A = {}
            }
            var E = this;
            function C(J) {
                var I = E.constructor.expansionCache[J.picUrl] || J.picUrl;
                var H = twttr.merge({
                    linkToTweet: J.linkToTweet
                },
                A);
                var G = E._findMatchAndRender(I, H, F);
                if (!G) {
                    twttr.puffin.expand(I,
                    function(K) {
                        E._findMatchAndRender(K, H, F)
                    })
                }
            }
            for (var D = 0; D < B.length; D++) {
                C(B[D])
            }
        }
    });
    twttr.klass("twttr.media.MediaType",
    function(A) {
        this.options = A;
        this.data = {}
    });
    twttr.mediaType = function(B) {
        var A = twttr.klass(B,
        function() {
            twttr.media.MediaType.apply(this, arguments)
        });
        A.superclass(twttr.media.MediaType).statics({
            _matchers: [],
            matcher: function(C) {
                this._matchers.push(C);
                return this
            },
            matchers: function(C) {
                this._matchers.push.apply(this._matchers, C);
                return this
            },
            icon: function(C) {
                this._icon = C;
                return this
            },
            favicon: function(C) {
                this._favicon = C;
                return this
            },
            url: function(C) {
                this._url = C;
                return this
            },
            process: function(C) {
                this.prototype._process = C;
                return this
            },
            receivers: function(C) {
                this.prototype._receivers = C;
                return this
            },
            title: function(C) {
                this._title = C;
                return this
            }
        }).methods({
            html: function() {
                return "abstractMethod"
            },
            getIcon: function() {
                return this.constructor._icon
            },
            getName: function() {
                return this.constructor._name
            }
        });
        return A
    };
    twttr.mediaType("twttr.media.types.Youtube").title("YouTube").statics({
        tinyUrl: /youtu.be\/(\S+)/
    }).matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?youtube\.com\/watch(\S+)/g).matchers([twttr.media.types.Youtube.tinyUrl]).icon("video").url("http://youtube.com").process(function(B, A) {
        if (this.options.url.match(this.constructor.tinyUrl)) {
            this.data.id = RegExp.$1;
            A()
        } else {
            if (B.match(/(?:(?:\?|\&)v\=)?([\w-]+)(?:\&|$)/)) {
                this.data.id = RegExp.$1;
                A()
            }
        }
    }).methods({
        html: function(A) {
            var B = '<object width="446" height="350">                  <param name="movie" value="http://www.youtube.com/v/{id}?fs=1"/>                  <param name="allowFullScreen" value="true"/>                  <param name="allowscriptaccess" value="always"/>                  <embed src="http://www.youtube.com/v/{id}?fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="446" height="350"/>                </object>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.Twitter").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?twitter\.com\/(?:(?:#|#!)\/)?(?:\w{1,20})\/status\/(\S+)/gi).icon("generic").favicon("http://twitter.com/phoenix/favicon.ico").url("http://twitter.com").process(function(B, A) {
        var C = this;
        twttr.API.Status.find(B.replace(/\/$/, ""),
        function(D) {
            C.data.tweet = D;
            A()
        })
    }).methods({
        html: function(A) {
            var B = new twttr.views.LatestTweet(this.data.tweet).html();
            A(B)
        }
    });
    twttr.mediaType("twttr.media.types.Ustream").matchers([/\b(?:(?:https?\:\/\/)?(?:www\.)?)?ustream\.tv\/(recorded\/(?:\d+))/g, /\b(?:(?:https?\:\/\/)?(?:www\.)?)?ustream\.tv\/(channel\/(?:[\w-]+)\/?)/g]).icon("video").favicon("http://cdn2.ustream.tv/static/images/favicon:1.ico").url("http://ustream.tv").process(function(B, A) {
        var C = this;
        this.data.width = 390;
        this.data.height = 310;
        if (B.match(this.constructor.re.channel)) {
            $.ajax({
                url: "http://api.ustream.tv/json/channel/" + RegExp.$1 + "/getInfo",
                dataType: "jsonp",
                data: {
                    key: this.constructor.API_KEY
                },
                success: function(D) {
                    C.data.type = "channel";
                    C.data.embed = D.embedTag;
                    A()
                }
            })
        } else {
            if (B.match(this.constructor.re.video)) {
                this.data.type = "video";
                this.data.videoId = RegExp.$1;
                A()
            }
        }
    }).statics({
        API_KEY: "12ab548e85128e0d3182ba3a346c3428",
        re: {
            video: /^recorded\/(\d+)/,
            channel: /^channel\/([\w-]+)\/?/
        },
        templates: {
            video: '          <object width="{width}" height="{height}">            <param name="flashvars" value="autoplay=false&amp;vid={videoId}&amp;"/>            <param name="allowfullscreen" value="true"/>            <param name="allowscriptaccess" value="always"/>            <param name="src" value="http://www.ustream.tv/flash/video/{videoId}"/>            <embed              flashvars="loc=%2F&amp;autoplay=false&amp;vid={videoId}&amp;"              width="{width}"              height="{height}"              allowfullscreen="true"              allowscriptaccess="always"              src="http://www.ustream.tv/flash/video/{videoId}"              type="application/x-shockwave-flash"            />          </object>'
        }
    }).methods({
        html: function(A) {
            if (this.data.type === "channel") {
                A(this.data.embed)
            } else {
                A(twttr.supplant(this.constructor.templates[this.data.type], this.data))
            }
        }
    });
    twttr.mediaType("twttr.media.types.Vevo").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.))vevo\.com\/(\S+)/g).icon("video").url("http://vevo.com").process(function(B, A) {
        if (B.match(/.+\/(\w+)\/?$/i)) {
            this.data.id = RegExp.$1;
            A()
        }
    }).methods({
        html: function(A) {
            var B = '<object width="500" height="282">                  <param name="movie" value="http://www.vevo.com/VideoPlayer/Embedded?videoId={id}&playlist=false&autoplay=0&playerId=62FF0A5C-0D9E-4AC1-AF04-1D9E97EE3961&playerType=embedded"/>                  <param name="bgcolor" value="#000000"/>                  <param name="allowFullScreen" value="true"/>                  <param name="allowScriptAccess" value="always"/>                  <embed                   src="http://www.vevo.com/VideoPlayer/Embedded?videoId={id}&playlist=false&autoplay=0&playerId=62FF0A5C-0D9E-4AC1-AF04-1D9E97EE3961&playerType=embedded"                   type="application/x-shockwave-flash"                   allowfullscreen="true"                   allowscriptaccess="always"                   width="500"                   height="282"                   bgcolor="#000000"/>                </object>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.Flickr").statics({
        API_KEY: "2a56884b56a00758525eaa2fee16a798",
        SECRET: "7c794fe3256175b6",
        re: {
            photos: /(?:photos|people)\/([\w\@-]+)\/?$/,
            photo: /photos\/[\w\@-]+\/(\d+)(\/.*)?$/,
            set: /photos\/(?:[\w\@-]+)\/sets\/(\d+)\/?(?:show\/?)?$/,
            gallery: /photos\/([\w\@-]+)\/galleries\/(\d+)\/?$/,
            group: /groups\/([\w\@-]+)\/?(?:.*)?$/,
            shortUrl: /flic\.kr\/p\/([a-zA-Z0-9]+)\/?$/i,
            shortUrlPerson: /flic\.kr\/(?!p\/)([\w\@-]+)\/?$/i
        },
        photoTemplate: '<div class="flickr-photo"><a href="{href}" target="_blank"><img src="http://farm{farm}.static.flickr.com/{server}/{id}_{secret}.jpg"/></a></div>',
        setTemplate: '<a href="{href}" target="_blank"><img class="flickr-thumb" src="http://farm{farm}.static.flickr.com/{server}/{id}_{secret}_s.jpg"/></a>',
        defaultSlideshowFlashVars: {
            lang: "en-us",
            offsite: true,
            minH: 100,
            minW: 100
        },
        photoUserFlashVars: {
            user_id: "{user_id}",
            page_show_back_url: "/photos/{user_name}/",
            page_show_url: "/photos/{user_name}/show/"
        },
        photoGroupFlashVars: {
            group_id: "{group_id}",
            page_show_url: "/groups/{group_id}/pool/show/",
            page_show_back_url: "/groups/{group_id}/pool/"
        },
        photoSetFlashVars: {
            set_id: "{set_id}",
            page_show_back_url: "/photos/{user_name}/sets/{set_id}/",
            page_show_url: "/photos/{user_name}/sets/{set_id}/show/"
        },
        slideshowTemplate: '<embed type="application/x-shockwave-flash"                                  src="http://flickr.com/apps/slideshow/show.swf.v71649"                                  width="435"                                  height="420"                                  id="slideShowMovie"                                  bgcolor="#000000"                                  quality="high"                                  allowfullscreen="true"                                  allowscriptaccess="always"                                  flashvars={flashvars} />'
    }).matchers([/flickr\.com\/(?:photos|people)\/([\w\@-]+)\/?$/, /flickr\.com\/photos\/[\w\@-]+\/(\d+)(\/.*)?$/, /flickr\.com\/photos\/(?:[\w\@-]+)\/sets\/(\d+)\/?(?:show\/?)?$/, /flickr\.com\/photos\/([\w\@-]+)\/galleries\/(\d+)\/?$/, /flickr\.com\/groups\/([\w\@-]+)\/?(?:.*)?$/, /flic\.kr\/p\/[a-zA-Z0-9]+\/?$/i, /flic\.kr\/(?!p\/)([\w\@-]+)\/?$/i]).icon("photo").url("http://flickr.com").process(function(D, A) {
        var E = this;
        var C = this.options.url;
        if (C.match(twttr.media.types.Flickr.re.photos) || C.match(twttr.media.types.Flickr.re.shortUrlPerson)) {
            var F = RegExp.$1;
            this.lookUpUserPhotos(F, D, A)
        } else {
            if (C.match(twttr.media.types.Flickr.re.group)) {
                this.makeRequest({
                    data: {
                        method: "flickr.urls.lookupGroup",
                        url: "flickr.com/groups/" + RegExp.$1
                    },
                    success: function(H) {
                        var G = H.group.id;
                        E.makeRequest({
                            data: {
                                method: "flickr.groups.pools.getPhotos",
                                group_id: G
                            },
                            success: function(I) {
                                E.data.photos = I.photos.photo.slice(0, 16);
                                E.data.group_id = G;
                                A()
                            }
                        })
                    }
                })
            } else {
                if (C.match(twttr.media.types.Flickr.re.gallery)) {
                    this.makeRequest({
                        data: {
                            method: "flickr.urls.lookupGallery",
                            url: "flickr.com/photos/" + RegExp.$1 + "/galleries/" + RegExp.$2
                        },
                        success: function(H) {
                            var G = H.gallery.id;
                            E.makeRequest({
                                data: {
                                    method: "flickr.galleries.getPhotos",
                                    gallery_id: G
                                },
                                success: function(I) {
                                    E.data.photos = I.photos.photo.slice(0, 16);
                                    E.data.isGallery = 1;
                                    A()
                                }
                            })
                        }
                    })
                } else {
                    if (C.match(twttr.media.types.Flickr.re.photo)) {
                        var B = RegExp.$1;
                        this.makeRequest({
                            data: {
                                method: "flickr.photos.getInfo",
                                photo_id: B
                            },
                            success: function(G) {
                                E.data.photos = [G.photo];
                                A()
                            }
                        })
                    } else {
                        if (C.match(twttr.media.types.Flickr.re.shortUrl)) {
                            var B = this.base58(RegExp.$1);
                            this.makeRequest({
                                data: {
                                    method: "flickr.photos.getInfo",
                                    photo_id: B
                                },
                                success: function(G) {
                                    E.data.photos = [G.photo];
                                    A()
                                }
                            })
                        } else {
                            if (C.match(twttr.media.types.Flickr.re.set)) {
                                this.makeRequest({
                                    data: {
                                        method: "flickr.photosets.getPhotos",
                                        photoset_id: RegExp.$1
                                    },
                                    success: function(H) {
                                        var G = H.photoset.owner;
                                        E.data.photos = H.photoset.photo.slice(0, 16);
                                        twttr.each(E.data.photos,
                                        function(I) {
                                            I.owner = G
                                        });
                                        E.data.set_id = H.photoset.id;
                                        E.data.user_name = G;
                                        A()
                                    }
                                })
                            }
                        }
                    }
                }
            }
        }
        return false
    }).methods({
        FLICKR_PHOTO_URL: "http://flickr.com/photos",
        base58: function(D) {
            var F = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
            var B = D.length;
            var A = 0;
            var E = 1;
            for (var C = B - 1; C >= 0; C--) {
                A = A + E * F.indexOf(D[C]);
                E = E * F.length
            }
            return A
        },
        lookUpUserPhotos: function(D, B, A) {
            var C = this;
            this.makeRequest({
                data: {
                    method: "flickr.urls.lookupUser",
                    url: "flickr.com/photos/" + D
                },
                success: function(F) {
                    var E = F.user.id;
                    C.makeRequest({
                        data: {
                            method: "flickr.people.getPublicPhotos",
                            user_id: E
                        },
                        success: function(G) {
                            C.data.photos = G.photos.photo.slice(0, 16);
                            C.data.user_id = E;
                            C.data.user_name = D;
                            A()
                        }
                    })
                }
            })
        },
        createThumbList: function(B) {
            var A = this;
            return $.map(B,
            function(C, D) {
                C.href = [A.FLICKR_PHOTO_URL, C.owner, C.id].join("/");
                return twttr.supplant(twttr.media.types.Flickr.setTemplate, C)
            }).join("")
        },
        html: function(A) {
            var D = "";
            var B = twttr.media.types.Flickr;
            if (this.data.photos.length == 1) {
                this.data.photos[0].href = this.data.photos[0].urls.url[0]._content;
                D += twttr.supplant(B.photoTemplate, this.data.photos[0])
            } else {
                D = '<div class="flickr-group">' + this.createThumbList(this.data.photos) + "</div>";
                if (this.data.isGallery) {
                    A(D);
                    return
                }
                var C;
                if (this.data.set_id) {
                    C = B.photoSetFlashVars
                } else {
                    if (this.data.group_id) {
                        C = B.photoGroupFlashVars
                    } else {
                        C = B.photoUserFlashVars
                    }
                }
                C = twttr.merge({},
                B.defaultSlideshowFlashVars, C, true);
                var E = twttr.batchObject(C,
                function(G, F) {
                    return G + "=" + F
                }).join("&");
                E = twttr.supplant(E, this.data);
                D += twttr.supplant(B.slideshowTemplate, {
                    flashvars: E
                })
            }
            A(D)
        },
        makeRequest: function(B) {
            var A = {
                url: "http://www.flickr.com/services/rest",
                dataType: "jsonp",
                jsonp: "jsoncallback",
                data: {
                    format: "json",
                    api_key: twttr.media.types.Flickr.API_KEY
                },
                success: function(C) {}
            };
            $.ajax(twttr.merge({},
            A, B, true))
        }
    });
    twttr.mediaType("twttr.media.types.DeviantArt").title("deviantART").matchers([/^((?:https?\:\/\/)?(?:[\w-]+\.)deviantart\.com\/art\/(?:[\w\@-]+))/, /^((?:https?\:\/\/)?(?:[\w-]+\.)deviantart\.com\/deviation\/(?:[\w\@-]+))/, /^((?:https?\:\/\/)?(?:[\w-]+\.)deviantart\.com\/gallery\/#\/d(?:[\w\@-]+))/, /^((?:https?\:\/\/)?fav\.me\/(?:[\w\@-]+))/, /^((?:https?\:\/\/)?(?:[\w-]+\.)deviantart\.com\/view\/(?:[\w\@-]+))/]).icon("photo").url("http://deviantart.com").process(function(B, A) {
        $.ajax({
            url: "http://backend.deviantart.com/oembed",
            data: {
                url: B,
                format: "jsonp"
            },
            dataType: "jsonp",
            success: twttr.bind(this,
            function(C) {
                this.data.href = this.options.url;
                this.data.name = this.getName();
                this.data.src = C.thumbnail_url;
                this.data.author_name = C.author_name;
                this.data.author_url = C.author_url;
                A()
            })
        })
    }).methods({
        _customAttribution: function() {
            var A = "          <div class='media-attribution'>            <span>via</span> <a target='_blank' class='media-attribution-link' href='{author_url}'>{author_name}</a> from <img src='{icon_url}'/><a target='_blank' data-media-type='{media_type}' class='media-attribution-link' href='{url}'>{title}</a>          </div>";
            return twttr.supplant(A, {
                url: this.constructor._url,
                icon_url: this.constructor._favicon || (this.constructor._url + "/favicon.ico"),
                title: this.constructor._title || this.constructor._name,
                media_type: this.constructor._name,
                author_name: this.data.author_name,
                author_url: this.data.author_url
            })
        },
        html: function(A) {
            var B = '<div class="deviantart">                  <a class="inline-media-image" data-inline-type="{name}" href="{href}" target="_blank"><img src="{src}"/></a>                </div>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.Gist").matcher(/\b(?:https?\:\/\/)?gist\.github\.com\/(\S+)/g).icon("generic").url("http://gist.github.com").process(function(B, A) {
        B = B.replace(/\/$/, "");
        this.data.id = B;
        A()
    }).methods({
        html: function(A) {
            var B = '<div class="gist"><iframe src="http://gist.github.com/{id}.pibb" /></div>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.Vimeo").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?vimeo\.com\/(\S+)/g).icon("video").url("http://vimeo.com").process(function(B, A) {
        if (B.match(/\d+/)) {
            this.data.video_id = B;
            A()
        }
    }).methods({
        html: function(A, B) {
            $.ajax({
                url: "http://vimeo.com/api/oembed.json",
                dataType: "jsonp",
                data: {
                    url: "http://vimeo.com/" + this.data.video_id,
                    width: B.width || 400
                },
                success: function(C) {
                    A(C.html)
                }
            })
        }
    });
    twttr.mediaType("twttr.media.types.Etsy").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?etsy\.com\/(\S+)/g).icon("photo").url("http://etsy.com").process(function(B, A) {
        if (B.match(/^listing\/(\d+)(\/.*)?$/, "$1")) {
            this.data.itemId = RegExp.$1;
            this.data.href = this.options.url;
            this.data.name = this.getName();
            A()
        }
    }).methods({
        html: function(A) {
            var B = this;
            $.ajax({
                url: "http://openapi.etsy.com/v2/public/listings/" + this.data.itemId + ".js",
                dataType: "jsonp",
                data: {
                    detail_level: "high",
                    api_key: "qev732j7b8j44eg5pqsb38k4",
                    includes: "Images(url_170x135):6",
                    fields: "listing_id,title,price,currency_code,quantity"
                },
                success: function(F) {
                    var E = F.results[0];
                    B.data.title = E.title;
                    switch (E.currency_code) {
                    case "USD":
                        B.data.price = E.quantity + " for $" + (E.price || 0);
                        break;
                    default:
                        B.data.price = E.quantity + " for " + (E.price || 0) + " " + E.currency_code;
                        break
                    }
                    var C = $.map(E.Images,
                    function(H, G) {
                        return '<a class="inline-media-image" data-inline-type="{name}" target="_blank" href="{href}"><img class="thumb" src="' + H.url_170x135 + '"/></a>'
                    }).join("");
                    var D = '              <div class="etsy">                <h3>{title}</h3>                <p>{price}</p>                <p>' + C + "</p>              </div>";
                    A(twttr.supplant(D, B.data))
                }
            })
        }
    });
    twttr.mediaType("twttr.media.types.Photozou").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?photozou\.(?:com|jp)\/photo\/show\/\d+\/(\S+)/g).icon("photo").url("http://photozou.jp").process(function(B, A) {
        this.data.src = "http://photozou.jp/p/img/" + B;
        this.data.href = this.options.url;
        this.data.name = this.getName();
        A()
    }).methods({
        html: function(A) {
            var B = '<div class="photozou">                  <a class="inline-media-image" data-inline-type="{name}" href="{href}" target="_blank"><img src="{src}"/></a>                </div>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.TwitPic").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?twitpic\.com\/(?!(?:place|photos|events)\/)(\S+)/g).icon("photo").url("http://twitpic.com").process(function(B, A) {
        this.data.src = B.replace(/^(\w+)/, "$1");
        this.data.href = this.options.url;
        this.data.name = this.getName();
        A()
    }).methods({
        html: function(A) {
            var B = '<div class="twitpic">                  <a class="inline-media-image" data-inline-type="{name}" href="{href}" target="_blank"><img src="http://twitpic.com/show/large/{src}"/></a>                </div>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.Twitgoo").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?twitgoo\.com\/(?!a\/)(\S+)/g).icon("photo").url("http://twitgoo.com").process(function(B, A) {
        this.data.src = B.replace(/^(\w+)/, "$1");
        this.data.href = this.options.url;
        this.data.name = this.getName();
        A()
    }).methods({
        html: function(A) {
            var B = '<div class="twitgoo">                    <a class="inline-media-image" data-inline-type="{name}" href="{href}" target="_blank"><img src="http://twitgoo.com/{src}/img"/></a>                  </div>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.DailyBooth").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?dailybooth\.com\/((?:u\/\S+)|(?:.+\/\S+))/g).icon("photo").url("http://dailybooth.com").process(function(B, A) {
        var D = this;
        this.data.href = this.options.url;
        this.data.name = this.getName();
        if (B.match(/u\/(\w+)(?:\/|$)/)) {
            var E = parseInt(RegExp.$1, 36);
            var C = this.getBaseTen(E)
        } else {
            var C = B.match(/\w+\/(\w+)/);
            if (C) {
                C = C[1]
            } else {
                return false
            }
        }
        $.ajax({
            url: "http://api.dailybooth.com/v1/picture/" + C + ".json",
            dataType: "jsonp",
            type: "get",
            success: function(F) {
                D.data.src = F.urls.large;
                A()
            }
        })
    }).methods({
        html: function(A) {
            var B = '<div class="dailybooth">                  <a class="inline-media-image" data-inline-type="{name}" href="{href}" target="_blank"><img src="{src}"/></a>                </div>';
            A(twttr.supplant(B, this.data))
        },
        getBaseTen: function(C) {
            if (Number.prototype.toFixed) {
                C = C.toFixed(5);
                C = parseFloat(C)
            } else {
                var A = Math.floor(C);
                var B = C - A;
                C = A + Math.round(B * 100000000000000) / 100000000000000
            }
            return C
        }
    });
    twttr.mediaType("twttr.media.types.YFrog").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?yfrog\.(?:com|ru|com\.tr|it|fr|co\.il|co\.uk|com\.pl|pl|eu|us)\/(\S+)/g).icon("photo").url("http://yfrog.com").process(function(B, A) {
        if (B.match(/(\w+)/)) {
            this.data.media_id = RegExp.$1;
            this.data.href = this.options.url.replace(/\/$/, "");
            this.data.name = this.getName();
            A()
        }
    }).methods({
        html: function(A) {
            var C = this.data.media_id[this.data.media_id.length - 1];
            var B = null;
            if (C == "j" || C == "p" || C == "b" || C == "t" || C == "g") {
                B = '<div class="yfrog"><a class="inline-media-image" data-inline-type="{name}" href="{href}" target="_blank"><img src="http://yfrog.com/{media_id}:iphone"></a></div>'
            } else {
                if (C == "z" || C == "f" || C == "s") {
                    B = '            <embed               src="http://yfrog.com/{media_id}:embed"               width="100%"               allowFullScreen="true"               wmode="transparent"               type="application/x-shockwave-flash"             />'
                }
            }
            if (B) {
                A(twttr.supplant(B, this.data))
            }
        }
    });
    twttr.mediaType("twttr.media.types.Plixi").matchers([/\b(?:(?:https?\:\/\/)?(?:www\.)?)?tweetphoto\.com\/(\S+)/g, /\b(?:(?:https?\:\/\/)?(?:www\.)?)?plixi\.com\/(\S+)/g]).icon("photo").url("http://plixi.com/").process(function(B, A) {
        var C = this;
        if (B.match(/(\d+)/)) {
            $.ajax({
                url: "http://tweetphotoapi.com/api/tpapi.svc/jsonp/photos/" + RegExp.$1,
                dataType: "jsonp",
                success: function(D) {
                    C.data.src = D.MediumImageUrl;
                    C.data.href = C.options.url;
                    C.data.name = C.getName();
                    A()
                }
            })
        }
    }).methods({
        html: function(A) {
            var B = '<div class="plixi"><a class="inline-media-image" data-inline-type="{name}" href="{href}" target="_blank"><img src="{src}" /></a></div>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.Kiva").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)kiva\.org\/lend\/(\d+)/g).icon("generic").url("http://kiva.org").process(function(B, A) {
        var C = this;
        $.ajax({
            url: "http://www.kiva.org/services/oembed",
            dataType: "jsonp",
            jsonp: "jsonp",
            data: {
                url: "http://www.kiva.org/lend/" + B,
                format: "jsonp"
            },
            success: function(D) {
                C.data.html = D.html;
                A()
            }
        })
    }).methods({
        html: function(A) {
            A(this.data.html)
        }
    });
    twttr.mediaType("twttr.media.types.TwitVid").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)?twitvid\.com\/(\S+)/g).icon("video").url("http://twitvid.com").process(function(B, A) {
        this.data.media_id = B;
        A()
    }).methods({
        html: function(A) {
            var B = '          <object width="425" height="344">             <param name="movie" value="http://www.twitvid.com/player/{media_id}"></param>             <param name="allowFullScreen" value="true"></param>             <embed type="application/x-shockwave-flash"                    src="http://www.twitvid.com/player/{media_id}"                     quality="high"                     allowscriptaccess="always"                     allowNetworking="all"                     allowfullscreen="true"                     wmode="transparent"                     height="344"                     width="425" />          </object>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.GoogleVideo").matcher(/\b(?:(?:https?\:\/\/)?(?:www\.)?)video\.google\.com\/(\S+)/g).icon("video").url("http://video.google.com").process(function(B, A) {
        if (B.match(/\?docid=(\S+)/)) {
            this.data.doc_id = RegExp.$1
        }
        A()
    }).methods({
        html: function(A) {
            var B = '          <embed type="application/x-shockwave-flash"                  id="VideoPlayback"                  src="http://video.google.com/googleplayer.swf?docid={doc_id}&hl=en&fs=true"                  style="width:400px;height:326px"                  allowFullScreen="true"                  allowScriptAccess="always" />';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.JustinTV").matcher(/http:\/\/([^\/]*\.)?justin\.tv\/[a-zA-Z0-9]+(\/b\/\d+)?\/?(\?.*?)?(#.*)?$/g).icon("video").url("http://justin.tv").process(function(B, A) {
        var C = this;
        $.getJSON("http://api.justin.tv/api/embed/from_url.json?jsonp=?&url=" + this.options.url,
        function(D) {
            if (!D.error) {
                C.data.embed = D.html;
                A()
            }
        })
    }).methods({
        html: function(A) {
            var B = '<div class="inlinemedia">{embed}</div>';
            A(twttr.supplant(B, this.data))
        }
    });
    twttr.mediaType("twttr.media.types.Twaudio").matcher(/\b(?:(?:https?\:\/\/)?(?:[\w-]+\.))?twaud\.io\/(\S+)/g).icon("video").url("http://twaud.io").process(function(B, A) {
        var C = this;
        $.ajax({
            url: "http://twaud.io/oembed.json",
            dataType: "jsonp",
            data: {
                url: "http://twaud.io/" + B
            },
            success: function(D) {
                C.data.embed = D.html;
                A()
            }
        })
    }).methods({
        html: function(A) {
            A(this.data.embed)
        }
    });
    twttr.mediaType("twttr.media.types.Kickstarter").matcher(/(\b(?:(?:https?\:\/\/)?(?:[\w-]+\.))?kickstarter.com\/projects\/\S+)/g).icon("generic").process(function(B, A) {
        var D = this;
        var C = B;
        if (C.slice( - 1) !== "/") {
            C += "/"
        }
        C += "widget/twitter.jpg";
        this.data.embed = "<img src='" + C + "' />";
        A()
    }).methods({
        html: function(A) {
            A(this.data.embed)
        }
    })
} ());
twttr.klass("twttr.DesktopNotifier",
function() {}).methods({
    HasSupport: function() {
        if (window.webkitNotifications) {
            return true
        } else {
            return false
        }
    },
    RequestPermission: function(A) {
        window.webkitNotifications.requestPermission(function() {
            if (A) {
                A(window.webkitNotifications.checkPermission() == 0)
            }
        })
    },
    Notify: function(C, D, A) {
        if (window.webkitNotifications.checkPermission() == 0) {
            var B = window.webkitNotifications.createNotification(C, D, A);
            B.show();
            return true
        }
        return false
    }
});
twttr.klass("twttr.geo",
function() {}).statics({
    LOG_VERSION: 3,
    UI_VERSION: 2,
    LOCATION_CACHE_INTERVAL: 30000,
    BROWSER_GEO_BANNER_APPEAR_DELAY: 500,
    BROWSER_GEO_BANNER_DISAPPEAR_INTERVAL: 100,
    PLACE_SEARCH_AUTOCOMPLETE_DELAY: 250,
    MAX_NEARBY_PLACES: 12,
    MAX_PLACE_SEARCH_RESULTS: 50,
    MAX_PLACE_AUTOCOMPLETE_RESULTS: 8,
    PLACE_SEARCH_RESULTS_PER_PAGE: 5,
    PLACE_CREATION_DEFAULT_ZOOM_LEVEL: 15,
    SIMILAR_PLACES_MAX_ZOOM_LEVEL: 17,
    ACCEPTABLE_LOCATION_ACCURACY: 1000,
    ACCEPTABLE_LOCATION_TIMEOUT: 5000,
    LOCATION_TIMEOUT: 15000,
    LOCATION_MAXIMUM_AGE: 60000,
    MAX_SIMILAR_PLACES: 5,
    TARGET_POI_NAME_LENGTH: 40,
    TARGET_PLACE_NAME_LENGTH: 50,
    POI_MARKER_SIZE: {
        width: 43,
        height: 32
    },
    POI_MARKER_HOTSPOT: {
        x: 14,
        y: 33
    },
    POI_MAP_DEAD_ZONE: {
        left: 4,
        top: 24,
        right: 6,
        bottom: 0
    },
    geoEnabled: null,
    currentLocation: {},
    queryParams: {},
    mapsTimeout: 10000,
    mapsListeners: [],
    Exceptions: {
        GeoSupportException: function() {
            this.msg = _("This browser does not support GeoLocation")
        }
    },
    parseQueryParams: function() {
        return twttr.geo.unparam(window.location.search.substr(1))
    },
    mapsInitialized: function() {
        while (twttr.geo.mapsListeners.length) {
            var A = twttr.geo.mapsListeners.shift();
            A()
        }
    },
    loadMaps: function(C) {
        if (twttr.geo.mapsAvailable()) {
            C()
        } else {
            twttr.geo.mapsListeners.push(C);
            if (twttr.geo.mapsListeners.length == 1) {
                var B = window.location.protocol === "https:" ? "https://maps-api-ssl.google.com": "http://maps.google.com";
                B += "/maps/api/js?v=3&sensor=false&callback=twttr.geo.mapsInitialized";
                if (window.location.hostname.match(/^(.+\.)?twitter\.com$/)) {
                    B += "&client=free-twitter"
                }
                var A = document.createElement("script");
                A.type = "text/javascript";
                A.src = B;
                document.body.appendChild(A);
                setTimeout(twttr.geo.mapsInitialized, twttr.geo.mapsTimeout)
            }
        }
    },
    mapsAvailable: function() {
        return typeof google != "undefined" && google.maps !== undefined
    },
    getBestContainer: function(A) {
        if (!A) {
            return {
                name: "",
                full_name: "",
                contained_within: [],
                place_type: "city",
                bounding_box: {
                    type: "Polygon",
                    coordinates: [[[ - 122.51368188, 37.70813196], [ - 122.35845384, 37.70813196], [ - 122.35845384, 37.83245301], [ - 122.51368188, 37.83245301]]]
                }
            }
        }
        var B = {
            name: A.part_of_name || "",
            full_name: A.part_of_name || "",
            contained_within: [],
            place_type: "city"
        };
        if (A.contained_within) {
            twttr.every(A.contained_within,
            function(C) {
                B = C;
                return C.place_type != "city"
            })
        }
        return B
    },
    getBestCity: function(A) {
        return (A && A.place_type == "city") ? A: twttr.geo.getBestContainer(A)
    },
    getLocationFromPlace: function(A) {
        if (!A || !A.bounding_box || A.bounding_box.type != "Polygon" || !A.bounding_box.coordinates) {
            return null
        }
        var B = A.bounding_box.coordinates[0];
        if (!B || B.length != 4) {
            return null
        }
        return {
            accuracy: 500 * twttr.geo.greatCircleDistanceInKm(B[0][1], B[0][0], B[2][1], B[2][0]),
            latitude: (B[0][1] + B[2][1]) * 0.5,
            longitude: (B[0][0] + B[2][0]) * 0.5
        }
    },
    getPlacePageLinkFromPlace: function(A) {
        return "/search?" + $.param({
            q: "place:" + A.id,
            format: "html"
        })
    },
    getPlaceFullAddressAndMapLink: function(A) {
        var C = [twttr.geo.getPlaceAttribute(A, "street_address"), A.contained_within && A.contained_within.length > 0 ? A.contained_within[0].full_name: null];
        C = twttr.filter(C,
        function(D) {
            return D
        }).join(", ");
        var B = A.place_type == "poi" ? C: A.name + ", " + C;
        return {
            full_address: C,
            map_link: "http://maps.google.com/maps?" + $.param({
                q: B
            })
        }
    },
    placesFromApi: function(B) {
        var A = [];
        B.each(function(C) {
            A.push(C.data())
        });
        return A
    },
    getPlaceAttribute: function(A, B) {
        return (A.attributes && A.attributes[B]) || ""
    },
    getPlaceDetails: function(B) {
        var A = twttr.geo.getPlaceAttribute(B, "street_address");
        if (A) {
            return A
        }
        switch (B.place_type) {
        case "city":
            return _("a city");
        case "neighborhood":
            return _("a neighborhood");
        case "country":
            return _("a country");
        case "admin":
            return _("a state or province");
        default:
            return twttr.geo.getBestContainer(B).name
        }
    },
    getFullPlace: function(A) {
        return $.extend({},
        A, {
            address: twttr.geo.getPlaceAttribute(A, "street_address"),
            container: twttr.geo.getBestContainer(A).full_name,
            phone: twttr.geo.getPlaceAttribute(A, "phone"),
            place_id: A.id,
            place_name: A.full_name
        },
        twttr.geo.getPlaceFullAddressAndMapLink(A))
    },
    formatPlaceName: function(A, B) {
        if (A.length <= B) {
            return A
        }
        A = A.replace(/ [(].*[)]/g, "");
        if (A.length <= B) {
            return A
        }
        var C = "...";
        return A.substr(0, B - C.length) + C
    },
    renderPlace: function(C, A) {
        var B = $.extend({},
        A);
        B.is_poi = A.place_type == "poi";
        if (B.is_poi) {
            B.formatted_name = twttr.geo.formatPlaceName(A.name, twttr.geo.TARGET_POI_NAME_LENGTH)
        } else {
            B.formatted_name = twttr.geo.formatPlaceName(A.full_name, twttr.geo.TARGET_PLACE_NAME_LENGTH)
        }
        B.full_address = twttr.geo.getPlaceFullAddressAndMapLink(A).full_address;
        B.details = twttr.geo.getPlaceDetails(A);
        return (new twttr.views[C](B)).$html()
    },
    geoScribe: function(B, C) {
        var D = twttr.currentUser ? twttr.helpers.parseDateString(twttr.currentUser.createdAt) : 0;
        var A = $.extend({
            ui_version: twttr.geo.UI_VERSION,
            log_version: twttr.geo.LOG_VERSION,
            user_created_at: D
        },
        C);
        twttr.scribble(B, A, "geo_checkins")
    },
    resetGeoControls: function() {
        if (twttr.geo.manager) {
            twttr.geo.manager.showCurrentStatus()
        } else {
            twttr.geo.manager = new twttr.GeoManager()
        }
    },
    greatCircleDistanceInKm: function(H, F, G, E) {
        var C = Math.PI / 180;
        var A = Math.sin((G - H) * C * 0.5);
        var B = Math.sin((E - F) * C * 0.5);
        var D = A * A + Math.cos(H * C) * Math.cos(G * C) * B * B;
        return 12742 * Math.atan2(Math.sqrt(D), Math.sqrt(1 - D))
    },
    unparam: function(F) {
        var E = {};
        var C = F.split("&");
        for (var B = 0, A = C.length; B < A; B++) {
            var D = C[B].split("=", 2);
            E[decodeURIComponent(D[0])] = (D.length == 2 ? decodeURIComponent(D[1].replace(/\+/g, " ")) : null)
        }
        return E
    },
    helpText: function(A) {
        A.each(function() {
            var C = $(this);
            var B = C.hasClass("help-focusable");
            if (B) {
                C.mouseup(function(D) {
                    if (!twttr.geo.helpVal(C) == "") {
                        C.select();
                        D.preventDefault()
                    }
                })
            }
            C.focus(function(D) {
                twttr.geo.setHelpState(C, false, B)
            }).blur(function() {
                if (document.selection) {
                    document.selection.empty()
                } else {
                    getSelection().removeAllRanges()
                }
                twttr.geo.setHelpState(C, true)
            });
            twttr.geo.setHelpState(C, true)
        });
        return A
    },
    helpVal: function(B) {
        var A = $.trim(B.val());
        return A == B.attr("title") ? "": A
    },
    setHelpState: function(B, A, C) {
        B.each(function() {
            var E = $(this);
            var D = "help-text";
            if (A) {
                if (!twttr.geo.helpVal(E)) {
                    E.val(E.attr("title"));
                    E.addClass(D);
                    if (this.hasFocus && E.hasClass("help-focusable")) {
                        E.select()
                    }
                } else {
                    E.removeClass(D)
                }
            } else {
                E.removeClass(D);
                if (!twttr.geo.helpVal(E)) {
                    if (C) {
                        E.select()
                    } else {
                        E.val("")
                    }
                }
            }
        })
    },
    selectOnClick: function(A) {
        A.each(function() {
            var C = $(this);
            var B = true;
            C.click(function() {
                if (B) {
                    B = false;
                    this.select()
                }
            }).blur(function() {
                B = true
            })
        });
        return A
    },
    log: function(A, D) {
        if (!twttr.decider.isAvailable("geo_diagnostics")) {
            return
        }
        if (typeof(D) === "undefined") {
            D = false
        }
        function E() {
            $(".geo_log_text").text(twttr.geo.logData)
        }
        if (twttr.geo.logData === undefined) {
            twttr.geo.logData = "";
            var B = $('<li><a href="#">' + _("Geo diagnostics") + "</a></li>");
            B.find("a").click(function(F) {
                F.preventDefault();
                if (twttr.geo.logDialog) {
                    twttr.geo.logDialog.destroy()
                }
                twttr.geo.logDialog = new twttr.widget.GeoDialog({
                    css: {
                        width: 700
                    },
                    template: {
                        title: "Geo diagnostics",
                        content: '<textarea rows="12" cols="80" style="width:100%" class="geo_log_text"/>'
                    }
                });
                E();
                twttr.geo.logDialog.open()
            });
            $("ul.profile-dropdown").append(B)
        }
        if (D || !twttr.geo.t0) {
            twttr.geo.t0 = (new Date()).getTime();
            twttr.geo.logData = ""
        }
        var C = (((new Date()).getTime() - twttr.geo.t0) + 1000000).toFixed().toString().slice( - 6);
        twttr.geo.logData += C + " " + A + "\n";
        E()
    }
});
twttr.klass("twttr.geo.autocomplete",
function(A) {
    var B = this;
    B.opts = twttr.merge({
        getInputVal: function() {
            return B.opts.$input.val()
        },
        hoverClass: "hover",
        delay: 350
    },
    A);
    B.cache = {};
    B._clearFakeFocus();
    B.opts.$input.keydown(function(C) {
        switch (C.keyCode) {
        case 38:
            B.arrowUp();
            break;
        case 40:
            B.arrowDown();
            break;
        case 13:
            if (!B.hasFakeFocus) {
                return
            }
            B.$fakeFocus.click();
            break;
        case 27:
            if (B.opts.$dropdown.is(":visible")) {
                B.hide()
            } else {
                return
            }
            break;
        case 9:
            if (B.opts.$dropdown.is(":visible")) {
                B.hide()
            }
            return;
        default:
            B._onInputChange();
            return
        }
        B.keyDownEvent = true;
        C.stopPropagation();
        C.preventDefault()
    }).keypress(function(C) {
        if (C.charCode == 0 && (C.keyCode == 38 || C.keyCode == 40)) {
            if (!B.keyDownEvent) {
                if (C.keyCode == 38) {
                    B.arrowUp()
                } else {
                    B.arrowDown()
                }
            }
            B.keyDownEvent = false;
            C.preventDefault()
        }
    }).change(function() {
        B._onInputChange()
    }).blur(function() {
        if (!B.hovering) {
            B.hide()
        }
    })
}).method("arrowDown",
function() {
    if (this.hasFakeFocus) {
        this._setFakeFocus(this.$fakeFocus.next())
    } else {
        this._show()
    }
}).method("arrowUp",
function() {
    this._setFakeFocus(this.$fakeFocus.prev())
}).method("hide",
function() {
    this._clearFakeFocus();
    this.opts.$dropdown.hide();
    this.displayedInputVal = this.opts.getInputVal()
}).method("_show",
function() {
    this.displayedInputVal = "";
    this._display();
    this._setFakeFocus(this.opts.$dropdown.children(":first"))
}).method("_clearFakeFocus",
function() {
    this.$fakeFocus = $([]);
    this.hasFakeFocus = false;
    this.opts.$dropdown.children().removeClass(this.opts.HoverClass)
}).method("_setFakeFocus",
function(A) {
    if (A.length > 0) {
        this.hasFakeFocus = true;
        this.$fakeFocus = A;
        this.$fakeFocus.addClass(this.opts.hoverClass).siblings().removeClass(this.opts.hoverClass)
    }
}).method("_onInputChange",
function() {
    var A = this;
    setTimeout(function() {
        A._display()
    },
    0)
}).method("_display",
function() {
    var B = this;
    var A = B.opts.getInputVal();
    if (B.displayedInputVal != A) {
        B._clearFakeFocus();
        var D = B.opts.$dropdown.hide().empty();
        B.displayedInputVal = "";
        var C = B.cache[A];
        if (C) {
            twttr.each(C,
            function(G, F) {
                D.append(B.opts.renderMatch(G, F, C))
            });
            D.children().hover(function() {
                if (B.hasFakeFocus) {
                    B._setFakeFocus($(this))
                } else {
                    $(this).addClass(B.opts.hoverClass)
                }
                B.hovering = true
            },
            function() {
                if (!B.hasFakeFocus) {
                    $(this).removeClass(B.opts.hoverClass)
                }
                B.hovering = false
            });
            var E = B.opts.$input.position();
            D.css({
                left: E.left,
                top: E.top + B.opts.$input.outerHeight() - 1
            }).show();
            B.displayedInputVal = A
        } else {
            if (A && C === undefined) {
                B._fetch(A)
            }
        }
    }
}).method("_fetch",
function(A) {
    var B = this;
    clearTimeout(B.timerId);
    B.timerId = setTimeout(function() {
        B.cache[A] = false;
        B.opts.fetchMatches(A,
        function(C) {
            if (C && C.length > 0) {
                B.cache[A] = C;
                B._display()
            }
        },
        function() {
            B.cache[A] = undefined
        })
    },
    B.opts.delay)
});
twttr.klass("twttr.geo.Locator",
function(B) {
    var A = this;
    A.position = null;
    A.locator = null;
    A.locatorType = "none";
    A.browserGeoPermissionsHelpBannerView = "";
    if (B && B.lat !== undefined && B.lon !== undefined) {
        A.locatorType = "manual";
        A.locator = {
            watchPosition: function(C) {
                C({
                    coords: {
                        latitude: B.lat,
                        longitude: B.lon,
                        accuracy: parseInt(B.accuracy) || 200
                    }
                });
                return 0
            },
            clearWatch: function() {}
        }
    } else {
        if (navigator && navigator.geolocation) {
            A.locatorType = "html5";
            A.locator = navigator.geolocation;
            if (navigator.userAgent.indexOf("Firefox") != -1) {
                A.browserGeoPermissionsHelpBannerView = "GeoFirefoxBanner"
            } else {
                if (navigator.userAgent.indexOf("Chrome") != -1) {
                    A.browserGeoPermissionsHelpBannerView = "GeoChromeBanner"
                } else {
                    if (navigator.userAgent.indexOf("MSIE") != -1 && navigator.userAgent.indexOf("GTB") != -1) {
                        A.browserGeoPermissionsHelpBannerView = "GeoIeGoogleToolbarBanner"
                    }
                }
            }
        } else {
            if (typeof google != "undefined" && typeof google.gears != "undefined") {
                A.locatorType = "gears";
                A.locator = google.gears.factory.create("beta.geolocation")
            }
        }
    }
}).method("isLocatable",
function() {
    return !! (this.locator)
}).method("getLocation",
function(A) {
    var C = this;
    C.bannerShown = false;
    if (!C.isLocatable()) {
        throw new twttr.geo.Exceptions.GeoSupportException()
    }
    var B = $.extend({
        onSuccess: function(D) {},
        onFailure: function(D) {},
        options: {
            timeout: twttr.geo.LOCATION_TIMEOUT,
            enableHighAcuracy: true,
            maximumAge: twttr.geo.LOCATION_MAXIMUM_AGE
        }
    },
    A);
    if (!C.getBrowserGeoPermissionsHelpBannerSeen()) {
        C.detectBrowserGeoPermissionsBanner()
    }
    C.position = null;
    C.waitForAcceptableId = setTimeout(function() {
        C.waitForAcceptableId = null;
        if (C.watchId != null) {
            C.watchPositionAcceptable(B.onSuccess)
        }
    },
    twttr.geo.ACCEPTABLE_LOCATION_TIMEOUT);
    C.watchId = null;
    twttr.geo.log("Watch position: " + $.param(B.options));
    C.watchId = C.locator.watchPosition(function(D) {
        setTimeout(function() {
            if (C.watchId != null) {
                C.watchPositionSuccess(D, B.onSuccess)
            }
        },
        0)
    },
    function(D) {
        setTimeout(function() {
            if (C.watchId != null) {
                C.watchPositionError(D, B.onFailure)
            }
        },
        0)
    },
    B.options)
}).method("watchPositionSuccess",
function(A, C) {
    var B = this;
    B.setBrowserGeoPermissionsHelpBannerSeen();
    B.position = {
        latitude: A.coords.latitude,
        longitude: A.coords.longitude,
        accuracy: A.coords.accuracy
    };
    if (typeof(B.position.accuracy) != "number") {
        B.position.accuracy = 0
    }
    twttr.geo.log("Watch position success: " + $.param(B.position));
    if (B.waitForAcceptableId == null || (B.position.accuracy != undefined && B.position.accuracy < twttr.geo.ACCEPTABLE_LOCATION_ACCURACY)) {
        B.watchPositionAcceptable(C)
    }
}).method("watchPositionError",
function(D, E) {
    var F = this;
    F.setBrowserGeoPermissionsHelpBannerSeen();
    twttr.geo.log("Watch position error: " + D.code);
    var C = (D.code === D.PERMISSION_DENIED);
    var A = {
        allowRetry: !C,
        msg: C ? _("Please grant your web browser permission to tell Twitter where you are.") : _("We were unable to detect your location.")
    };
    var B = "error_" + D.code;
    F.scribeLocationDetection(B);
    if (F.bannerShown) {
        F.scribeLocationBanner(B)
    }
    if (C) {
        twttr.showMessage(A.msg)
    }
    F.watchPositionCleanup();
    E(A)
}).method("watchPositionAcceptable",
function(B) {
    var A = this;
    if (A.position) {
        A.watchPositionCleanup();
        B(A.position);
        twttr.geo.log("Watch position accepted: " + $.param(A.position));
        A.scribeLocationDetection("success", A.position);
        if (A.bannerShown) {
            A.scribeLocationBanner("success")
        }
    }
}).method("watchPositionCleanup",
function() {
    var A = this;
    clearTimeout(A.waitForAcceptableId);
    A.locator.clearWatch(A.watchId);
    A.watchId = null
}).method("getWindowHeight",
function() {
    return $(window).height()
}).method("getBrowserGeoPermissionsHelpBannerSeen",
function() {
    return $.cookie("geo_browser_help_banner")
}).method("setBrowserGeoPermissionsHelpBannerSeen",
function() {
    var A = this;
    if (A.browserGeoPermissionsHelpBannerView) {
        A.clearDetectBrowserGeoPermissionsBanner();
        if (!A.getBrowserGeoPermissionsHelpBannerSeen()) {
            $.cookie("geo_browser_help_banner", "1", {
                expires: 3650
            })
        }
    }
}).method("showBrowserGeoPermissionsHelpBanner",
function() {
    $("body").append((new twttr.views[this.browserGeoPermissionsHelpBannerView]()).html())
}).method("detectBrowserGeoPermissionsBanner",
function() {
    var B = this;
    if (B.browserGeoPermissionsHelpBannerView) {
        var A = B.getWindowHeight();
        B.bannerCleared = false;
        B.browserGeoPermissionsHelpTimer = setTimeout(function() {
            if (B.getWindowHeight() < A) {
                B.showBrowserGeoPermissionsHelpBanner();
                B.bannerShown = true;
                B.scribeLocationBanner("shown");
                B.browserGeoPermissionsHelpInterval = setInterval(function() {
                    if (B.getWindowHeight() == A) {
                        B.clearDetectBrowserGeoPermissionsBanner()
                    }
                },
                twttr.geo.BROWSER_GEO_BANNER_DISAPPEAR_INTERVAL)
            }
        },
        twttr.geo.BROWSER_GEO_BANNER_APPEAR_DELAY)
    }
}).method("clearDetectBrowserGeoPermissionsBanner",
function() {
    var A = this;
    if (!A.bannerCleared) {
        A.bannerCleared = true;
        clearTimeout(A.browserGeoPermissionsHelpTimer);
        clearInterval(A.browserGeoPermissionsHelpInterval);
        if (A.bannerShown) {
            A.scribeLocationBanner("cleared")
        }
        $("#geo_browser_help_banner").remove()
    }
}).method("scribeLocationDetection",
function(A, B) {
    twttr.geo.geoScribe("location_detection", $.extend({
        status: A,
        locator_type: this.locatorType,
        banner_shown: this.bannerShown,
        banner_type: this.browserGeoPermissionsHelpBannerView
    },
    B))
}).method("scribeLocationBanner",
function(A, B) {
    twttr.geo.geoScribe("location_banner", $.extend({
        status: A,
        locator_type: this.locatorType,
        banner_type: this.browserGeoPermissionsHelpBannerView
    },
    B))
});
twttr.klass("twttr.GeoManager",
function() {
    var A = this;
    if (twttr.geo.geoEnabled == null) {
        twttr.geo.geoEnabled = twttr.currentUser && twttr.currentUser.geoEnabled
    }
    twttr.geo.queryParams = twttr.geo.parseQueryParams();
    if (twttr.geo.queryParams.ip) {
        twttr.remoteIP = twttr.geo.queryParams.ip
    }
    A.locator = new twttr.geo.Locator(twttr.geo.queryParams);
    $(".geo_enable_webclient").die("click");
    $(".geo_enable_webclient").live("click",
    function(B) {
        B.preventDefault();
        A.enableGeoForWebClient()
    });
    $(".geo_disable_webclient").die("click");
    $(".geo_disable_webclient").live("click",
    function(B) {
        B.preventDefault();
        A.disableGeoForWebClient()
    });
    if (!twttr.decider.isAvailable("geo_ui")) {
        return
    }
    if (twttr.geo.geoEnabled) {
        if ($.cookie("geo_webclient")) {
            A.detectLocation(false)
        } else {
            A.disableGeoForWebClient()
        }
    } else {
        A.setGeoStatus("GeoAddLocationGeoDisabled");
        twttr.geo.geoScribe("promo_bar_shown")
    }
}).method("setGeoStatus",
function(B, A) {
    this.currentStatusHtml = (new twttr.views[B](A)).html();
    this.showCurrentStatus()
}).method("showCurrentStatus",
function() {
    var A = this;
    if (!twttr.decider.isAvailable("geo_ui")) {
        this.currentStatusHtml = (new twttr.views.GeoAddLocationGeoEnabled).html();
        twttr.geo.currentLocation = {};
        $(".geo-control").html();
        return
    }
    $(".geo-control").html(this.currentStatusHtml);
    $(".geo-control .place_content").each(function(B, C) {
        new twttr.geo.PlacesDropdown(A.placer, $(C.parentNode),
        function(D) {
            A.changeLocation(D)
        })
    });
    $(".show_geo_dialog").click(function(B) {
        B.preventDefault();
        B.stopPropagation();
        A.showPromoDialog();
        twttr.geo.geoScribe("promo_bar_dialog_open")
    });
    $(".geo_add_manual").click(function(B) {
        B.preventDefault();
        A.setLocationManually()
    })
}).method("scribePlaceLookup",
function(A, B) {
    twttr.geo.geoScribe("place_lookup", $.extend({
        status: A,
        locator_type: this.locator.locatorType
    },
    B))
}).method("lookupPlacesAndShowDropdown",
function(A, C) {
    var B = this;
    B.placer = new twttr.geo.Placer({
        geoParams: A
    });
    B.placer.search(function() {
        B.scribePlaceLookup("success", B.placer.getState());
        B.setGeoStatus("GeoPlaceContent")
    },
    function() {
        B.cannotDetectLocation(C);
        B.scribePlaceLookup("error", B.placer.getState())
    },
    function() {
        B.setGeoStatus("GeoFailureTryAgain", {
            message: _("Location service is currently unavailable.")
        })
    })
}).method("detectLocationByIp",
function(B) {
    var A = this;
    if (twttr.remoteIP) {
        twttr.geo.log("Detect location by IP: " + twttr.remoteIP);
        twttr.geo.currentLocation.lat = null;
        twttr.geo.currentLocation.lon = null;
        A.lookupPlacesAndShowDropdown({
            ip: twttr.remoteIP,
            accuracy: 16000,
            granularity: "poi",
            max_results: twttr.geo.MAX_NEARBY_PLACES
        },
        B)
    } else {
        A.scribePlaceLookup("no_ip");
        A.cannotDetectLocation(B)
    }
}).method("cannotDetectLocation",
function(B) {
    var A = this;
    if (twttr.decider.isAvailable("geo_allow_set_location_manually")) {
        if (B) {
            A.setLocationManually()
        } else {
            A.setGeoStatus("GeoDetectionFailedSetManually")
        }
    } else {
        A.setGeoStatus("GeoFailureTryAgain", {
            message: _("Unable to associate your coordinates with a place.")
        })
    }
}).method("changeLocation",
function(A) {
    var B = this;
    B.setGeoStatus("GeoProgress", {
        message: _("Changing location...")
    });
    B.placer.selectPlaceAndUpdateNearbyPlaces(A,
    function() {
        B.setGeoStatus("GeoPlaceContent")
    })
}).method("setLocationManually",
function() {
    var C = this;
    C.placer = new twttr.geo.Placer({
        geoParams: {
            granularity: "poi",
            max_results: twttr.geo.MAX_NEARBY_PLACES
        }
    });
    var A = function() {
        this.setGeoStatus("GeoAddLocationGeoEnabled");
        new twttr.geo.PlaceSearchDialog(C.placer,
        function(D) {
            C.changeLocation(D);
            C.setGeoStatus("GeoPlaceContent")
        });
        twttr.geo.geoScribe("set_location_manually")
    };
    var B = C.placer.getRecentPlaceId();
    if (B) {
        C.setGeoStatus("GeoProgress", {
            message: _("Getting recent location...")
        });
        C.placer.selectPlaceById(B,
        function() {
            A()
        },
        function() {
            A()
        })
    } else {
        A()
    }
}).method("detectLocation",
function(B) {
    twttr.geo.currentLocation = {};
    this.setGeoStatus("GeoProgress", {
        message: _("Getting your location...")
    });
    var A = this;
    twttr.geo.log("Detect location", true);
    if (!A.locator.isLocatable() || twttr.geo.queryParams.nodetect !== undefined) {
        A.detectLocationByIp(B)
    } else {
        A.locator.getLocation({
            onSuccess: function(C) {
                twttr.merge(twttr.geo.currentLocation, {
                    lat: C.latitude,
                    lon: C.longitude
                });
                A.lookupPlacesAndShowDropdown({
                    lat: C.latitude,
                    lon: C.longitude,
                    accuracy: C.accuracy,
                    granularity: "poi",
                    max_results: twttr.geo.MAX_NEARBY_PLACES
                },
                false)
            },
            onFailure: function(C) {
                if (C.allowRetry) {
                    A.detectLocationByIp(B)
                } else {
                    A.disableGeoForWebClient()
                }
            }
        })
    }
}).method("showPromoDialog",
function() {
    var B = this;
    var A = {
        template: {
            title: _("Add a location to your tweets"),
            content: (new twttr.views.GeoPromoDialog()).html()
        },
        modal: true
    };
    B.dialog = new twttr.widget.GeoDialog(A);
    $("#geo_turn_location_on").click(function() {
        B.turnLocationOn();
        twttr.geo.geoScribe("promo_dialog_turn_location_on")
    });
    $(".geo_dialog_close").click(function(C) {
        C.preventDefault();
        B.hidePromoDialog();
        twttr.geo.geoScribe("promo_dialog_not_now")
    });
    B.dialog.open()
}).method("hidePromoDialog",
function() {
    if (this.dialog) {
        this.dialog.destroy()
    }
}).method("turnLocationOn",
function() {
    var C = this;
    var B = $("#geo_promo_dialog_content .geo-progress");
    var A = $("#geo_promo_dialog_content .geo-unable-to-turn-location-on");
    if (B.hasClass("geo-spinner")) {
        return
    }
    B.addClass("geo-spinner");
    A.hide();
    twttr.currentUser.setGeoEnabled(true, {
        success: function() {
            twttr.geo.geoEnabled = true;
            C.hidePromoDialog();
            C.enableGeoForWebClient()
        },
        error: function() {
            B.removeClass("geo-spinner");
            A.show()
        },
        timeout: function() {
            B.removeClass("geo-spinner");
            A.show()
        }
    })
}).method("enableGeoForWebClient",
function() {
    if (!twttr.decider.isAvailable("geo_ui")) {
        this.showCurrentStatus();
        return
    }
    if (!$.cookie("geo_webclient")) {
        $.cookie("geo_webclient", "1", {
            expires: 3650
        })
    }
    this.detectLocation(true)
}).method("disableGeoForWebClient",
function() {
    if (!twttr.decider.isAvailable("geo_ui")) {
        this.showCurrentStatus();
        return
    }
    twttr.geo.currentLocation = {};
    if ($.cookie("geo_webclient")) {
        $.cookie("geo_webclient", null)
    }
    this.setGeoStatus("GeoAddLocationGeoEnabled")
});
twttr.klass("twttr.geo.Map",
function(D, C) {
    var B = this;
    if (!twttr.geo.mapsAvailable()) {
        return
    }
    var A = {
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        disableDefaultUI: true,
        scrollwheel: false,
        navigationControl: true,
        navigationControlOptions: {
            position: google.maps.ControlPosition.TOP_LEFT,
            style: google.maps.NavigationControlStyle.SMALL
        }
    };
    B.map = new google.maps.Map(D.get(0), twttr.merge(A, C));
    B.bounds = new google.maps.LatLngBounds();
    B.initialized = true;
    B.$canvas = D
}).methods({
    addListener: function(A, B) {
        google.maps.event.addListener(this.map, A, B)
    },
    createOverlay: function(C) {
        var A = this;
        function B() {
            this.setMap(A.map)
        }
        B.prototype = new google.maps.OverlayView();
        B.prototype.onAdd = function() {};
        B.prototype.onRemove = function() {};
        B.prototype.draw = function() {
            if (C) {
                setTimeout(C, 0);
                C = null
            }
        };
        A.mapOverlay = new B()
    },
    getProjection: function() {
        var A = this.mapOverlay;
        return A && A.getProjection()
    },
    latLngToContainerPoint: function(C) {
        var B = this;
        C = B.normalizeLatLng(C);
        var A = B.getProjection();
        return A ? A.fromLatLngToContainerPixel(C) : null
    },
    latLngToOverlayPoint: function(C) {
        var B = this;
        C = B.normalizeLatLng(C);
        var A = B.getProjection();
        return A ? A.fromLatLngToDivPixel(C) : null
    },
    containerPointToLatLng: function(A, B) {
        return this.getProjection().fromContainerPixelToLatLng(new google.maps.Point(A, B))
    },
    extendBounds: function(A) {
        this.bounds.extend(A)
    },
    normalizeLatLng: function(A) {
        return $.isArray(A) ? new google.maps.LatLng(A[1], A[0]) : A
    },
    addPoint: function(F, B) {
        var E = this;
        F = E.normalizeLatLng(F);
        E.extendBounds(F);
        var C = twttr.geo.POI_MARKER_SIZE;
        var G = twttr.geo.POI_MARKER_HOTSPOT;
        var D = new google.maps.MarkerImage("/phoenix/img/pin.png", new google.maps.Size(C.width, C.height), null, new google.maps.Point(G.x, G.y));
        E.marker = new google.maps.Marker({
            flat: true,
            icon: D,
            map: E.map,
            position: F,
            clickable: false,
            zIndex: 2
        });
        if (B) {
            var A = new google.maps.MarkerImage(B, null, null, new google.maps.Point(13, 32), new google.maps.Size(24, 24));
            E.avatar = new google.maps.Marker({
                flat: true,
                icon: A,
                map: E.map,
                position: F,
                zIndex: 3
            })
        }
    },
    addPoi: function(E, C) {
        var A = twttr.is.fn(C);
        E = this.normalizeLatLng(E);
        this.extendBounds(E);
        var D = new google.maps.MarkerImage("/phoenix/img/poi-pin.png", null, null, new google.maps.Point(twttr.geo.POI_MARKER_HOTSPOT.x, twttr.geo.POI_MARKER_HOTSPOT.y));
        var B = new google.maps.Marker({
            flat: true,
            icon: D,
            map: this.map,
            position: E,
            draggable: A,
            clickable: A,
            zIndex: 2
        });
        if (A) {
            google.maps.event.addListener(B, "position_changed",
            function() {
                var F = B.getPosition();
                C(F.lat(), F.lng())
            })
        }
        return B
    },
    addFocusablePoint: function(D, F, G) {
        var C = this;
        D = C.normalizeLatLng(D);
        C.extendBounds(D);
        var E = new google.maps.MarkerImage("/phoenix/img/place-minor10x.png", new google.maps.Size(10, 10), new google.maps.Point(10, 0), new google.maps.Point(5, 5));
        var B = new google.maps.MarkerImage("/phoenix/img/place-minor10x.png", new google.maps.Size(10, 10), null, new google.maps.Point(5, 5));
        var A = new google.maps.Marker({
            flat: true,
            icon: B,
            map: C.map,
            position: D,
            clickable: F !== undefined,
            zIndex: 2
        });
        if (F) {
            google.maps.event.addListener(A, "mouseover",
            function(H) {
                F(true, C.latLngToContainerPoint(D))
            });
            google.maps.event.addListener(A, "mouseout",
            function(H) {
                F(false, C.latLngToContainerPoint(D))
            })
        }
        if (G) {
            google.maps.event.addListener(A, "click",
            function(H) {
                G()
            })
        }
        return function(H) {
            if (H) {
                A.setIcon(E);
                A.setZIndex(3)
            } else {
                A.setIcon(B);
                A.setZIndex(2)
            }
        }
    },
    extendBoundsToIncludeCircle: function(C, A) {
        if (A < 200) {
            return
        }
        var D = new google.maps.Circle({
            map: null,
            center: this.normalizeLatLng(C),
            radius: A,
            clickable: false,
            fillColor: "#0040FF",
            fillOpacity: 0.08,
            strokeColor: "#2929D4",
            strokeOpacity: 0.7,
            strokeWeight: 0.5,
            zIndex: 1
        });
        var B = D.getBounds();
        this.extendBounds(B.getNorthEast());
        this.extendBounds(B.getSouthWest())
    },
    addPlacePolygon: function(A) {
        A = A[0];
        var D = [];
        for (var B = 0; B < A.length; B++) {
            var C = this.normalizeLatLng(A[B]);
            D.push(C);
            this.extendBounds(C)
        }
        new google.maps.Polygon({
            path: D,
            strokeColor: "#FF0000",
            strokeOpacity: 0.5,
            strokeWeight: 0.5,
            fillColor: "#FF0000",
            fillOpacity: 0.2,
            map: this.map
        })
    },
    isEmpty: function() {
        return this.bounds.isEmpty()
    },
    adjustBounds: function(B, A) {
        var C = this;
        if (this.isEmpty()) {
            return
        }
        C.fitBounds(C.bounds, B, A)
    },
    MIN_LAT: -85.05113,
    MAX_LAT: 85.05113,
    X_FROM_LNG: 256 / 360,
    Y_FROM_RADIANS: -256 / (2 * Math.PI),
    DEGREES_FROM_RADIANS: 180 / Math.PI,
    MAX_CONTENT_WIDTH_RATIO: 0.9,
    MAX_CONTENT_HEIGHT_RATIO: 0.9,
    _worldXFromLng: function(A) {
        return A * this.X_FROM_LNG
    },
    _worldYFromLat: function(C) {
        var A = this;
        C = Math.max(A.MIN_LAT, Math.min(A.MAX_LAT, C));
        var B = Math.sin(C / A.DEGREES_FROM_RADIANS);
        return Math.log((1 + B) / (1 - B)) * 0.5 * A.Y_FROM_RADIANS
    },
    _lngFromWorldX: function(A) {
        return A / this.X_FROM_LNG
    },
    _latFromWorldY: function(B) {
        var A = 2 * Math.atan(Math.exp(B / this.Y_FROM_RADIANS));
        return (A - 0.5 * Math.PI) * this.DEGREES_FROM_RADIANS
    },
    _zoomFromPixelDelta: function(D, B, A) {
        var C = Math.floor(Math.log(Math.abs(D / B)) / Math.LN2);
        return isNaN(C) ? A: Math.max(0, Math.min(A, C))
    },
    fitBounds: function(A, L, B) {
        var H = this;
        H.bounds = A;
        var F = A.getNorthEast();
        var M = A.getSouthWest();
        var D = H._worldXFromLng(M.lng());
        var C = H._worldXFromLng(F.lng());
        var K = H._worldYFromLat(F.lat());
        var J = H._worldYFromLat(M.lat());
        var E = H._zoomFromPixelDelta(H.$canvas.width() * H.MAX_CONTENT_WIDTH_RATIO, C - D, L);
        var G = H._zoomFromPixelDelta(H.$canvas.height() * H.MAX_CONTENT_HEIGHT_RATIO, J - K, L);
        H.map.setZoom(Math.min(E, G));
        if (!B) {
            var I = H._latFromWorldY((K + J) * 0.5);
            B = new google.maps.LatLng(I, A.getCenter().lng())
        }
        H.map.setCenter(H.normalizeLatLng(B))
    },
    getCenter: function() {
        return this.map.getCenter()
    },
    resize: function() {
        google.maps.event.trigger(this.map, "resize")
    }
});
twttr.klass("twttr.geo.Placer",
function(A) {
    var C = this;
    C.opts = A;
    C.places = [];
    C.detectedParams = {};
    var B = C.opts.geoParams;
    if (B.lat !== undefined && B.lon !== undefined) {
        C.detectedParams.lat = parseFloat(B.lat).toFixed(4);
        C.detectedParams.lon = parseFloat(B.lon).toFixed(4)
    }
    if (B.ip !== undefined) {
        C.detectedParams.ip = B.ip
    }
}).methods({
    PLACE_OVERRIDES_COOKIE: "place_overrides",
    RECENT_PLACE_COOKIE: "recent_place",
    MAX_PLACE_OVERRIDES: 8,
    STICKY_RADIUS_IN_KM: 0.1
}).method("search",
function(E, C, B) {
    var A = this;
    try {
        twttr.geo.log("Search: " + $.param(A.opts.geoParams));
        twttr.API.Place.search(twttr.merge({},
        A.opts.geoParams, {
            success: function(F) {
                A.places = twttr.geo.placesFromApi(F);
                twttr.geo.log("Search success: " + A.places.length + " places");
                A.determinePlaces(E, C)
            },
            error: function(F) {
                twttr.geo.log("Search error: " + F.status);
                if (F.status == 503) {
                    B()
                } else {
                    C()
                }
            }
        }))
    } catch(D) {
        C()
    }
}).method("determinePlaces",
function(C, B) {
    var A = this;
    if (twttr.every(A.places,
    function(D) {
        if (D.place_type != "poi") {
            A.detectedPlace = D;
            A.detectedGeoParams = $.extend(true, {},
            A.opts.geoParams);
            return false
        }
        return true
    })) {
        B();
        return
    }
    twttr.geo.log("Determine Places: Detected place is " + A.detectedPlace.id + " (" + A.detectedPlace.full_name + ")");
    if (twttr.every(A.getOverrides(),
    function(D) {
        if (A.isOverrideCloseToDetected(D)) {
            twttr.geo.log("Local Override: " + $.param(D) + "  Detected params: " + $.param(A.detectedParams));
            A.selectPlaceById(D.id, C, B);
            return false
        }
        return true
    })) {
        A.selectPlace(A.detectedPlace);
        C()
    }
}).method("selectPlaceById",
function(E, D, B) {
    var A = this;
    if (twttr.every(A.places,
    function(F) {
        if (F.id == E) {
            A.selectPlace(F);
            D();
            return false
        }
        return true
    })) {
        try {
            twttr.API.Place.find(E, {
                success: function(F) {
                    A.selectPlaceAndUpdateNearbyPlaces(F.data(), D)
                },
                error: function() {
                    B()
                }
            })
        } catch(C) {
            B()
        }
    }
}).method("setOverrides",
function(A) {
    if (A != this.getOverrides()) {
        if (A.length > 0) {
            $.cookie(this.PLACE_OVERRIDES_COOKIE, twttr.map(A,
            function(B) {
                return $.param(B)
            }).join(","), {
                expires: 3650
            })
        } else {
            $.cookie(this.PLACE_OVERRIDES_COOKIE, null)
        }
    }
}).method("getOverrides",
function() {
    var A = ($.cookie(this.PLACE_OVERRIDES_COOKIE) || "").split(",");
    A = twttr.filter(A,
    function(B) {
        return B != ""
    });
    return twttr.map(A,
    function(B) {
        return twttr.geo.unparam(B)
    })
}).method("selectPlace",
function(A) {
    var B = this;
    if (twttr.every(B.places,
    function(C) {
        if (A.id == C.id) {
            B.selectedPlace = C;
            return false
        }
        return true
    })) {
        B.places.unshift(A);
        B.selectedPlace = A
    }
    if (B.selectedPlace.place_type != "poi") {
        B.setOverride();
        B.setRecentPlaceId(B.selectedPlace.id)
    }
}).method("setOverride",
function() {
    var A = this;
    var B = twttr.filter(A.getOverrides(),
    function(C) {
        return ! A.isOverrideCloseToDetected(C)
    });
    if (A.detectedPlace && A.selectedPlace.id != A.detectedPlace.id) {
        B.unshift(twttr.merge({
            id: A.selectedPlace.id
        },
        A.detectedParams))
    }
    A.setOverrides(B.slice(0, A.MAX_PLACE_OVERRIDES))
}).method("getRecentPlaceId",
function() {
    return $.cookie(this.RECENT_PLACE_COOKIE)
}).method("setRecentPlaceId",
function(A) {
    $.cookie(this.RECENT_PLACE_COOKIE, A, {
        expires: 3650
    })
}).method("isOverrideCloseToDetected",
function(A) {
    var B = this.detectedParams;
    if (!B) {
        return false
    }
    if (A.lat !== undefined && A.lon !== undefined && B.lat !== undefined && B.lon !== undefined && twttr.geo.greatCircleDistanceInKm(A.lat, A.lon, B.lat, B.lon) < this.STICKY_RADIUS_IN_KM) {
        return true
    }
    return B.ip && B.ip == A.ip
}).method("getState",
function() {
    var A = this;
    var B = {
        geo_params: A.opts.geoParams,
        place_ids: []
    };
    var C = [];
    if (A.places) {
        twttr.each(A.places,
        function(D, E) {
            B.place_ids.push(D.id);
            if (A.selectedPlace && A.selectedPlace.id == D.id) {
                B.selected_place_index = E
            }
        })
    }
    if (A.selectedPlace) {
        B.selected_place_id = A.selectedPlace.id
    }
    if (A.detectedPlace) {
        B.detected_place_id = A.detectedPlace.id
    }
    return B
}).method("selectPlaceAndUpdateNearbyPlaces",
function(C, H) {
    var E = this;
    var A = twttr.geo.getBestCity(E.selectedPlace);
    var F = twttr.geo.getBestCity(C);
    twttr.geo.log("Change place: " + C.id + " (" + C.full_name + ")");
    var D = function() {
        if (F.id != C.id) {
            E.selectPlace(F)
        }
        E.selectPlace(C);
        H()
    };
    if (F.id == A.id) {
        twttr.geo.log("Change place: Same city");
        D();
        return
    }
    if (E.detectedPlace && twttr.geo.getBestCity(E.detectedPlace).id == F.id) {
        E.opts.geoParams = $.extend(true, {},
        E.detectedGeoParams)
    } else {
        var B = twttr.geo.getLocationFromPlace(C);
        if (!B) {
            twttr.geo.log("Change place: New place has no geometry");
            D();
            return
        }
        E.opts.geoParams.lat = B.latitude;
        E.opts.geoParams.lon = B.longitude;
        E.opts.geoParams.accuracy = B.accuracy;
        delete E.opts.geoParams.contained_by;
        delete E.opts.geoParams.ip
    }
    twttr.geo.log("Change place nearby search: " + $.param(E.opts.geoParams));
    try {
        twttr.API.Place.search(twttr.merge({},
        E.opts.geoParams, {
            success: function(I) {
                E.places = twttr.geo.placesFromApi(I);
                twttr.geo.log("Change place nearby search success: " + E.places.length + " places");
                if (E.detectedPlace) {
                    if (twttr.every(E.places,
                    function(J) {
                        return E.detectedPlace != J.id
                    })) {
                        E.places.push(E.detectedPlace)
                    }
                }
                D()
            },
            error: function(I) {
                D()
            }
        }))
    } catch(G) {
        D()
    }
});
twttr.view("twttr.views.Base",
function(B, A) {
    if (!twttr.is.string(B)) {
        this.obj = B;
        this.viewId = null
    } else {
        this.viewId = B;
        this.obj = A
    }
    if (!this.obj) {
        return
    }
    this.originalObject = this.obj;
    this.attach(this.obj)
}).methods({
    render: function(A, B) {
        this.selector = A;
        this.operation = B || "html";
        this.$dom = $(this.html());
        $(this.selector)[this.operation](this.$dom);
        this.afterRender(this.$dom);
        return this.$dom
    },
    attach: function(B) {
        for (var A in B) {
            this[A] = B[A]
        }
    },
    hide: function() {
        this.$dom.hide();
        this.$dom.addClass("inactive").removeClass("active")
    },
    show: function() {
        this.$dom.show();
        this.$dom.addClass("active").removeClass("inactive")
    },
    refresh: function() {
        this.$dom = $(this.html(true));
        $(this.selector)[this.operation](this.$dom)
    },
    html: function(B) {
        if (!B && this._html) {
            return this._html
        }
        var A = [this.constructor._template, this];
        if (this.constructor._partials) {
            A.push(this.constructor._partials)
        }
        this._html = Mustache.to_html.apply(Mustache, A);
        this.afterHtml(this._html);
        return this._html
    },
    $html: function(A) {
        return $(this.html())
    },
    rendering_on_server: false,
    afterHtml: function(A) {},
    afterRender: function(A) {},
    subview: function(B, A) {
        this[B] = A;
        return this
    },
    logged_in: function() {
        return !! twttr.currentUser
    },
    render_page_content: true
}).methods(twttr.router.routeMethodsForMustache).methods({
    permalink_path: function() {
        return twttr.router.permalinkPath({
            screen_name: this.user.screen_name,
            id: this.id
        })
    },
    user_list_path: function() {
        return twttr.router.userListPath({
            screen_name: this.user.screen_name,
            list_slug: this.slug
        })
    },
    list_subscribers_path: function() {
        return twttr.router.listSubscribersPath({
            screen_name: this.user.screen_name,
            list_slug: this.slug
        })
    },
    list_members_path: function() {
        return twttr.router.listMembersPath({
            screen_name: this.user.screen_name,
            list_slug: this.slug
        })
    }
});
twttr.view("twttr.views.BaseAPI").methods({
    attach: function(C) {
        var B = C.attributes;
        for (var A in B) {
            this[A] = B[A]
        }
    }
});
twttr.view("twttr.views.BaseAPIList",
function() {
    var A = this;
    twttr.views.Base.apply(this, arguments);
    this.items = [];
    if (!this.obj) {
        return
    }
    this.obj.each(function(B) {
        A.items.push(new A.ItemView(B))
    })
}).methods({
    ItemView: twttr.views.BaseAPI
});
twttr.view("twttr.views.BaseTweet",
function() {
    twttr.views.BaseAPI.apply(this, arguments);
    this.user = new twttr.views.BaseUser({
        attributes: this.user
    })
}).superclass(twttr.views.BaseAPI).methods({
    full_timestamp: function() {
        return twttr.helpers.timeAgo(this.actual_timestamp(), true)
    },
    short_timestamp: function() {
        return twttr.helpers.timeAgo(this.actual_timestamp())
    },
    explicit_timestamp: function() {
        return twttr.helpers.prettyTime(this.actual_timestamp())
    },
    actual_timestamp: function() {
        return twttr.helpers.parseDateString(this.created_at)
    },
    linkified_text: function() {
        if (!this.text) {
            return ""
        }
        var A = twttr.util.linkify(this.text, {
            nofollow: true
        });
        if (this.entities && this.entities.urls) {
            twttr.each(this.entities.urls,
            function(B) {
                if (B.display_url) {
                    A = A.replace(new RegExp(">" + B.url + "<\\/a>"), ">" + B.display_url + "</a>")
                }
                if (B.expanded_url) {
                    A = A.replace(new RegExp("(href=[\"']" + B.url + "[\"'])"), '$1 data-expanded-url="' + B.expanded_url + '"')
                }
            })
        }
        return this.query ? twttr.util.queryHighlight(this.query, A) : A
    },
    is_top_tweet: function() {
        return this.result_category === "popular"
    },
    is_sponsored: function() {
        return !! this.sponsored_result
    },
    tweet_impression_id: function() {
        var A = this.sponsored_result;
        return A ? ("data-impression-id='" + A.impression_id + "' ") : null
    },
    advertiser_name: function() {
        return this.was_retweeted ? this.retweeting_status.user.name: this.user.name
    },
    allowed_to_retweet: function() {
        return ! this.user["protected"] && !twttr.helpers.isCurrentUser(this.user)
    },
    retweet_count_text: function() {
        var A = this.retweet_count;
        if (A === 1) {
            return _("{{retweet_count}} Retweet", {
                retweet_count: A
            })
        } else {
            if (A <= 100 || twttr.helpers.isCurrentUser(this.user.id)) {
                return _("{{retweet_count}} Retweets", {
                    retweet_count: A
                })
            } else {
                return _("100+ Retweets")
            }
        }
    },
    is_owned_by_current_user: function() {
        return twttr.helpers.isCurrentUser(this.user)
    },
    contributor: function() {
        return this.contributors ? this.contributors[0] : null
    },
    can_view: function() {
        return this.user.can_view()
    },
    retweet_source_screen_name_link: function() {
        if (this.retweeting_status) {
            var A = this.retweeting_status.text.match(/^RT @?([0-9A-Za-z_]*):/).pop();
            return Mustache.to_html("<a href='{{path}}' class='latest-status-retweeted-user'>{{screen_name}}</a>", {
                path: twttr.router.profilePath({
                    screen_name: A
                }),
                screen_name: A
            })
        }
    },
    dogear_css_classes: function() {
        var A = "";
        if (this.favorited) {
            A += " tweet-dogear-fav"
        }
        if (this.current_user_retweet) {
            A += " tweet-dogear-rt"
        }
        return A
    },
    css_classes: function() {
        var A = "";
        $.each({
            is_top_tweet: "top-tweet",
            is_sponsored: "promoted-tweet",
            current_user_retweet: "tweet-retweeted",
            favorited: "tweet-favorited"
        },
        twttr.bind(this,
        function(C, B) {
            if (twttr.is.fn(this[C]) ? this[C]() : this[C]) {
                A += B + " "
            }
        }));
        return A
    }
});
twttr.view("twttr.views.BaseUser",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI).methods({
    bigger_profile_image_url: function() {
        return twttr.helpers.transformProfileImageUrl(this.profile_image_url)
    },
    reasonably_small_profile_image_url: function() {
        return twttr.helpers.transformProfileImageUrl(this.profile_image_url, "reasonably_small")
    },
    account_profile_image_path: function() {
        return "/account/profile_image/" + this.screen_name
    },
    linkified_description: function() {
        if (!this.description) {
            return ""
        }
        var A = twttr.util.linkify(this.description, {
            nofollow: true
        });
        return this.query ? twttr.util.queryHighlight(this.query, A) : A
    },
    is_current_user: function() {
        return twttr.helpers.isCurrentUser(this.id)
    },
    can_view: function() {
        return twttr.helpers.canViewUser(this)
    },
    mini_profile_image_url: function() {
        return twttr.helpers.transformProfileImageUrl(this.profile_image_url, "mini")
    }
});
twttr.view("twttr.views.StreamTweet",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.SimpleTweet",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.PermalinkTweet",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.LatestTweet",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.DetailsPaneTweet",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.TweetActions",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.TweetDogear",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.InReplyTo",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet);
twttr.view("twttr.views.LatestFavorite",
function() {
    twttr.views.BaseTweet.apply(this, arguments)
}).superclass(twttr.views.BaseTweet).statics({
    TRUNCATE_LENGTH: 70
}).methods({
    linkified_text: function() {
        this.text = twttr.helpers.truncate(this.text, this.constructor.TRUNCATE_LENGTH);
        return this.constructor.uber.linkified_text.apply(this, arguments)
    }
});
twttr.view("twttr.views.TweetPane",
function() {
    twttr.views.Base.apply(this, arguments)
}).superclass(twttr.views.Base).methods({
    pane_header_text: function() {
        return _("tweet from @{{screen_name}}", {
            screen_name: this.tweet.user.screen_name
        })
    }
});
twttr.view("twttr.views.BaseStats",
function(A) {
    twttr.views.BaseAPI.apply(this, arguments);
    if (A.status) {
        this.status = new twttr.views.BaseTweet(A.status);
        this.status.user = this
    }
}).superclass(twttr.views.BaseAPI).methods({
    statuses_count_commaized: function() {
        return twttr.util.addCommas(this.statuses_count)
    },
    friends_count_commaized: function() {
        if (this.screen_name === "toptweets") {
            return _("everyone!")
        }
        return twttr.util.addCommas(this.friends_count)
    },
    followers_count_commaized: function() {
        return twttr.util.addCommas(this.followers_count)
    },
    favorites_count_commaized: function() {
        if (this.favourites_count && parseInt(this.favourites_count, 10) > 0) {
            return twttr.util.addCommas(this.favourites_count)
        } else {
            return 0
        }
    },
    listed_count_commaized: function() {
        if (this.listed_count && parseInt(this.listed_count, 10) > 0) {
            return twttr.util.addCommas(this.listed_count)
        } else {
            return 0
        }
    },
    can_view: function() {
        return twttr.helpers.canViewUser(this)
    }
});
twttr.view("twttr.views.ProfilePane",
function() {
    twttr.views.BaseStats.apply(this, arguments)
}).superclass(twttr.views.BaseStats).methods({
    source_tweet_impression_id: function() {
        var A = this.impression_id;
        return A ? ("data-impression-id='" + A + "' ") : null
    },
    pane_header_text: function() {
        return _("profile summary for @{{screen_name}}", {
            screen_name: this.screen_name
        })
    },
    right_image_size: function() {
        return twttr.helpers.transformProfileImageUrl(this.profile_image_url, "bigger")
    }
});
twttr.view("twttr.views.MessageThread",
function(A) {
    twttr.views.Base.apply(this, arguments);
    this.items = [];
    for (var B = 0; B < A.length; B++) {
        this.items.push(new twttr.views.Message(A[B]))
    }
}).superclass(twttr.views.Base);
twttr.view("twttr.views.ProfileActions").methods({
    is_current_user: function() {
        return twttr.helpers.isCurrentUser(this.user)
    },
    can_view: function() {
        return twttr.helpers.canViewUser(this.user)
    },
    show_list_options: function() {
        return this.following || !this.user["protected"]
    },
    show_device_notifications: function() {
        return ! this.is_current_user() && this.following && (twttr.currentUser.lang != "ja" || twttr.decider.isAvailable("email_device_settings"))
    }
});
twttr.view("twttr.views.MessageThreadPreview").methods({
    last_was_yours: function() {
        return twttr.helpers.isCurrentUser(this.last_message().sender)
    },
    message_count: function() {
        return this.messages.length
    },
    last_message: function() {
        if (this._last_message) {
            return this._last_message
        }
        return this._last_message = new twttr.views.Message(this.messages[0])
    },
    other_person: function() {
        return new twttr.views.User(this.last_was_yours() ? this.last_message().recipient: this.last_message().sender)
    }
});
twttr.view("twttr.views.Message",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI).methods({
    linkified_text: function() {
        return twttr.util.linkify(this.text, {
            nofollow: true
        })
    },
    timestamp: function() {
        return twttr.helpers.timeAgo(this.actual_timestamp(), true, true)
    },
    actual_timestamp: function() {
        return twttr.helpers.parseDateString(this.created_at)
    }
});
twttr.view("twttr.views.DashboardProfileStats",
function() {
    twttr.views.BaseStats.apply(this, arguments)
}).superclass(twttr.views.BaseStats);
twttr.view("twttr.views.UserStats",
function() {
    twttr.views.BaseStats.apply(this, arguments)
}).superclass(twttr.views.BaseStats);
twttr.view("twttr.views.DashboardYourProfile",
function() {
    twttr.views.BaseStats.apply(this, arguments)
}).superclass(twttr.views.BaseStats);
twttr.view("twttr.views.YourActivity",
function() {
    twttr.views.BaseStats.apply(this, arguments)
}).superclass(twttr.views.BaseStats);
twttr.view("twttr.views.ProfileActivity",
function() {
    twttr.views.BaseStats.apply(this, arguments)
}).superclass(twttr.views.BaseStats);
twttr.view("twttr.views.OtherProfileActivity",
function() {
    twttr.views.BaseStats.apply(this, arguments)
}).superclass(twttr.views.BaseStats);
twttr.view("twttr.views.TrendItem",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI).methods({
    is_sponsored: function() {
        return !! this.promoted_content
    },
    trend_search_path: function() {
        return twttr.router.searchResultsPath({
            query: this.name
        })
    }
});
twttr.view("twttr.views.FollowList").methods({
    follow_list: function() {
        return (new twttr.views.UserThumbList(this.users)).html()
    }
});
twttr.view("twttr.views.LocalTrends",
function() {
    twttr.views.BaseAPIList.apply(this, arguments)
}).superclass(twttr.views.BaseAPIList).methods({
    _sortPlaces: function(A) {
        return A.sort(function(C, B) {
            if (C.name < B.name) {
                return - 1
            } else {
                if (C.name > B.name) {
                    return 1
                } else {
                    return 0
                }
            }
        })
    },
    country_locations: function() {
        var A = [];
        var B;
        for (var C = 0; C < this.items.length; C++) {
            var D = this.items[C];
            if (D.placeType.code !== twttr.constants.placeTypes.city) {
                if (D.placeType.code == 19) {
                    B = D;
                    continue
                }
                A.push(D)
            }
        }
        A = this._sortPlaces(A);
        if (B) {
            A.unshift(B)
        }
        return A
    },
    city_locations: function() {
        var A = [];
        for (var B = 0; B < this.items.length; B++) {
            var C = this.items[B];
            if (C.placeType.code === twttr.constants.placeTypes.city) {
                A.push(C)
            }
        }
        A = this._sortPlaces(A);
        return A
    }
});
twttr.view("twttr.views.Dialog",
function(A) {
    this.options = A;
    var B = this.options.template || this.options;
    twttr.views.Base.call(this, B)
});
twttr.view("twttr.views.TweetDialog",
function(A) {
    this.options = A;
    this.options.fixed = false;
    twttr.views.Dialog.call(this, A)
}).superclass(twttr.views.Dialog).template(twttr.templates.dialog).methods(twttr.EventProvider).methods({
    afterRender: function(A) {
        var B = {
            container_id: "tweetbox",
            condensed: false,
            template: {
                button_text: this.options.tweetButton || _("Tweet"),
                show_geo: this.options.template.show_geo
            },
            statusAction: this.options.statusAction || "update",
            data: this.options.data,
            defaultContent: this.options.defaultContent || "",
            height: $.support.boxModel ? 37: 55,
            width: $.support.boxModel ? 452: 470,
            origin: this.options.origin
        };
        this.tweetBox = new twttr.TweetBox(A.find(".twttr-dialog-content"), B);
        this.tweetBox.bind("ready", twttr.bind(this,
        function() {
            this.trigger("ready")
        }))
    }
});
twttr.view("twttr.views.ReplyDialog",
function(A) {
    this.options = A;
    this.options.statusAction = "reply";
    twttr.views.TweetDialog.call(this, this.options)
}).superclass(twttr.views.TweetDialog).template(twttr.templates.dialog).methods({
    afterRender: function(A) {
        twttr.views.TweetDialog.prototype.afterRender.call(this, A);
        twttr.API.Status.find(this.options.data.tweetId, twttr.bind(this,
        function(B) {
            var C = new twttr.views.ReplyDialogFooter({
                screen_name: h(this.options.data.screenName),
                text: twttr.util.linkify(B.text, {
                    nofollow: true
                }),
                profile_image_url: B.user.profileImageUrl
            });
            C.render(A.find(".twttr-dialog-footer"), "append")
        }))
    }
});
twttr.view("twttr.views.DirectMessageDialog",
function(A) {
    this.options = A;
    this.options.statusAction = "directMessage";
    this.options.tweetButton = _("Send");
    twttr.views.TweetDialog.call(this, this.options)
}).superclass(twttr.views.TweetDialog).template(twttr.templates.dialog);
twttr.view("twttr.views.KeyboardShortCuts").superclass(twttr.views.Dialog).template(twttr.templates.dialog);
twttr.view("twttr.views.MessageDrawer").statics({
    isOpen: false,
    close: function() {
        twttr.views.MessageDrawer.isOpen = false;
        $("#message-drawer .message").remove()
    }
});
twttr.view("twttr.views.MessageNotification").statics({
    isOpen: false,
    close: function() {
        twttr.views.MessageNotification.isOpen = false;
        $("#message-notification .notification").remove()
    }
});
twttr.view("twttr.views.UserCss",
function() {
    twttr.views.BaseAPI.apply(this, arguments);
    var B = ["profile_background_color", "profile_text_color", "profile_link_color", "profile_sidebar_fill_color"];
    for (var A = 0; A < B.length; A++) {
        this[B[A]] = twttr.helpers.sanitizeCssColor(this[B[A]])
    }
}).superclass(twttr.views.BaseAPI).methods({
    rgba_sidebar_color: function() {
        if (!this.profile_sidebar_fill_color) {
            return
        }
        return twttr.helpers.hexToRGBA(this.profile_sidebar_fill_color, "0.9")
    },
    rgba_tweet_background_color: function() {
        if (!this.profile_link_color) {
            return
        }
        return twttr.helpers.hexToRGBA(this.profile_link_color, "0.1")
    },
    rgba_tweet_border_color: function() {
        if (!this.profile_link_color) {
            return
        }
        return twttr.helpers.hexToRGBA(this.profile_link_color, "0.15")
    },
    rgba_newtweets_background_color: function() {
        if (!this.profile_link_color) {
            return
        }
        return twttr.helpers.hexToRGBA(this.profile_link_color, "0.2")
    },
    rgba_newtweets_border_color: function() {
        if (!this.profile_link_color) {
            return
        }
        return twttr.helpers.hexToRGBA(this.profile_link_color, "0.25")
    },
    rgba_text_color: function() {
        if (!this.profile_text_color) {
            return
        }
        return twttr.helpers.hexToRGBA(this.profile_text_color, "0.6")
    }
});
twttr.view("twttr.views.BgImgCss",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI);
twttr.view("twttr.views.UserThumbList",
function() {
    twttr.views.BaseAPIList.apply(this, arguments)
}).superclass(twttr.views.BaseAPIList).methods({
    ItemView: twttr.views.BaseUser
});
twttr.view("twttr.views.UserSmallListItem",
function() {
    twttr.views.BaseUser.apply(this, arguments)
}).superclass(twttr.views.BaseUser);
twttr.view("twttr.views.UserThumbListItem",
function() {
    twttr.views.BaseUser.apply(this, arguments)
}).superclass(twttr.views.BaseUser);
twttr.view("twttr.views.UserSmallList",
function() {
    twttr.views.BaseAPIList.apply(this, arguments)
}).superclass(twttr.views.BaseAPIList).methods({
    ItemView: twttr.views.UserSmallListItem
});
twttr.view("twttr.views.UserDetailedListItem",
function() {
    twttr.views.BaseUser.apply(this, arguments)
}).superclass(twttr.views.BaseUser);
twttr.view("twttr.views.UserDetailedList",
function() {
    twttr.views.BaseAPIList.apply(this, arguments)
}).superclass(twttr.views.BaseAPIList).methods({
    ItemView: twttr.views.UserDetailedListItem
});
twttr.view("twttr.views.LinkList",
function(A) {
    this.links = A
});
twttr.view("twttr.views.RecentTweets",
function() {
    twttr.views.BaseAPIList.apply(this, arguments)
}).superclass(twttr.views.BaseAPIList).methods({
    ItemView: twttr.views.SimpleTweet,
    screen_name: function() {
        return this.items[0].user.screen_name
    }
});
twttr.view("twttr.views.RelatedTweets",
function(A) {
    twttr.views.BaseAPI.apply(this, arguments);
    this.results = A.results.array
}).superclass(twttr.views.BaseAPI).methods({
    tweetResults: function() {
        if (this.resultType === "Tweet") {
            return this._viewResults(twttr.views.StreamTweet)
        }
    },
    linkResults: function() {
        if (this.resultType === "Link") {
            return new twttr.views.LinkList(this.results)
        }
    },
    picResults: function() {
        return this.resultType === "Pic"
    },
    _viewResults: function(A) {
        return twttr.map(this.results,
        function(B) {
            return new A(B)
        })
    },
    niceGroupName: function() {
        switch (this.groupName) {
        case "TweetsWithHashtag":
            return _("Tweets tagged with <strong>#{{hashtag}}</strong>", {
                hashtag: this.annotations.Hashtag
            });
        case "TweetsFromUser":
            return _("Tweets from @<strong>{{screen_name}}</strong>", {
                screen_name: this.annotations.FromUser
            });
        case "PicsByThisUser":
            return _("More images from @<strong>{{screen_name}}</strong>", {
                screen_name: this.annotations.User
            });
        case "TweetsWithEntity":
            return _("Tweets containing <strong>{{entity}}</strong>", {
                entity: this.annotations.Entity
            });
        case "TweetsWithMention":
            return _("Tweets mentioning <strong>{{screen_name}}</strong>", {
                screen_name: this.annotations.Mention
            });
        case "LinksToDomain":
            return _("Other links to <strong>{{domain_name}}</strong>", {
                domain_name: this.annotations.Domain
            });
        case "TweetsWithLinkToDomain":
            return _("Tweets linking to <strong>{{domain_name}}</strong>", {
                domain_name: this.annotations.Domain
            });
        case "TweetsNearby":
            return _("Tweets near <strong>{{place_name}}</strong>", {
                place_name: this.annotations.PlaceName
            });
        case "TweetsWithLink":
            return _("Tweets linking to <strong>{{{link}}}</strong>", {
                link: this.annotations.Link
            });
        case "TweetsWithConversation":
            return _("Conversation between <strong>@{{ToUser}}</strong> and <strong>@{{FromUser}}</strong>", this.annotations);
        case "TweetsWithReply":
            return _("Replies to this Tweet");
        case "Timeline":
            return _("Recent from @<strong>{{screen_name}}</strong>", {
                screen_name: this.annotations.FromUser
            });
        default:
            return this.groupName
        }
    }
});
twttr.view("twttr.views.StreamUser",
function() {
    twttr.views.BaseUser.apply(this, arguments)
}).superclass(twttr.views.BaseUser);
twttr.view("twttr.views.StreamFollowerRequest",
function() {
    this.constructor.uber.constructor.apply(this, arguments)
}).superclass(twttr.views.StreamUser);
twttr.view("twttr.views.ProfileUser",
function() {
    twttr.views.BaseUser.apply(this, arguments)
}).superclass(twttr.views.BaseUser);
twttr.view("twttr.views.StreamList",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI).methods({
    is_own_list: function() {
        return twttr.helpers.isCurrentUser(this.user)
    },
    is_public: function() {
        return (this.mode === "public") || (this.mode === undefined)
    }
});
twttr.view("twttr.views.List",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI).methods({
    is_public: function() {
        return (this.mode === "public") || (this.mode === undefined)
    }
});
twttr.view("twttr.views.RecentList",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI);
twttr.view("twttr.views.RecentLists",
function() {
    twttr.views.BaseAPIList.apply(this, arguments)
}).superclass(twttr.views.BaseAPIList).methods({
    ItemView: twttr.views.RecentList,
    list_names: function() {
        var B = this;
        var A = twttr.util.arrayMap(this.items,
        function(E, D, C) {
            if (!B.items[D + 1]) {
                return E.html()
            } else {
                return E.html().replace(/<\/a>/, "</a>,")
            }
        }).join(" ");
        return A
    }
});
twttr.view("twttr.views.ListActions",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI).methods({
    is_own_list: function() {
        return twttr.helpers.isCurrentUser(this.user)
    }
});
twttr.view("twttr.views.ListDialog",
function() {
    twttr.views.BaseAPI.apply(this, arguments)
}).superclass(twttr.views.BaseAPI).methods({
    isPublic: function() {
        return (this.mode === "public") || (this.mode === undefined)
    }
});
twttr.view("twttr.views.WebSearchResults").methods({
    more_results_url: function() {
        return "http://www.bing.com/search?q=" + escape(this.query)
    }
});
twttr.view("twttr.views.DetailsPane").methods({
    closable: true,
    back_label: function() {
        return this._viewstack.top(1)._backLabel
    },
    popable: function() {
        return this._viewstack && this._viewstack.size() > 1
    }
});
twttr.view("twttr.views.Retweeters",
function(B) {
    var A = this;
    twttr.views.Base.apply(this, arguments);
    this.retweeters = B.retweeters.map(function(C) {
        return new twttr.views.BaseUser(C)
    }).array
}).methods({
    retweeted_by_count: function() {
        var B = this.tweet.retweetingStatus ? new twttr.views.BaseUser(this.tweet.retweetingStatus.user) : this.retweeters[0];
        var A = '<a class="user-profile-link" data-user-id="' + B.id + '" href="' + twttr.router.profilePath({
            screen_name: B.screen_name
        }) + '" >' + B.screen_name + "</a>";
        if (this.count === 1) {
            return _("Retweeted by {{{user_link}}}", {
                user_link: A
            })
        } else {
            if (this.count === 100) {
                return _("Retweeted by {{{user_link}}} and 100+ others", {
                    user_link: A
                })
            } else {
                if (this.count === 2) {
                    return _("Retweeted by {{{user_link}}} and 1 other", {
                        user_link: A
                    })
                }
            }
        }
        return _("Retweeted by {{{user_link}}} and {{count}} others", {
            count: this.count - 1,
            user_link: A
        })
    }
});
twttr.view("twttr.views.ProfilePage").methods({
    has_pending_requests: function() {
        return twttr.helpers.isCurrentUser(twttr.profileUser) && twttr.currentUser["protected"]
    }
});
twttr.views.makeDefaultViews(twttr.templates); (function() {
    var A = {
        view: "Control"
    };
    twttr.klass("twttr.control.Base",
    function(B) {
        this.options = $.extend({},
        A, B);
        this.itemView = twttr.views.DefaultDropdownItem;
        if (this.options.itemView) {
            this.itemView = twttr.is.string(this.options.itemView) ? twttr.views[this.options.itemView] : this.options.itemView
        }
    }).methods(twttr.EventProvider).methods({
        render: function(B, D) {
            var C = this.viewData();
            this.view = new twttr.views[this.options.view](C);
            this.$dropdown = this.view.$html();
            $(B)[D](this.$dropdown)
        },
        viewData: function() {
            return this.options
        }
    });
    twttr.Control = function(D, C) {
        var B = twttr.klass("twttr.control." + D, C);
        B.superclass(twttr.control.Base);
        return B
    }; (function() {
        var C = {
            direction: "left",
            view: "Dropdown"
        };
        var B = [];
        twttr.Control("Dropdown",
        function(D, E) {
            B.push(this);
            this.$controller = $(D);
            var E = $.extend({},
            C, E);
            this.items = E.items || [];
            twttr.control.Dropdown.uber.constructor.call(this, E);
            this.registerEvents()
        }).statics({
            _registeredHtmlClick: false,
            caches: {},
            createCache: function(D) {
                this.caches[D] = {}
            },
            closeAll: function() {
                twttr.each(B,
                function(D) {
                    D.close()
                })
            }
        }).methods({
            defaultDividerView: twttr.views.DefaultDropdownDivider,
            registerEvents: function() {
                this.$controller.bind("click", twttr.bind(this,
                function(D) {
                    this.toggle()
                }))
            },
            applyDirection: function() {
                this.$dropdown.css({
                    left: this.options.direction == "left" ? "0": "auto",
                    right: this.options.direction == "right" ? "0": "auto"
                })
            },
            open: function() {
                this.constructor.closeAll();
                this.$controller.addClass("open").addClass("button-active");
                this.$dropdown.css({
                    top: this.$container ? this.$container.outerHeight() : this.$controller.outerHeight(),
                    visibility: "visible"
                });
                var D = twttr.bind(this,
                function(E) {
                    if (this.$controller.get(0) !== E.target && !$.contains(this.$controller.get(0), E.target)) {
                        $("#doc").unbind("click", D);
                        this.close()
                    }
                });
                $("#doc").bind("click", D)
            },
            close: function() {
                this.$controller.removeClass("open").removeClass("button-active");
                this.$dropdown.css("visibility", "hidden")
            },
            toggle: function() {
                if (this.$controller.hasClass("open")) {
                    this.close()
                } else {
                    this.open()
                }
            },
            addItem: function(F, E) {
                E = E || "appendTo";
                this.items.push(F);
                var D = (this.getItemView(F).$html());
                D[E](this.$dropdown);
                return D
            },
            addItems: function(D) {
                this.items = this.items.concat(D);
                var E = twttr.map(this.items,
                function(G, F) {
                    return that.getItemView(G).html()
                });
                E.join("").appendTo(this.$container)
            },
            render: function(D, G, I) {
                if (G === "before" || G === "after") {
                    this.$container = this.$controller.wrap('<div class="drop-down-container"/>').parent()
                }
                twttr.control.Base.prototype.render.apply(this, arguments);
                if (I) {
                    if (!this.constructor.caches[I.key]) {
                        this.constructor.caches[I.key] = {}
                    }
                    this.constructor.caches[I.key][I.id] = true
                }
                var H = this.$dropdown.children();
                for (var E = 0; E < this.items.length; E++) {
                    var F = this.items[E];
                    if (!F.handlers) {
                        continue
                    }
                    $.each(F.handlers,
                    function(L, M) {
                        var J = $(H[E]);
                        var K = [L];
                        if (twttr.is.array(M)) {
                            K = K.concat(M)
                        } else {
                            K.push(M)
                        }
                        J.bind.apply(J, K)
                    })
                }
                this.applyDirection();
                return this
            },
            getItemView: function(D) {
                return D.itemView ? new twttr.views[D.itemView](D) : D.divider ? new this.defaultDividerView: new this.itemView(D)
            },
            viewData: function() {
                var E = this;
                var D = twttr.map(this.items,
                function(G, F) {
                    return E.getItemView(G).html()
                });
                return {
                    items: D.join("")
                }
            }
        })
    } ())
} ());
twttr.klass.page = function(B, C) {
    if (!C) {
        C = function() {
            twttr.components.Page.apply(this, arguments)
        }
    }
    var A = twttr.klass(B, C);
    A.superclass(twttr.components.Page);
    $.each(twttr.constants.jQueryEvents,
    function(F, E) {
        A.prototype["_" + E] = twttr.create(A.prototype["_" + E]);
        A[E] = function(G) {
            if (twttr.inArray(E, ["keypress", "keydown", "keyup"])) {
                $.each(G,
                function(H, I) {
                    G[H] = function(J) {
                        return J.ctrlKey || J.metaKey ? undefined: I.apply(this, arguments)
                    }
                })
            }
            this.prototype["_" + E] = twttr.augmentObject(this.prototype["_" + E], G);
            return this
        }
    });
    A.view = function(E) {
        this.prototype._View = E;
        return this
    };
    A.containerCssClass = function(E) {
        this._containerCssClass = E;
        return this
    };
    A.name = B.split(".").pop().toLowerCase();
    var D = ["beforeRender", "afterRender", "onFirstSwitch", "viewData", "onSwitchAway", "onSwitchTo"];
    $.each(D,
    function(H, G) {
        var F = G.charAt(0).toUpperCase() + G.slice(1),
        E = "_" + G;
        A["add" + F] = function(L) {
            var J = [],
            I = this.prototype[E];
            if (I) {
                for (var K = 0; K < I.length; K++) {
                    J.push(I[K])
                }
            }
            J.push(L);
            this.prototype[E] = J;
            return this
        };
        A.prototype[G] = function() {
            var J = this;
            var I = {};
            $.each(this[E] || [],
            function(L, K) {
                twttr.aug(I, K.call(J))
            });
            return I
        }
    });
    return A
};
twttr.klass.page("twttr.components.Page",
function() {
    this.$node = $("<div/>");
    var A = this;
    this._isOpen = false;
    $.each(twttr.constants.jQueryEvents,
    function(C, B) {
        if (twttr.inArray(B, ["keypress", "keydown", "keyup"])) {
            return
        }
        $.each(A["_" + B],
        function(D, G) {
            var F = [D, B];
            var E = $.isArray(G) ? G: [G];
            $.each(E,
            function(I, H) {
                F.push(function(J) {
                    if (!J.isImmediatePropagationStopped()) {
                        return H.call(A, J, $(this))
                    }
                })
            });
            A.$node.delegate.apply(A.$node, F)
        })
    })
}).mixin(twttr.mixins.listActionable, twttr.mixins.userActionable).methods(twttr.EventProvider).methods({
    $find: function() {
        return this.$node.find.apply(this.$node, arguments)
    },
    keyevent: function(C, B) {
        var A;
        if (C.keyCode === twttr.constants.keyCodes.esc) {
            A = "esc"
        } else {
            if (C.keyCode === twttr.constants.keyCodes.enter) {
                A = "return"
            } else {
                if (C.which === twttr.constants.which.period) {
                    A = "period"
                } else {
                    A = String.fromCharCode(C.which).toLowerCase()
                }
            }
        }
        if (this["_" + B][A]) {
            if (!twttr.helpers.isModifier(C)) {
                C.preventDefault()
            }
            if (!twttr.shortcuts.currentKey) {
                return this["_" + B][A].call(this, C)
            }
        }
    },
    render: function(B) {
        this.beforeRender();
        var A = $.extend(this.viewData(), B);
        this.$node.html(new this._View(A).html());
        this.afterRender();
        if (this._renderCallback) {
            this._renderCallback();
            delete this._renderCallback
        }
        return this
    },
    onkeydown: function(A) {
        this.keyevent(A, "keydown")
    },
    onkeypress: function(A) {
        this.keyevent(A, "keypress")
    },
    onkeyup: function(A) {
        this.keyevent(A, "keyup")
    },
    addDashboardComponent: function(B, A) {
        var C = this.$node.find(".dashboard");
        if (A == null) {
            C.append(B.$node)
        } else {
            C.children(":nth-child(" + A + ")").before(B.$node)
        }
        B.bind("notRendered", twttr.bind(this,
        function(D) {
            this.componentNotRendered(B, D)
        }))
    },
    addDashboardComponents: function(B) {
        for (var A = 0; A < B.length; A++) {
            this.addDashboardComponent(B[A])
        }
    },
    componentNotRendered: function(A, B) {},
    updatePageTitle: function(A) {
        this._pageTitle = A;
        document.title = A
    },
    hasNewItems: function(A) {
        if (A) {
            $("#global-nav .active").addClass("new");
            document.title = "(" + A + ") " + this._pageTitle
        } else {
            $("#global-nav .active").removeClass("new");
            document.title = this._pageTitle
        }
    },
    highlightGlobalNav: function(A) {
        $("#global-nav li").removeClass("active");
        if (A) {
            $("#global-nav-" + A).addClass("active")
        }
    }
}).addOnSwitchTo(function() {
    if (this.constructor._containerCssClass) {
        $("#page-container").addClass(this.constructor._containerCssClass)
    }
}).addOnSwitchAway(function() {
    if (this.constructor._containerCssClass) {
        $("#page-container").removeClass(this.constructor._containerCssClass)
    }
});
twttr.provide("twttr.dialogs"); (function() {
    var B = $(window);
    var A = {
        modal: false,
        draggable: false,
        css: {
            width: 500,
            height: "auto"
        },
        fixed: true,
        template: {
            container_id: null,
            title: null,
            footer: null,
            content: null
        }
    };
    twttr.klass("twttr.widget.Dialog",
    function(C) {
        this.options = twttr.merge({},
        A, C || {},
        true);
        this._isOpen = false;
        this.view = new twttr.views[this.options.view || this.constructor._name](this.options);
        this.$container = this.view.render(this.options.node || "body", "append");
        this.$dialog = this.$container.find(".twttr-dialog");
        this.$title = this.$container.find(".twttr-dialog-header h3");
        this.$dialog.css(this.options.css);
        if (twttr.is.nil(this.options.template.footer)) {
            this.$container.find(".twttr-dialog-footer").hide()
        }
        if (this.options.draggable) {
            this.applyDraggability()
        }
        if (this.options.modal) {
            this.$container.addClass("twttr-dialog-container-modal")
        }
        this._escKeyHandler = twttr.bind(this,
        function(D) {
            if (D.keyCode === 27) {
                $(window).unbind("keydown", this._escKeyHandler);
                this.close();
                D.stopPropagation()
            }
        });
        this.registerEvents()
    }).statics(twttr.EventProvider).statics({
        currentModal: false,
        close: function() {
            if (this.currentModal) {
                this.currentModal.close()
            }
        }
    }).methods(twttr.EventProvider).methods({
        $find: function(C) {
            return this.$container.find(C)
        },
        registerEvents: function() {
            var C = this;
            this.$find("textarea, input[type=text],input[type=password]").bind("keydown keypress keyup", twttr.bind(this,
            function(D) {
                if (!twttr.widget.Autocomplete._isCompletionsOpen) {
                    D.stopPropagation();
                    if (D.keyCode === twttr.constants.keyCodes.esc) {
                        this.destroy()
                    }
                }
            }));
            this.$container.find(".twttr-dialog-close").bind("click", twttr.bind(this,
            function(D) {
                D.preventDefault();
                D.stopPropagation();
                this.close()
            }))
        },
        applyDraggability: function() {
            this.$dialog.addClass("draggable");
            this.$dialog.draggable({
                handle: this.$dialog.find(".twttr-dialog-header")
            })
        },
        toggle: function() {
            if (this._isOpen) {
                this.close()
            } else {
                this.open()
            }
            return this
        },
        open: function() {
            if (twttr.widget.Dialog.currentModal) {
                return this
            }
            if (this.options.modal) {
                twttr.widget.Dialog.currentModal = this;
                this.$container.height($(document).height())
            }
            this.position();
            this.$container.css("visibility", "visible");
            this.trigger("open");
            twttr.widget.Dialog.trigger("open");
            this._isOpen = true;
            $(window).bind("keydown", this._escKeyHandler);
            return this
        },
        close: function() {
            if (this.options.modal) {
                twttr.widget.Dialog.currentModal = false;
                this.$container.height("100%")
            }
            this.$container.css("visibility", "hidden");
            this.trigger("close");
            twttr.widget.Dialog.trigger("close");
            this._isOpen = false;
            $(window).unbind("keydown", this._escKeyHandler);
            return this
        },
        show: function() {
            return this.open()
        },
        hide: function() {
            return this.close()
        },
        position: function() {
            if (!this.options.fixed) {
                this.$dialog.addClass("static")
            }
            var I = $(window).scrollTop(),
            H = this.$dialog.innerHeight(),
            E = B.height(),
            G = Math.round((E / 2) - (H / 2));
            if (!this.options.fixed) {
                G += I
            }
            var C = this.$dialog.innerWidth(),
            D = B.width(),
            F = Math.round((D / 2) - (C / 2));
            G = (this.options.positioning && this.options.positioning.top) ? this.options.positioning.top: G;
            F = (this.options.positioning && this.options.positioning.left) ? this.options.positioning.left: F;
            this.$dialog.css({
                left: F,
                top: G
            });
            return this
        },
        destroy: function() {
            this.close();
            this.remove();
            return this
        },
        remove: function() {
            this.$container.unbind();
            this.$container.remove();
            this._isOpen = false;
            return this
        }
    });
    twttr.klass("twttr.widget.GeoDialog",
    function(C) {
        twttr.widget.Dialog.call(this, twttr.merge({
            view: "Dialog",
            fixed: false,
            draggable: true
        },
        C))
    }).superclass(twttr.widget.Dialog).methods({
        registerEvents: function() {
            twttr.widget.Dialog.prototype.registerEvents.call(this);
            this.$container.find(".twttr-dialog-close").bind("click", twttr.bind(this,
            function(C) {
                C.preventDefault();
                C.stopPropagation();
                this.destroy()
            }));
            this.$container.bind("keypress keyup",
            function(C) {
                C.stopPropagation()
            }).keydown(twttr.bind(this,
            function(C) {
                C.stopPropagation();
                if (C.keyCode === twttr.constants.keyCodes.enter) {
                    this.$container.find(".geo-submit").trigger("geosubmit")
                }
                if (C.keyCode === twttr.constants.keyCodes.escape) {
                    this.destroy()
                }
            }))
        },
        open: function() {
            this.prevModal = twttr.widget.Dialog.currentModal;
            if (this.prevModal) {
                this.prevModal.close()
            }
            twttr.widget.Dialog.prototype.open.call(this)
        },
        close: function() {
            twttr.widget.Dialog.prototype.close.call(this);
            if (this.prevModal) {
                this.prevModal.open();
                this.prevModal = null
            }
        },
        isOpen: function() {
            return this._isOpen
        }
    });
    twttr.klass("twttr.widget.FirstTimeDialog",
    function(C) {
        twttr.widget.Dialog.call(this, twttr.merge({
            modal: true,
            draggable: false,
            css: {
                width: 530
            }
        },
        C))
    }).superclass(twttr.widget.Dialog).methods({
        registerEvents: function() {
            twttr.widget.Dialog.prototype.registerEvents.call(this);
            this.$container.find(".button.ok-thanks").bind("click", twttr.bind(this,
            function(C) {
                C.preventDefault();
                C.stopPropagation();
                this.destroy()
            }))
        }
    });
    twttr.klass("twttr.widget.MuteDialog",
    function() {
        this.peoples = twttr.caches.User.get("muted");
        if (!this.peoples) {
            this.peoples = {}
        }
        var C = {
            fixed: false,
            draggable: true,
            modal: true,
            view: "Dialog",
            template: {
                title: _("Mute a User"),
                content: (new twttr.views.MuteUsers()).html()
            }
        };
        twttr.widget.Dialog.call(this, C)
    }).superclass(twttr.widget.Dialog).methods({
        registerEvents: function() {
            var C = this;
            twttr.widget.Dialog.prototype.registerEvents.call(this);
            this.autocomplete = new twttr.widget.Autocomplete({
                input: this.$find(".mute-input"),
                limit: 10,
                type: "username"
            });
            this.currentSelection = {};
            this.autocomplete.bind("select",
            function(H, G, I, D, F, E) {
                C.currentSelection.screenName = F;
                C.currentSelection.userId = E;
                C.currentSelection.profileImageUrl = D
            });
            this.$dialog.delegate(".remove-muted-person", "click",
            function(E) {
                var F = $(this).parent();
                var D = F.attr("data-user-id");
                delete C.peoples[D];
                twttr.caches.User.set("muted", C.peoples);
                F.remove()
            });
            this.$find(".mute-input,.twttr-dialog").bind("keydown",
            function(D) {
                if (D.keyCode === twttr.constants.keyCodes.enter && !twttr.widget.Autocomplete._isCompletionsOpen) {
                    D.stopPropagation();
                    C.fetchUser()
                }
            });
            this.$find(".button").bind("click",
            function(D) {
                C.fetchUser()
            });
            this.populateUsers()
        },
        fetchUser: function() {
            var C = this.$find("input[type=text]");
            twttr.API.User.find(C.val().toString(), twttr.bind(this,
            function(D) {
                C.val("");
                $(".stream-tweet[data-user-id=" + D.id + "]").parent().remove();
                var E = {
                    screenName: D.screenName,
                    userId: D.id,
                    profileImageUrl: twttr.helpers.transformProfileImageUrl(D.profileImageUrl, "mini")
                };
                this.peoples[D.id] = E;
                twttr.caches.User.set("muted", this.peoples);
                this.populateUsers()
            }))
        },
        populateUsers: function() {
            var D = [];
            for (var C in this.peoples) {
                D.push('<li data-user-id="' + this.peoples[C].userId + '" data-user-screenname="' + this.peoples[C].screenName + '">                    <img width="24" height="24" src="' + this.peoples[C].profileImageUrl + '"/> ' + this.peoples[C].screenName + ' <span class="remove-muted-person">&times;</span></li>')
            }
            D = D.join("");
            this.$find(".muted-user-list").html(D)
        },
        open: function() {
            twttr.widget.Dialog.prototype.open.call(this);
            this.$find("input[type=text]").focus();
            return this
        },
        close: function() {
            twttr.widget.Dialog.prototype.close.call(this);
            this.remove();
            return this
        }
    });
    twttr.klass("twttr.widget.Prompt",
    function(C) {
        var D = {
            view: "Dialog",
            template: {
                content: (new twttr.views.Prompt({
                    ok: _("Yes"),
                    cancel: _("No")
                })).html()
            }
        };
        this.options = twttr.merge({},
        D, C, true);
        twttr.widget.Prompt.uber.constructor.call(this, this.options)
    }).superclass(twttr.widget.Dialog).methods({
        registerEvents: function() {
            twttr.widget.Dialog.prototype.registerEvents.call(this);
            this.$ok = this.$container.find(".twttr-prompt-ok");
            this.$cancel = this.$container.find(".twttr-prompt-cancel");
            this.$ok.addClass("selected").bind("click", twttr.bind(this,
            function(C) {
                C.preventDefault();
                this.options.callback(true);
                this.close()
            }));
            this.$cancel.bind("click", twttr.bind(this,
            function(C) {
                C.preventDefault();
                this.options.callback(false);
                this.close()
            }));
            this.$container.bind("keypress", twttr.bind(this,
            function(C) {
                C.stopPropagation();
                if (C.metaKey) {
                    return
                }
                if (C.keyCode === 9) {
                    this.$cancel.toggleClass("selected");
                    this.$ok.toggleClass("selected")
                } else {
                    if (C.keyCode === 13 || C.keyCode === 32) {
                        C.preventDefault();
                        this.options.callback(this.$ok.hasClass("selected"));
                        this.destroy()
                    }
                }
            }));
            this._$tabInput = $('<input type="text" class="twttr-hidden-input"/>').appendTo(this.$dialog).bind("keypress",
            function(C) {
                C.preventDefault()
            })
        },
        open: function() {
            twttr.widget.Dialog.prototype.open.call(this);
            setTimeout(twttr.bind(this,
            function() {
                this._$tabInput.focus()
            }), 10);
            return this
        }
    });
    twttr.klass("twttr.widget.RetweetDialog",
    function(C) {
        twttr.widget.RetweetDialog.uber.constructor.call(this, C);
        this.$dialog.attr("type", "retweet");
        this.$container.find(".twttr-dialog-footer").hide();
        twttr.API.Status.find(this.options.data.tweetId, twttr.bind(this,
        function(E) {
            var D = new twttr.views.ReplyDialogFooter({
                screen_name: E.user.screenName,
                text: twttr.util.linkify(E.text, {
                    nofollow: true
                }),
                profile_image_url: E.user.profileImageUrl
            });
            D.render(this.$container.find(".twttr-dialog-content"), "prepend")
        }))
    }).superclass(twttr.widget.Prompt);
    twttr.klass("twttr.widget.Trends",
    function(C) {
        var C = twttr.merge({
            view: "Dialog"
        },
        C, true);
        twttr.widget.Trends.uber.constructor.call(this, C);
        twttr.API.Trend.locations(twttr.bind(this,
        function(D) {
            var E = new twttr.views.LocalTrends(D);
            E.render(this.$container.find(".twttr-dialog-content"), "append");
            this.markLocation()
        }))
    }).superclass(twttr.widget.Dialog).methods({
        registerEvents: function() {
            twttr.widget.Trends.uber.constructor.prototype.registerEvents.call(this);
            this.$container.delegate("dl a", "click",
            function(C) {
                var D = parseInt($(this).attr("data-woeid"), 10);
                twttr.currentUser.setTrendLocation(D);
                $(this).closest(".twttr-dialog-content").find("a.selected").removeClass("selected");
                $(this).addClass("selected");
                scribble("switch-trend-location", {
                    woeid: D,
                    input: "click",
                    origin: "dialog"
                })
            })
        },
        position: function() {
            if (!this.options.fixed) {
                this.$dialog.addClass("static")
            }
            var D = twttr.app.currentPage().$find(".dashboard");
            if (D.length === 0) {
                this.centerHorizontal()
            }
            var E = Math.max(D.offset().left, this.$dialog.outerWidth());
            var H = $(window).scrollTop(),
            G = this.$dialog.innerHeight(),
            C = B.height(),
            F = Math.round((C / 2) - (G / 2));
            if (!this.options.fixed) {
                F += H
            }
            this.$dialog.css({
                left: E - this.$dialog.outerWidth(),
                top: F
            })
        },
        markLocation: function() {
            twttr.currentUser.trendLocation().first(twttr.bind(this,
            function(C) {
                var D = (C && C.woeid) || 1;
                this.$container.find("[data-woeid=" + D + "]").addClass("selected")
            }))
        }
    });
    twttr.klass("twttr.widget.TweetDialog",
    function(C) {
        C = twttr.merge({
            basic: true
        },
        C);
        C.template = twttr.merge({
            show_geo: true,
            container_id: "tweet_dialog"
        },
        C && C.template);
        var C = $.extend(true, {
            basic: true,
            template: {
                show_geo: true,
                container_id: "tweet_dialog"
            }
        },
        C);
        twttr.widget.TweetDialog.uber.constructor.call(this, C);
        this._ready = false
    }).superclass(twttr.widget.Dialog).methods({
        registerEvents: function() {
            var C = this;
            twttr.widget.Dialog.prototype.registerEvents.call(this);
            this.view.bind("ready", twttr.bind(this,
            function() {
                this._ready = true;
                setTimeout(twttr.bind(this,
                function() {
                    this.onReady()
                }), 0)
            }));
            this.view.tweetBox.bind("tweetSuccess", twttr.bind(this,
            function(E, F, D) {
                if (D === "reply") {
                    twttr.showMessage(_("Your reply was posted!"))
                } else {
                    twttr.showMessage(_("Your Tweet was posted!"))
                }
                this.destroy()
            }));
            this.view.tweetBox.bind("dmSuccess", twttr.bind(this,
            function(D, E) {
                if (twttr.is.def(twttr.messageManager)) {
                    twttr.messageManager.addMessage(E)
                }
                twttr.showMessage(_("Your message was sent!"));
                C.close()
            }));
            if (this.options.basic) {
                this.view.tweetBox.bind("titleChanged", twttr.bind(this,
                function(D, E) {
                    this.$title.html(E || this.options.template.title)
                }))
            }
        },
        onReady: function() {
            var C = [];
            return function(D) {
                if (D) {
                    C.push(D)
                } else {
                    twttr.each(C,
                    function(E) {
                        E()
                    });
                    C = []
                }
            }
        } (),
        open: function() {
            twttr.widget.Dialog.prototype.open.call(this);
            this.onReady(twttr.bind(this,
            function() {
                setTimeout(twttr.bind(this,
                function() {
                    if (this.options.defaultContent) {
                        this.focus();
                        this.setContent(this.options.defaultContent)
                    }
                }), 0)
            }));
            return this
        },
        setContent: function(C) {
            this.view.tweetBox.editor.setContent(C);
            return this
        },
        setCaretPosition: function(F, D) {
            D = D || F;
            var E = this.view.tweetBox.editor.$editor[0];
            if (E.setSelectionRange) {
                E.focus();
                E.setSelectionRange(F, D)
            } else {
                if (E.createTextRange) {
                    var C = E.createTextRange();
                    C.collapse(true);
                    C.moveStart("character", F);
                    C.moveEnd("character", poptEnd);
                    C.select()
                }
            }
        },
        focus: function() {
            if (this.options.defaultContent) {
                var C = this.view.tweetBox.editor.$editor.val().length;
                this.setCaretPosition(C)
            } else {
                this.view.tweetBox.editor.focus()
            }
            return this
        }
    });
    twttr.klass("twttr.widget.ReplyDialog",
    function(C) {
        var C = twttr.merge({},
        A, C, {},
        true);
        twttr.widget.ReplyDialog.uber.constructor.call(this, C);
        this.$dialog.attr("type", "reply")
    }).superclass(twttr.widget.TweetDialog).statics({
        openReplyDialog: false
    }).methods({
        open: function() {
            if (this.constructor.openReplyDialog) {
                this.constructor.openReplyDialog.close()
            }
            twttr.widget.TweetDialog.prototype.open.call(this);
            this.constructor.openReplyDialog = this;
            this.focus();
            return this
        },
        focus: function() {
            var D = this.view.tweetBox.editor.$editor.val().length;
            var C = this.view.tweetBox.editor.$editor.val().length;
            if (this.options.multiple) {
                D = this.options.data.screenName.length + 2
            }
            this.setCaretPosition(D, C)
        }
    });
    twttr.klass("twttr.widget.DirectMessageDialogSingle",
    function(D) {
        var C = {
            view: "DirectMessageDialog",
            data: {
                getUser: function() {
                    return D.user.user_id
                }
            },
            template: {
                show_geo: false
            }
        };
        var D = twttr.merge({},
        C, D, true);
        twttr.widget.DirectMessageDialogSingle.uber.constructor.call(this, D);
        this.$container.addClass("twttr-direct-message-single");
        this.bind("close", twttr.bind(this,
        function() {
            this.remove()
        }))
    }).superclass(twttr.widget.TweetDialog).methods({
        open: function() {
            twttr.widget.TweetDialog.prototype.open.call(this);
            this.$container.find("textarea").focus();
            return this
        }
    });
    twttr.klass("twttr.widget.DirectMessageDialog",
    function(C) {
        var D = this;
        var E = {
            data: {
                getUser: twttr.bind(this,
                function() {
                    return this.$container.find(".twttr-directmessage-input").val()
                })
            },
            template: {
                show_geo: false
            }
        };
        this.options = twttr.merge({},
        C, E, true);
        twttr.widget.DirectMessageDialog.uber.constructor.call(this, this.options);
        this.autocomplete = new twttr.widget.Autocomplete({
            limit: 8,
            input: this.$container.find(".twttr-directmessage-input"),
            type: "username"
        });
        this.$container.addClass("twttr-direct-message")
    }).superclass(twttr.widget.TweetDialog).methods({
        registerEvents: function() {
            var C = this;
            twttr.widget.TweetDialog.prototype.registerEvents.call(this);
            this.bind("close",
            function() {
                C.remove()
            });
            this.view.tweetBox.editor.bind("blurFromTab",
            function(D, E) {
                if (E.shiftKey) {
                    C.$find("input[type=text]").focus()
                }
            });
            var C = this;
            setTimeout(function() {
                C.autocomplete.bind("select",
                function(E, G, F, D) {
                    if (G == "username") {
                        C.focus();
                        C.$container.find("h3 img").attr("src", D)
                    }
                })
            },
            10)
        },
        open: function() {
            twttr.widget.TweetDialog.prototype.open.call(this);
            this.$container.find(".twttr-directmessage-input").focus();
            return this
        }
    });
    twttr.klass("twttr.widget.ListDialog",
    function(C) {
        C = C || {};
        C.template = C.template || {};
        C.template.title = C.template.title || C.list ? _("Edit list details") : _("Create a new list");
        C.template.content = C.template.content || new twttr.views.ListDialog(C.list).html();
        if (!twttr.is.def(C.modal)) {
            C.modal = true
        }
        if (!twttr.is.def(C.draggable)) {
            C.draggable = true
        }
        C.view = "Dialog";
        this.list = C.list;
        this.onSuccess = C.onSuccess ||
        function(D) {
            twttr.router.routeTo(twttr.router.userListPath({
                screen_name: twttr.currentUser.screenName,
                list_slug: D.slug
            }));
            window.location.reload()
        };
        twttr.widget.Dialog.call(this, C)
    }).superclass(twttr.widget.Dialog).methods({
        open: function() {
            twttr.widget.Dialog.prototype.open.call(this);
            this.$container.find("input[name=name]").focus()
        },
        registerEvents: function() {
            var C = this;
            twttr.widget.Dialog.prototype.registerEvents.call(this);
            this.$container.find(".update-list-button").click(function(E) {
                if ($(this).hasClass("disabled")) {
                    return
                }
                $(this).addClass("disabled");
                var D = {
                    name: C.$container.find("[name=name]").val(),
                    description: C.$container.find("[name=description]").val(),
                    mode: C.$container.find("[name=mode]:checked").val()
                };
                if (C.list) {
                    twttr.merge(D, {
                        success: function() {
                            C.list.user.lists.find(C.list.id,
                            function() {
                                twttr.showMessage(_("List created!"));
                                C.onSuccess(arguments)
                            })
                        },
                        error: function() {
                            twttr.showError(_("There was an error updating the list"));
                            $(this).removeClass("disabled")
                        }
                    });
                    C.list.update(D)
                } else {
                    twttr.merge(D, {
                        success: function(F) {
                            twttr.showMessage(_("List created!"));
                            C.onSuccess(F)
                        },
                        error: function() {
                            twttr.showError(_("There was an error creating the list"));
                            $(this).removeClass("disabled")
                        }
                    });
                    twttr.currentUser.lists.create(D.name, D)
                }
            })
        }
    })
} ());
twttr.klass.component = function(B, C) {
    if (!C) {
        C = function() {
            twttr.components.Base.apply(this, arguments)
        }
    }
    var A = twttr.klass(B, C);
    A.superclass(twttr.components.Base);
    A.initializer = function(D) {
        A._initializer = D;
        return A
    };
    A.destructor = function(D) {
        A._destructor = D;
        return A
    };
    A.deciderKey = function(D) {
        A._deciderKey = D;
        return A
    };
    return A
};
twttr.klass("twttr.components.Base",
function() {
    this.$node = $("<div/>").addClass("component");
    if (this.constructor._deciderKey && !twttr.decider.isAvailable(this.constructor._deciderKey)) {
        return
    }
    if (this.constructor._initializer) {
        this.constructor._initializer.apply(this, arguments)
    }
}).methods(twttr.EventProvider).methods({
    hasRendered: function() {
        if (!this.noSpacer) {
            this.$node.append("<hr class='component-spacer' />")
        }
    },
    $find: function() {
        return this.$node.find.apply(this.$node, arguments)
    },
    destroy: function() {
        this.$node.remove();
        this.unbind();
        if (this.constructor._destructor) {
            this.constructor._destructor.apply(this)
        }
    }
});
twttr.aug(twttr.dialogs, {
    reply: function(D) {
        var C = "@" + D.screenName;
        var A = false;
        var E = D.$tweet.find("a.twitter-atreply");
        if (E.length) {
            A = true;
            C = E.map(function(G, F) {
                return "@" + $(this).text()
            });
            C = $.makeArray(C).join(" ").replace("@" + D.screenName, "")
        }
        C = A ? "@" + D.screenName + " " + C: C + " ";
        if (A && D.screenName !== twttr.currentUser.screenName) {
            C = C.replace(new RegExp("@" + twttr.currentUser.screenName + "\\b"), "")
        }
        var B = {
            multiple: A,
            modal: false,
            draggable: true,
            defaultContent: C,
            template: {
                title: _("Reply to <strong>{{screen_name}}</strong>", {
                    screen_name: D.screenName
                }),
                footer: ""
            },
            data: D,
            origin: D.origin
        };
        return new twttr.widget.ReplyDialog(B)
    },
    directMessage: function(B) {
        var A = {
            modal: false,
            draggable: true,
            basic: false,
            template: {
                title: _("Message") + ' <img class="avatar" src="http://s.twimg.com/a/1277334364/images/default_profile_6_mini.png"/> <input class="twttr-directmessage-input" type="text"/>',
                footer: _("tip: you can send a message to anyone who follows you")
            },
            origin: B.origin
        };
        return new twttr.widget.DirectMessageDialog(A)
    },
    dmSingle: function(A) {
        twttr.merge(A, {
            draggable: true,
            basic: false,
            template: {
                title: '<img src="' + A.user.profile_image_url + '"/> ' + _("<strong>Send <b>{{user_name}}</b> a message</strong>", {
                    user_name: A.user.name
                })
            }
        });
        return new twttr.widget.DirectMessageDialogSingle(A)
    },
    keyboardShortcuts: function() {
        twttr.dialogs._keyboardShortcuts = twttr.dialogs._keyboardShortcuts || new twttr.widget.Dialog({
            css: {
                width: 550
            },
            modal: true,
            draggable: false,
            template: {
                title: _("Keyboard shortcuts"),
                content: (new twttr.views.KeyboardShortcuts()).html()
            }
        });
        return twttr.dialogs._keyboardShortcuts
    },
    firstTime: function() {
        return new twttr.widget.FirstTimeDialog({})
    },
    retweet: function(B, C) {
        var A = {
            modal: true,
            draggable: true,
            callback: C,
            template: {
                title: _("Retweet this to your followers?"),
                footer: "",
                content: (new twttr.views.Prompt({
                    ok: _("Retweet"),
                    cancel: _("Cancel")
                })).html()
            },
            data: {
                tweetId: B
            },
            css: {
                width: 500
            }
        };
        return new twttr.widget.RetweetDialog(A)
    },
    deleteMessage: function(B) {
        var A = {
            modal: true,
            draggable: true,
            callback: B,
            template: {
                title: _("Are you sure you want to delete this message?")
            },
            css: {
                width: 450
            }
        };
        return new twttr.widget.Prompt(A)
    },
    deleteSavedSearch: function(A) {
        return new twttr.widget.Prompt({
            modal: true,
            template: {
                title: _("Are you sure you want to delete this search?"),
                content: (new twttr.views.Prompt({
                    ok: _("Yes"),
                    cancel: _("No")
                })).html()
            },
            callback: A
        })
    },
    goToUser: function() {
        var B = {
            modal: true,
            draggable: true,
            template: {
                title: _("Go to a person's profile"),
                content: '<input class="twttr-goto-user-input" type="text"/>'
            },
            css: {
                width: 450
            },
            positioning: {
                top: 75
            }
        };
        var A = new twttr.widget.Dialog(B);
        var D = A.$find(".twttr-goto-user-input");
        var C = new twttr.widget.Autocomplete({
            limit: 8,
            input: D,
            type: "username",
            preselect: true
        });
        D.bind("keypress",
        function(E) {
            if (E.keyCode === twttr.constants.keyCodes.enter && !C._isCompletionsOpen) {
                E.preventDefault();
                A.close();
                twttr.router.one("routed",
                function() {
                    $('<input type="text"/>').css({
                        position: "absolute",
                        top: 0,
                        left: 0
                    }).appendTo("body").focus().remove()
                });
                twttr.router.routeTo(twttr.router.profilePath({
                    screen_name: D.val().replace("@", "")
                }))
            }
        });
        A.bind("open",
        function() {
            D.focus()
        });
        return A
    },
    trends: function() {
        var A = {
            draggable: true,
            css: {
                width: 475
            },
            template: {
                title: _("Local Trends")
            }
        };
        return arguments.callee._ret = arguments.callee._ret || new twttr.widget.Trends(A)
    },
    smsCodes: function() {
        twttr.dialogs._smsCodes = twttr.dialogs._smsCodes || new twttr.widget.Dialog({
            modal: false,
            draggable: true,
            template: {
                title: _("Two-way (sending and receiving) short codes:"),
                content: (new twttr.views.SmsCodes()).html()
            }
        });
        return twttr.dialogs._smsCodes
    }
});
twttr.klass.page("twttr.components.pages.Messages",
function() {
    twttr.components.Page.apply(this, arguments);
    twttr.messageManager = twttr.messageManager || new twttr.MessageManager()
}).methods(twttr.EventProvider).mixin(twttr.mixins.streamablePage).view(twttr.views.MessagesPage).methods({
    messages: function(B) {
        this.updatePageTitle(_("Twitter / Messages"));
        this.highlightGlobalNav("messages");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        var A = this;
        this.streamManager.switchTo(twttr.streams.MessageStream, {},
        function() {
            A.$node.find(".stream-item:first").click()
        });
        twttr.messageManager.setupContinuousPoll()
    },
    openDetailsPane: function() {
        return false
    },
    closeDetailsPane: function() {
        return false
    }
}).addAfterRender(function() {
    var A = this;
    this.resizeDetailsPane();
    twttr.messageManager.bind("updatedThread",
    function(C, B, D) {
        A.streamManager.getCurrent().updateThread(B, D)
    });
    twttr.messageManager.bind("deletedThread",
    function(B, C) {
        A.streamManager.getCurrent().removeThread(C)
    })
}).addOnSwitchAway(function() {
    twttr.messageManager.stopContinuousPoll()
}).containerCssClass("messages-container").click({
    ".new-message-button": function(B, A) {
        if (! (this._dialog && this._dialog._isOpen)) {
            this._dialog = twttr.dialogs.directMessage({
                origin: "message-dialog-new-message-button"
            });
            this._dialog.open()
        } else {
            this._dialog.focus()
        }
        B.preventDefault();
        B.stopPropagation();
        return false
    },
    ".message .delete-action": function(D, A) {
        var C = A.closest(".message"),
        B = parseInt(C.attr("data-message-id"), 10),
        E = C.attr("data-thread-id");
        twttr.dialogs.deleteMessage(function(F) {
            if (F) {
                twttr.messageManager.deleteMessage(B, E)
            }
        }).open()
    }
}); (function() {
    twttr.klass.page("twttr.components.pages.Search",
    function() {
        twttr.components.Page.apply(this, arguments)
    }).mixin(twttr.mixins.streamablePage).view(twttr.views.SearchPage).addOnSwitchAway(function() {
        twttr.search.clear()
    }).addOnSwitchTo(function() {
        twttr.themes.loadUserStyleFor(twttr.currentUser)
    }).addAfterRender(function() {
        var A = [];
        if (this._mode == "placeTweetSearch") {
            A = [new twttr.components.Trends(), new twttr.components.Footer()]
        } else {
            A = [new twttr.components.PeopleResults(this._query), new twttr.components.Trends(), new twttr.components.Footer()]
        }
        this.addDashboardComponents(A)
    }).methods({
        search: function(B, C) {
            var A = B.query || C.q;
            this.updatePageTitle(_("Twitter / Search - {{{query}}}", {
                query: A
            }));
            this.enterMode(A, "tweets")
        },
        links: function(B, C) {
            var A = B.query || C.q;
            if (!A) {
                return this.search({
                    query: "links"
                })
            }
            this.updatePageTitle(_("Twitter / Search with links - {{{query}}}", {
                query: A
            }));
            this.enterMode(A, "links")
        },
        nearby: function(B, C) {
            var A = B.query || C.q;
            if (!A) {
                return this.search({
                    query: "nearby"
                })
            }
            this.updatePageTitle(_("Twitter / Search nearby - {{{query}}}", {
                query: A
            }));
            this.enterMode(A, "nearby")
        },
        people: function(B, C) {
            var A = B.query || C.q;
            if (!A) {
                return this.search({
                    query: "users"
                })
            }
            this.updatePageTitle(_("Twitter / People Search - {{{query}}}", {
                query: A
            }));
            this.enterMode(A, "people")
        },
        placeTweetSearch: function(C) {
            var B = C.place_name,
            A = C.place_id;
            this.updatePageTitle(_("Twitter / Tweets at {{{placeName}}}", {
                placeName: B
            }));
            this._placeName = B;
            this.enterMode("place:" + A, "placeTweetSearch")
        },
        noAutoRender: true,
        enterMode: function(C, D) {
            if (!C) {
                this.trigger("notFound");
                return
            }
            this.closeDetailsPane();
            var B = this;
            B._mode = D;
            if (C !== this._query) {
                this._query = C;
                twttr.currentUser.savedSearches(function(E) {
                    var F = E.filter(function(G) {
                        return G.query === C
                    });
                    if (!F.length()) {
                        B.$find(".save-search-button").show()
                    } else {
                        B.$find(".delete-search-button").show();
                        B._savedSearch = F.first()
                    }
                });
                if (this.streamManager) {
                    this.streamManager.$node.detach()
                }
                var A = (D == "placeTweetSearch");
                this.render({
                    query: C,
                    pretty_query: A && this._placeName || C,
                    is_place_search: A
                })
            }
            if (D === "people") {
                this.streamManager.switchTo(twttr.streams.PeopleSearch, {
                    query: C
                })
            } else {
                this.streamManager.switchTo(twttr.streams.Search, {
                    query: C,
                    pretty_query: this._placeName || C,
                    mode: D,
                    hideTitle: true
                })
            }
            this.focusStreamTab(D)
        }
    }).click({
        ".save-search-button": function(C, A) {
            A.hide();
            var B = this.$find(".delete-search-button").show();
            twttr.currentUser.savedSearches.create(this._query, {
                success: twttr.bind(this,
                function(D) {
                    this._savedSearch = D
                }),
                error: function() {
                    B.hide();
                    A.show();
                    twttr.showError(_("Error saving search"))
                }
            })
        },
        ".delete-search-button": function(B, A) {
            twttr.dialogs.deleteSavedSearch(twttr.bind(this,
            function(C) {
                if (C) {
                    A.hide();
                    var D = this.$find(".save-search-button").show();
                    this._savedSearch.destroy({
                        success: twttr.bind(this,
                        function() {
                            this._savedSearch = null
                        }),
                        error: function() {
                            D.hide();
                            A.show();
                            twttr.showError(_("Error deleting search"))
                        }
                    })
                }
            })).open()
        }
    }).mousedown({
        ".promoted-tweet .tweet-image": function(C, A) {
            var D = A.closest(".promoted-tweet");
            var B = D.attr("data-impression-id");
            twttr.API.Status.logProfileImageClick(B)
        },
        ".promoted-tweet .tweet-screen-name": function(C, A) {
            var D = A.closest(".promoted-tweet");
            var B = D.attr("data-impression-id");
            twttr.API.Status.logScreenNameClick(B)
        }
    })
} ());
twttr.klass.page("twttr.components.pages.Home",
function() {
    twttr.components.Page.apply(this, arguments)
}).mixin(twttr.mixins.streamablePage).view(twttr.views.HomePage).methods({
    home: function(A) {
        this.updatePageTitle(_("Twitter / Home"));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.Home);
        this.focusStreamTab("home");
        this.closeDetailsPane()
    },
    mentions: function(A) {
        this.updatePageTitle(_("Twitter / @{{{screenName}}}", {
            screenName: twttr.currentUser.screenName
        }));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.Mentions);
        this.focusStreamTab("mentions");
        this.closeDetailsPane()
    },
    favorites: function(A) {
        this.updatePageTitle(_("Twitter / Your Favorites"));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.Favorites);
        this.focusStreamTab("favorites");
        this.closeDetailsPane()
    },
    listInHome: function(A) {
        A = twttr.util.camelizeObject(A);
        A.showTitleLink = true;
        this.updatePageTitle(_("Twitter / @{{{screenName}}}/{{{listSlug}}}", A));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.List, A);
        this.focusStreamTab("lists");
        this.closeDetailsPane()
    },
    savedSearch: function(A) {
        this.updatePageTitle(_("Twitter / Search - {{{query}}}", A));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.Search, A);
        this.focusStreamTab("searches");
        this.closeDetailsPane()
    },
    retweetsByOthers: function(A) {
        this.updatePageTitle(_("Twitter / Retweets"));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.RetweetsByOthers, {});
        this.focusStreamTab("retweets");
        this.closeDetailsPane()
    },
    retweetsByYou: function(A) {
        this.updatePageTitle(_("Twitter / Retweets by {{{screenName}}}", {
            screenName: twttr.currentUser.screenName
        }));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.RetweetsByYou, {});
        this.focusStreamTab("retweets");
        this.closeDetailsPane()
    },
    retweetsOfYourTweets: function(A) {
        this.updatePageTitle(_("Twitter / My Tweets, retweeted"));
        this.highlightGlobalNav("home");
        twttr.themes.loadUserStyleFor(twttr.currentUser);
        this.streamManager.switchTo(twttr.streams.YourTweetsRetweeted, {});
        this.focusStreamTab("retweets");
        this.closeDetailsPane()
    },
    loadLists: function(A) {
        var C = [];
        var E = false,
        D = false;
        function B() {
            if (E && D) {
                A(C)
            }
        }
        twttr.currentUser.lists(function(F) {
            C.push.apply(C, F.toArray());
            D = true;
            B()
        });
        twttr.currentUser.subscriptions(function(F) {
            C.push.apply(C, F.toArray());
            E = true;
            B()
        })
    },
    loadSavedSearches: function(A) {
        twttr.currentUser.savedSearches(function(B) {
            A(B.toArray())
        })
    },
    deleteSavedSearch: function() {
        var A = this.streamManager.getCurrent().params.query;
        twttr.currentUser.savedSearches(function(B) {
            B.filter(function(C) {
                return C.query === A
            }).first().destroy({
                success: function() {
                    twttr.router.routeTo(twttr.router.homePath())
                },
                error: function() {
                    twttr.showError(_("Error deleting search"))
                }
            })
        })
    },
    componentNotRendered: function(A, B) {
        if (A._namespace == "twttr.components.WhoToFollow") {
            this.$node.find(".dashboard .trends-inner").addClass("wide-trends")
        }
    }
}).addAfterRender(function() {
    var A = this;
    var B = twttr.util.params()["status"] || "";
    this.tweetBox = new twttr.TweetBox(this.$node.find(".main-tweet-box").empty(), {
        id: "main-tweet-box",
        condensed: !!!B || true,
        defaultContent: B,
        width: $.support.boxModel ? "482px": "500px",
        height: $.support.boxModel ? "36px": "54px",
        statusAction: "update",
        template: {
            button_text: _("Tweet")
        },
        origin: "main_tweet_box"
    });
    this.tweetBox.bind("tweetSuccess", twttr.bind(this.tweetBox,
    function(C, E) {
        var D = A.streamManager.getCurrent().trigger("didTweet", [E])
    }));
    this.tweetBox.bind("dmSuccess",
    function() {
        twttr.showMessage(_("Your message was sent!"))
    });
    if (twttr.currentUser.lang === "ja") {
        this.addDashboardComponent(new twttr.components.JapaneseAd())
    }
    if (twttr.loggedIn) {
        this.addDashboardComponents([new twttr.components.YourProfile(), new twttr.components.YourActivity(twttr.currentUser)])
    }
    this.addDashboardComponents([new twttr.components.Trends()]);
    if (twttr.loggedIn) {
        this.addDashboardComponents([new twttr.components.WhoToFollow()])
    }
    this.addDashboardComponents([new twttr.components.Promo(), new twttr.components.Footer()])
}).click({
    ".delete-saved-search": function(B, A) {
        twttr.dialogs.deleteSavedSearch(twttr.bind(this,
        function(C) {
            if (C) {
                this.deleteSavedSearch()
            }
        })).open();
        B.stopPropagation();
        B.preventDefault();
        return false
    },
    ".stream-tab-lists": function(B, A) {
        if ($(B.target).hasClass("tab-text")) {
            twttr.viewHelpers.superListDropdown(twttr.currentUser, A,
            function(C) {
                C.render(A, "append");
                C.open()
            })
        }
    },
    ".stream-tab-searches": function(D, A) {
        var C = this;
        if (this._savedSearchesDropdown) {
            return
        }
        var B = function(E) {
            var F;
            if (E.isPlaceSearch) {
                F = twttr.router.placeTweetSearchPath({
                    place_id: E.placeId,
                    place_name: E.name
                })
            } else {
                F = twttr.router.savedSearchPath({
                    query: E.query
                })
            }
            return {
                href: F,
                name: E.name,
                icon_class: "saved-search-icon",
                type: "saved search",
                id: E.id,
                delete_title: _("Delete this saved search.")
            }
        };
        this.loadSavedSearches(function(F) {
            if (F.length === 0) {
                C._savedSearchesDropdown = new twttr.control.Dropdown(A, {
                    items: [{
                        itemView: "NoSavedSearches"
                    }]
                })
            } else {
                var E = twttr.inject(F, [],
                function(I, H, G) {
                    I.push(B(G));
                    return I
                });
                C._savedSearchesDropdown = new twttr.control.Dropdown(A, {
                    itemView: "StreamLink",
                    items: E
                })
            }
            twttr.API.SavedSearch.bind("create",
            function(H, G) {
                C._savedSearchesDropdown.addItem(B(G))
            });
            twttr.API.SavedSearch.bind("delete",
            function(H, G) {
                C.$node.find(".stream-link[data-item-id=" + G.id + "]").remove()
            });
            C._savedSearchesDropdown.render(A, "append");
            C._savedSearchesDropdown.open()
        })
    },
    ".stream-tab-retweets": function(B, A) {
        if (this._retweetsDropDown) {
            return
        }
        this._retweetsDropDown = new twttr.control.Dropdown(A, {
            itemView: "StreamLink",
            items: [{
                href: twttr.router.retweetsByOthersPath(),
                name: _("Retweets by others")
            },
            {
                href: twttr.router.retweetsPath(),
                name: _("Retweets by you")
            },
            {
                href: twttr.router.retweetsOfMinePath(),
                name: _("Your Tweets, retweeted")
            }]
        });
        this._retweetsDropDown.render(A, "append");
        setTimeout(twttr.bind(this,
        function() {
            this._retweetsDropDown.open()
        }), 0)
    }
}).keypress({
    "shift+b": function() {
        this.panes.pop();
        scribble("detail-pane-back", {
            input: "keyboard"
        })
    }
});
twttr.klass.page("twttr.components.pages.Profile",
function() {
    twttr.components.Page.apply(this, arguments)
}).mixin(twttr.mixins.streamablePage).view(twttr.views.ProfilePage).click({
    ".stream-tab-lists": function(B, A) {
        if ($(B.target).hasClass("tab-text")) {
            twttr.viewHelpers.superListDropdown(this.profileUser, A,
            function(C) {
                C.render(A, "append");
                C.open()
            })
        }
    }
}).methods({
    _defaultedScreenName: function(A) {
        return ! A && twttr.currentUser ? twttr.currentUser.screenName: A
    },
    profile: function(C) {
        var B = this;
        var A = C.screen_name;
        this.loading(A);
        this.getUserInfo(A,
        function() {
            B.updatePageTitle(_("{{{fullName}}} ({{{screenName}}}) on Twitter", {
                fullName: B.profileUser.name,
                screenName: A
            }));
            B._highlightNavIfCurrentUser(A);
            B._switchToStream({
                screenName: A,
                stream: twttr.streams.User,
                tab: "tweets"
            })
        })
    },
    message: function(A) {
        this.profile(A);
        A = A || {};
        twttr.API.User.find(A.screen_name,
        function(B) {
            twttr.dialogs.dmSingle({
                user: {
                    user_id: B.attributes.id,
                    name: B.attributes.name,
                    profile_image_url: B.attributes.profile_image_url
                },
                origin: A.origin
            }).open()
        })
    },
    favorites: function(B) {
        var A = this._defaultedScreenName(B.screen_name);
        this.getUserInfo(A, twttr.bind(this,
        function() {
            if (twttr.helpers.canViewUser(this.profileUser)) {
                this.updatePageTitle(_("Twitter / {{{screenName}}}'s Favorites", {
                    screenName: A
                }));
                this._highlightNavIfCurrentUser(A);
                this._switchToStream({
                    screenName: A,
                    stream: twttr.streams.Favorites,
                    tab: "favorites"
                })
            } else {
                twttr.router.routeTo(twttr.router.profilePath({
                    screen_name: this.profileUser.screenName
                }))
            }
        }))
    },
    followers: function(B) {
        var A = this._defaultedScreenName(B.screen_name);
        this.updatePageTitle(_("Twitter / People who follow {{{screenName}}}", {
            screenName: A
        }));
        this._highlightNavIfCurrentUser(A);
        this._switchToStream({
            screenName: A,
            stream: twttr.streams.Followers,
            tab: "followers"
        })
    },
    following: function(B) {
        var A = this._defaultedScreenName(B.screen_name);
        this.updatePageTitle(_("Twitter / People {{{screenName}}} is following", {
            screenName: A
        }));
        this._highlightNavIfCurrentUser(A);
        this._switchToStream({
            screenName: A,
            stream: twttr.streams.Friends,
            tab: "following"
        })
    },
    lists: function(B) {
        var A = this._defaultedScreenName(B.screen_name);
        this.getUserInfo(A, twttr.bind(this,
        function() {
            if (twttr.helpers.canViewUser(this.profileUser)) {
                this.updatePageTitle(_("Twitter / {{{screenName}}}'s Lists", {
                    screenName: A
                }));
                this._highlightNavIfCurrentUser(A);
                this._switchToStream({
                    screenName: A,
                    stream: twttr.streams.OwnLists,
                    tab: "lists"
                })
            } else {
                twttr.router.routeTo(twttr.router.profilePath({
                    screen_name: this.profileUser.screenName
                }))
            }
        }))
    },
    memberships: function(B) {
        var A = B.screen_name;
        this.updatePageTitle(_("Twitter / Lists following {{{screenName}}}", {
            screenName: A
        }));
        this._highlightNavIfCurrentUser(A);
        this._switchToStream({
            screenName: A,
            stream: twttr.streams.Memberships,
            tab: "lists"
        })
    },
    subscriptions: function(B) {
        var A = B.screen_name;
        this.updatePageTitle(_("Twitter / Lists {{{screenName}}} is following", {
            screenName: A
        }));
        this._highlightNavIfCurrentUser(A);
        this._switchToStream({
            screenName: A,
            stream: twttr.streams.Subscriptions,
            tab: "lists"
        })
    },
    followerRequests: function(B) {
        var A = this._defaultedScreenName(B.screen_name);
        if (!twttr.helpers.isCurrentUser(A)) {
            twttr.router.routeTo(twttr.router.profilePath({
                screen_name: A
            }))
        } else {
            this.updatePageTitle(_("Twitter / My follower requests"));
            this._highlightNavIfCurrentUser(A);
            this._switchToStream({
                screenName: A,
                stream: twttr.streams.FollowerRequests,
                tab: "pending"
            })
        }
    },
    _addAdminTools: function() {
        if (!twttr.helpers.isCurrentUser(this.profileUser)) {
            twttr.admin.addToolsFor(this.profileUser.screenName, this.profileUser.id)
        }
    },
    _highlightNavIfCurrentUser: function(B) {
        var C = twttr.helpers.isCurrentUser(B);
        var A = C ? "profile": "";
        this.highlightGlobalNav(A)
    },
    _switchToStream: function(B) {
        var A = this;
        this.loading(B.screenName);
        this.getUserInfo(B.screenName,
        function() {
            if (A._renderedScreenName !== B.screenName) {
                A._renderPage()
            }
            A.streamManager.switchTo(B.stream, {
                canViewUser: twttr.helpers.canViewUser(A.profileUser),
                screenName: B.screenName
            })
        });
        this.focusStreamTab(B.tab)
    },
    loading: function(A) {
        this.closeDetailsPane();
        if (this._renderedScreenName !== A) {
            if (this.streamManager && this.streamManager.getCurrent()) {
                this.streamManager.getCurrent().$node.detach()
            }
            this.$node.children().empty()
        }
    },
    _renderPage: function() {
        twttr.themes.loadUserStyleFor(this.profileUser);
        this._addAdminTools();
        this.render();
        this.renderUserInfo();
        this._renderedScreenName = this._screenName
    },
    listDeleted: function(A) {
        this.streamManager.getCurrent().remove(A.uri)
    },
    listUpdated: function(A) {
        window.location.reload()
    },
    getUserInfo: function(B, A) {
        this._screenName = B;
        twttr.API.User.find(this._screenName, {
            success: twttr.bind(this,
            function(C) {
                this.profileUser = twttr.profileUser = C;
                if (A) {
                    A()
                }
            }),
            error: twttr.bind(this,
            function(C) {
                this.trigger("notFound")
            })
        })
    },
    renderUserInfo: function() {
        var B = this,
        A = this.profileUser;
        this.panes.push(new twttr.views.Dashboard("profile.dashboard", A.attributes));
        if (twttr.loggedIn) {
            new twttr.components.ProfileActions(A).$node.appendTo(this.$find(".profile-actions-container"))
        }
        twttr.viewHelpers.addMapLink(A.location, this.$node.find(".profile-info .screen-name-and-location"))
    },
    noAutoRender: true
}).addOnSwitchAway(function() {
    twttr.admin.removeTools()
}).addViewData(function() {
    return {
        profile_user: new twttr.views.ProfileUser(twttr.profileUser)
    }
}).addAfterRender(function() {
    if (twttr.currentUser && twttr.currentUser.lang === "ja") {
        this.addDashboardComponent(new twttr.components.JapaneseAd())
    }
    this.addDashboardComponents([new twttr.components.DashboardProfileStats(twttr.profileUser), new twttr.components.ProfileActivity(twttr.profileUser)]);
    if (twttr.loggedIn) {
        this.addDashboardComponent(new twttr.components.WhoToFollow(twttr.profileUser.screenName))
    }
    this.addDashboardComponents([new twttr.components.Footer()])
});
twttr.klass.page("twttr.components.pages.List",
function() {
    twttr.components.Page.apply(this, arguments)
}).mixin(twttr.mixins.streamablePage).view(twttr.views.ListPage).methods(twttr.EventProvider).methods({
    list: function(A) {
        A = twttr.util.camelizeObject(A);
        this.updatePageTitle(_("Twitter / @{{{screenName}}}/{{{listSlug}}}", A));
        this.switchToStream(twttr.streams.List, A);
        this.focusStreamTab("tweets")
    },
    members: function(A) {
        A = twttr.util.camelizeObject(A);
        this.updatePageTitle(_("Twitter / @{{{screenName}}}/{{{listSlug}}} - Following", A));
        this.switchToStream(twttr.streams.ListMembers, A);
        this.focusStreamTab("members")
    },
    followers: function(A) {
        A = twttr.util.camelizeObject(A);
        this.updatePageTitle(_("Twitter / @{{{screenName}}}/{{{listSlug}}} - Followers", A));
        this.switchToStream(twttr.streams.ListFollowers, A);
        this.focusStreamTab("followers")
    },
    noAutoRender: true,
    listDeleted: function(A) {
        twttr.router.routeTo(twttr.router.userListsPath({
            screen_name: twttr.currentUser.screenName
        }))
    },
    listUpdated: function(A) {
        twttr.router.routeTo(twttr.router.userListPath({
            screen_name: twttr.currentUser.screenName,
            list_slug: A.slug
        }));
        window.location.reload()
    },
    _getList: function(A) {
        var B = this;
        if (!this.listOwnerName || !this.listId) {
            throw "You tried to use _getList before defining .listOwnerName and .listId"
        }
        twttr.API.User.find(this.listOwnerName,
        function(C) {
            C.lists.find(B.listId,
            function(D) {
                A(D)
            })
        })
    },
    switchToStream: function(C, D) {
        var B = this;
        var A = function() {
            B.trigger("notFound")
        };
        this.loading(D.screenName, D.listSlug);
        twttr.API.User.find(D.screenName, {
            success: function(E) {
                E.lists.find(D.listSlug, {
                    success: function(G) {
                        B.listId = G.id;
                        B.listOwnerName = G.user.screenName;
                        B._listSlug = G.slug;
                        if (B.fullName !== G.fullName) {
                            B.fullName = G.fullName;
                            var F = new twttr.views.List(G);
                            twttr.themes.loadUserStyleFor(G.user);
                            B.render({
                                list: F
                            })
                        }
                        B.streamManager.switchTo(C, D)
                    },
                    error: A
                })
            },
            error: A
        })
    },
    loading: function(B, A) {
        this.closeDetailsPane();
        if (this._listSlug !== A && this.listOwnerName !== B) {
            this.$node.children().empty()
        }
    },
    renderListInfo: function() {
        if (twttr.loggedIn) {
            this._getList(function() {});
            this._getList(twttr.bind(this,
            function(A) {
                new twttr.views.ListActions(A).render(this.$node.find(".list-actions-component"), "append")
            }))
        }
    },
    onListFollowingChange: function() {
        this.$node.find(".list-actions").remove();
        this.renderListInfo()
    }
}).addAfterRender(function() {
    var A = this;
    this._getList(function(B) {
        A.addDashboardComponents([new twttr.components.NewestListMembers(B), new twttr.components.MoreLists(B), new twttr.components.Footer()])
    });
    this.renderListInfo()
});
twttr.klass.page("twttr.components.pages.Permalink",
function() {
    twttr.components.Page.apply(this, arguments)
}).view(twttr.views.PermalinkPage).methods({
    permalink: function(B) {
        var A = this;
        this.tweetId = B.id;
        this.loading();
        twttr.API.Status.find(B.id, {
            success: function(C) {
                A.updatePageTitle(_("Twitter / @{{{fullName}}}: {{{truncatedText}}} ...", {
                    fullName: C.user.name,
                    truncatedText: C.text.slice(0, 26)
                }));
                twttr.themes.loadUserStyleFor(C.user);
                A.render();
                A.tweetComponent = new twttr.components.PermalinkTweet(C);
                A.tweetComponent.$node.appendTo(A.$find(".components-middle"));
                A.tweetComponent.bind("deleted",
                function() {
                    if (A === twttr.app.currentPage()) {
                        twttr.router.routeTo(twttr.router.homePath())
                    }
                });
                new twttr.components.InReplyTo(C).$node.appendTo(A.$find(".components-above"));
                new twttr.components.Media(C, A.$find(".permalink").width()).$node.appendTo(A.$find(".components-below"));
                new twttr.components.TweetGeoSmall(C).$node.appendTo(A.$find(".components-below"));
                new twttr.components.Retweeters(C).$node.appendTo(A.$find(".components-below"))
            },
            error: function() {
                A.trigger("notFound")
            }
        })
    },
    loading: function() {
        this.$find(".permalink").empty()
    }
}).methods({
    noAutoRender: true
}).containerCssClass("permalink-container").click({
    ".geo_map_tweets_at_this_place_link": function(D, A) {
        var B = A.attr("data-place-id");
        var C = A.attr("data-place-name");
        if (B && C) {
            twttr.router.routeTo(twttr.router.placeTweetSearchPath({
                place_id: B,
                place_name: C
            }))
        }
        D.stopPropagation();
        D.preventDefault();
        return false
    }
}).keydown({
    f: function(A) {
        if ($(A.target).is(":not(input)")) {
            this.tweetComponent.faveTweet("keyboard")
        }
    },
    r: function(A) {
        if ($(A.target).is(":not(input)")) {
            this.tweetComponent.replyTweet("keyboard")
        }
    },
    t: function(A) {
        if ($(A.target).is(":not(input)")) {
            this.tweetComponent.retweetTweet("keyboard")
        }
    }
});
twttr.klass.page("twttr.components.pages.404",
function() {
    twttr.components.Page.apply(this, arguments)
}).view(twttr.views["404Page"]).methods({
    notFound: function(A) {
        this.render();
        this.updatePageTitle(_("Twitter / ?"));
        twttr.themes.loadDefaultTheme()
    }
}).methods({
    noAutoRender: true
}).containerCssClass("fof-container").submit({
    ".user-search-form": function(C, A) {
        var B = A.find(".user-search-query").val();
        twttr.router.routeTo(twttr.router.userSearchPath({
            query: B
        }));
        C.preventDefault();
        return false
    }
}); (function() {
    twttr.klass.page("twttr.components.pages.Place",
    function() {
        twttr.components.Page.apply(this, arguments)
    }).mixin(twttr.mixins.streamablePage).view(twttr.views.PlacePage).addOnSwitchAway(function() {
        twttr.search.clear()
    }).addOnSwitchTo(function() {
        twttr.themes.loadUserStyleFor(twttr.currentUser)
    }).addAfterRender(function() {
        var B = this;
        var A = [new twttr.components.PlaceBusiness(B.place), new twttr.components.PlacePeople(B.place), new twttr.components.Footer()];
        B.addDashboardComponents(A)
    }).methods({
        drawMap: function(C, A) {
            var B = this;
            twttr.geo.loadMaps(function() {
                B.geoMap = new twttr.geo.Map(C, {});
                var D = null;
                if (A.geometry) {
                    var E = A.geometry.coordinates;
                    if (A.geometry.type == "Polygon") {
                        B.geoMap.addPlacePolygon(E)
                    } else {
                        if (A.geometry.type == "MultiPolygon") {
                            twttr.each(E,
                            function(F) {
                                B.geoMap.addPlacePolygon(F)
                            })
                        } else {
                            if (A.geometry.type == "Point") {
                                D = B.geoMap.addPoi(E)
                            }
                        }
                    }
                } else {
                    if (A.bounding_box) {
                        var E = A.bounding_box.coordinates;
                        if (E[0][0] == E[0][2]) {
                            D = B.geoMap.addPoi(E[0][0])
                        } else {
                            B.geoMap.addPlacePolygon(E)
                        }
                    }
                }
                if (D) {
                    D.setZIndex(10)
                }
                B.geoMap.adjustBounds(15);
                C.bind("refreshMap",
                function() {
                    B.geoMap.resize()
                });
                B.addNearbyPoints(C)
            })
        },
        addNearbyPoints: function(C) {
            var B = this;
            var A = B.geoMap.getCenter();
            B.geoMap.createOverlay();
            twttr.API.Place.search({
                lat: A.lat(),
                lon: A.lng(),
                require_activity: true,
                granularity: "poi",
                max_results: 15,
                success: function(F) {
                    var E = C.position();
                    var D = B.$node.find(".geo-map-place-bubble");
                    F.reverse().each(function(K) {
                        var G = K.data();
                        if (G.place_type != "poi" || G.id == B.place.id) {
                            return
                        }
                        var I = G.bounding_box.coordinates[0][0];
                        var H;
                        var J = function(N, M) {
                            H(N);
                            if (N && M) {
                                D.find(".geo-place-title").text(G.name);
                                D.find(".geo-place-details").text(twttr.geo.getPlaceDetails(G));
                                D.show().css({
                                    left: E.left + M.x - D.width() / 2,
                                    top: E.top + M.y,
                                    opacity: 0.8
                                })
                            } else {
                                D.hide()
                            }
                        };
                        var L = function() {
                            twttr.router.routeTo(twttr.router.placePath({
                                place_id: G.id
                            }))
                        };
                        H = B.geoMap.addFocusablePoint(I, J, L)
                    });
                    B.geoMap.adjustBounds(15, A)
                }
            })
        },
        enterModeComplete: function(B, D, E, A) {
            var C = this;
            C.place = A;
            C.updatePageTitle(new D({
                placeName: A.name,
                poi: A.place_type == "poi"
            }).html());
            A.show_map = !!(A.geometry || A.bounding_box);
            A.poi = A.place_type == "poi";
            C.render(A);
            if (A.show_map) {
                C.drawMap($("#geo_place_page_map_canvas"), A)
            }
            C.streamManager.switchTo(twttr.streams.Search, {
                query: "place:" + B,
                pretty_query: A.name,
                mode: E,
                hideTitle: true
            });
            C.focusStreamTab(E)
        },
        enterMode: function(A, C, D) {
            var B = this;
            twttr.API.Place.find(A, {
                success: function(E) {
                    B.enterModeComplete(A, C, D, twttr.geo.getFullPlace(E.data()))
                },
                error: function(E) {
                    if (E.status === 404) {
                        B.trigger("notFound")
                    } else {
                        B.enterModeComplete(A, C, D, {
                            name: _("this place"),
                            place_type: "poi",
                            id: A,
                            place_id: A,
                            location_service_down: true
                        })
                    }
                }
            })
        },
        tweets: function(A) {
            this.enterMode(A.place_id, twttr.views.PlacePageTweetsTitle, "tweets")
        },
        links: function(A) {
            this.enterMode(A.place_id, twttr.views.PlacePageLinksTitle, "links")
        },
        noAutoRender: true
    }).mousedown({
        ".promoted-tweet .tweet-image": function(C, A) {
            var D = A.closest(".promoted-tweet");
            var B = D.attr("data-impression-id");
            twttr.API.Status.logProfileImageClick(B)
        },
        ".promoted-tweet .tweet-screen-name": function(C, A) {
            var D = A.closest(".promoted-tweet");
            var B = D.attr("data-impression-id");
            twttr.API.Status.logScreenNameClick(B)
        }
    })
} ()); (function() {
    twttr.klass.page("twttr.components.pages.PlaceUsers",
    function() {
        twttr.components.Page.apply(this, arguments)
    }).mixin(twttr.mixins.streamablePage).view(twttr.views.PlaceUsersPage).addOnSwitchAway(function() {
        twttr.search.clear()
    }).addOnSwitchTo(function() {
        twttr.themes.loadUserStyleFor(twttr.currentUser)
    }).addAfterRender(function() {
        var B = this;
        var A = [new twttr.components.PlaceBusiness(B.place), new twttr.components.Footer()];
        B.addDashboardComponents(A)
    }).methods({
        enterModeComplete: function(B, D, E, A) {
            var C = this;
            C.place = A;
            C.updatePageTitle(new D({
                placeName: A.name,
                poi: A.place_type == "poi"
            }).html());
            A.show_map = !!(A.geometry || A.bounding_box);
            A.poi = A.place_type == "poi";
            A.place_id = A.id;
            C.render(A);
            C.streamManager.switchTo(twttr.streams.PlaceUsers, {
                placeId: B,
                onlyFollowing: (E === "following")
            });
            C.focusStreamTab(E)
        },
        enterMode: function(A, C, D) {
            var B = this;
            twttr.API.Place.find(A, {
                success: function(E) {
                    B.enterModeComplete(A, C, D, twttr.geo.getFullPlace(E.data()))
                },
                error: function(E) {
                    if (E.status === 404) {
                        B.trigger("notFound")
                    } else {
                        B.enterModeComplete(A, C, D, {
                            name: _("this place"),
                            place_type: "poi",
                            id: A,
                            place_id: A,
                            location_service_down: true
                        })
                    }
                }
            })
        },
        all: function(A) {
            this.enterMode(A.place_id, twttr.views.PlacePageUsersTitle, "all")
        },
        following: function(A) {
            this.enterMode(A.place_id, twttr.views.PlacePageUsersFollowingTitle, "following")
        },
        noAutoRender: true
    })
} ());
twttr.klass.page("twttr.components.pages.RateLimit",
function() {
    twttr.components.Page.apply(this, arguments)
}).view(twttr.views.RateLimitPage).methods({
    tooMuch: function(A) {
        this.render();
        this.updatePageTitle(_("Twitter / Error"));
        twttr.themes.loadDefaultTheme()
    }
}).methods({
    noAutoRender: true
}).containerCssClass("four-twenty-container");
twttr.provide("twttr.banners");
twttr.klass("twttr.widget.Banner",
function(A) {
    this.$node = $("<div />");
    this.view = new twttr.views[A.view](A);
    this.$pageOuter = $("#page-outer");
    this.$topStuff = $("#top-stuff");
    this.$node.delegate(".pane-close", "click", twttr.bind(this, this.remove))
}).methods(twttr.EventProvider).methods({
    insert: function() {
        this.view.render(this.$node);
        $("#banners").append(this.$node);
        this.$pageOuter.css({
            "padding-top": this.$topStuff.height() + 20
        });
        var A = twttr.app.currentPage();
        if (A && A.resizeDetailsPane) {
            A.resizeDetailsPane()
        }
    },
    remove: function() {
        this.$node.remove();
        this.$pageOuter.css({
            "padding-top": this.$topStuff.height() + 20
        });
        this.trigger("closed");
        var A = twttr.app.currentPage();
        if (A && A.resizeDetailsPane) {
            A.resizeDetailsPane()
        }
    }
});
twttr.aug(twttr.banners, {
    detachedEmail: function() {
        return new twttr.widget.Banner({
            view: "DetachedEmailBanner"
        })
    },
    verifyEmail: function(B) {
        var A = new twttr.widget.Banner({
            view: "VerifyEmailBanner",
            email: B
        });
        A.$node.delegate(".resend-confirmation-email-link", "click",
        function(C) {
            $.ajax({
                url: "/account/resend_confirmation_email",
                dataType: "json",
                success: function(D) {
                    twttr.showMessage(D.messageForFlash)
                },
                error: function(D) {
                    twttr.showError(_("Oops!  There was an error sending the confirmation email."))
                }
            })
        });
        return A
    },
    bouncingEmail: function(A) {
        return new twttr.widget.Banner({
            view: "BouncingEmailBanner",
            email: A
        })
    },
    suspended: function() {
        return new twttr.widget.Banner({
            view: "SuspendedBanner"
        })
    },
    emailAlreadyVerified: twttr.memoizing(this,
    function() {
        var A;
        for (var B = 0; B < twttr.currentUser.email.length; B++) {
            if (twttr.currentUser.email[B].current) {
                A = twttr.currentUser.email[B]
            }
        }
        return new twttr.widget.Banner({
            view: "EmailAlreadyVerifiedBanner",
            already_verified_message: _("Someone has already confirmed the email {{email}}", {
                email: A.address
            })
        })
    }),
    welcomeToPhoenix: twttr.memoizing(function() {
        var A = new twttr.widget.Banner({
            view: "WelcomeToPhoenixBanner",
            welcome_search_results_path: twttr.router.searchResultsPath({
                query: "#NewTwitter"
            })
        });
        return A
    })
});
twttr.klass.component("twttr.components.Promo").initializer(function() {
    twttr.API.Promo.random({
        success: twttr.bind(this,
        function(A) {
            new twttr.views.DashboardPromo(A).render(this.$node, "append");
            this.hasRendered()
        })
    })
}).deciderKey("promo_component");
twttr.klass.component("twttr.components.Trends").initializer(function() {
    new twttr.views.DashboardTrends().render(this.$node, "append");
    this.updateTrends();
    this.hasRendered();
    this.$find(".trend-toggle").click(function(A) {
        twttr.dialogs.trends().open();
        scribble("open-trend-dialog", {
            input: "click"
        })
    });
    this.$node.delegate(".trend-link", "mousedown",
    function(A) {
        scribble("show-trend", {
            component: "dashboard",
            input: "click",
            trend: $(this).text()
        })
    });
    twttr.API.CurrentUser.bind("changedLocation", twttr.bind(this, this.updateTrends));
    return this
}).deciderKey("trends_component").methods({
    updateTrends: function() {
        twttr.currentUser.trendLocation().first(twttr.bind(this,
        function(A) {
            var B = this.$find(".trends").empty();
            var C = {
                pc: true,
                success: function(D) {
                    D.each(function(F) {
                        var E = new twttr.views.TrendItem(F).$html();
                        if (F.promotedContent) {
                            F.logEvents("i");
                            E.bind("click",
                            function(G) {
                                F.logEvents("c")
                            })
                        }
                        E.appendTo(B)
                    })
                }
            };
            if (A) {
                this.$find(".trend-location").text(_(A.name));
                A.trends(C)
            } else {
                twttr.API.Trend.current(C)
            }
        }))
    }
});
twttr.klass.component("twttr.components.WhoToFollow").initializer(function(A) {
    this.screenName = A;
    this.fetcher = A ? twttr.profileUser.similarUsers: twttr.currentUser.recommendedUsers;
    this.currentRecommendations = [];
    var B = this;
    setTimeout(function() {
        B.loadRecommendations()
    },
    1)
}).mixin(twttr.mixins.whoToFollowHelper).methods({
    loadRecommendations: function() {
        var A = this;
        if (!A.isWTFAvailable( !! A.screenName)) {
            this.trigger("notRendered", "darkmoded");
            return
        }
        this.fetch({
            limit: 4,
            success: function(B) {
                var E = A.recsToUsers(B);
                if (E.length() > 0) {
                    var D,
                    C;
                    if (A.screenName) {
                        D = "whotofollow_view_similar_users";
                        C = "profile"
                    } else {
                        D = "whotofollow_view_recommended_users";
                        C = "home"
                    }
                    A.trackImpressions(E, D, {
                        tracking_context: C
                    }); (new twttr.views.DashboardWhoToFollow({
                        screenName: A.screenName
                    }).subview("recommended_followers", new twttr.views.UserSmallList(E)).render(A.$node, "append"));
                    A.attachWTFProfileEvents("whotofollow_sidebar_profile_click", A.$node);
                    A.attachWTFFollowEvents("whotofollow_sidebar_follow", A.$node);
                    A.attachWTFDismissEvents("whotofollow_sidebar_block", A.$node);
                    A.attachRefreshEvents();
                    A.hasRendered()
                } else {
                    A.trigger("notRendered", "noMoreRecommendations")
                }
            },
            error: function(B) {
                A.trigger("notRendered", B)
            }
        })
    },
    attachRefreshEvents: function() {
        var A = this;
        this.$find(".refresh-suggestions").click(function(C) {
            var B = A.$find(".recommended-followers");
            B.animate({
                opacity: 0
            },
            200);
            A.fetch({
                limit: 4,
                excluded: A.currentRecommendations.join(","),
                success: function(D) {
                    var F = A.recsToUsers(D);
                    if (F.length() > 0) {
                        A.trackImpressions(F, A.screenName ? "whotofollow_refresh_similar_users": "whotofollow_refresh_recommended_users");
                        var E = $('<ul class="recommended-followers wtf-component">' + (new twttr.views.UserSmallList(F)).html() + "</ul>");
                        E.css({
                            opacity: 0
                        });
                        B.replaceWith(E);
                        E.animate({
                            opacity: 1
                        },
                        200)
                    } else {
                        twttr.showMessage(_("You have no more recommendations today!"));
                        A.$find(".refresh-suggestions").remove();
                        B.css({
                            opacity: 1
                        })
                    }
                },
                error: function() {
                    twttr.showError(_("Whoops! Something went wrong. Please try again!"));
                    B.css({
                        opacity: 1
                    })
                }
            })
        })
    }
});
twttr.klass.component("twttr.components.MentionedInTweet").initializer(function(A) {
    var B = this.extractAtMentions(A.text);
    if (B.length) {
        twttr.API.User.findAll(B, twttr.bind(this,
        function(C) {
            new twttr.views.MentionedInTweet().subview("mentioned_users", new twttr.views.UserDetailedList(C)).render(this.$node, "append");
            this.hasRendered()
        }))
    }
}).superclass(twttr.components.Base).methods({
    extractAtMentions: function(B) {
        var A = [];
        $("<div>" + twttr.util.linkify(B) + "</div>").children("a.twitter-atreply").each(function() {
            var C = $(this).attr("data-screen-name");
            if (!twttr.helpers.isCurrentUser(C) && !twttr.inArray(C, A)) {
                A.push(C)
            }
        });
        return A
    }
});
twttr.klass.component("twttr.components.YourProfile").initializer(function() {
    new twttr.views.DashboardYourProfile(twttr.currentUser).render(this.$node, "append");
    this.hasRendered();
    if (twttr.currentUser && twttr.currentUser["protected"]) {
        this.renderRequestButton()
    }
    twttr.API.Status.bind("update retweet", twttr.bind(this, this.tweetHandler));
    twttr.API.Status.bind("delete unretweet", twttr.bind(this, this.deleteTweetHandler))
}).methods({
    reloadDashboard: function() {
        this.$node.empty();
        new twttr.views.DashboardYourProfile(twttr.currentUser).render(this.$node, "append")
    },
    deleteTweetHandler: function(C, A) {
        var B = this;
        twttr.currentUser.sync("statusesCount", twttr.currentUser.statusesCount - 1);
        if (A.id !== twttr.currentUser.status.id) {
            B.reloadDashboard();
            return
        }
        twttr.currentUser.timeline({
            include_rts: true,
            count: 2,
            success: function(G) {
                var E = null;
                if (!G.isEmpty()) {
                    G = G.toArray();
                    for (var F = 0, D = G.length; F < D; ++F) {
                        if (G[F].id !== A.id) {
                            E = G[F];
                            break
                        }
                    }
                }
                if (E) {
                    var H = twttr.merge({},
                    E.attributes);
                    delete H.user;
                    twttr.currentUser.sync("status", new twttr.API.Status(H))
                } else {
                    twttr.currentUser.sync("status", null)
                }
                B.reloadDashboard()
            }
        })
    },
    tweetHandler: function(B, A) {
        twttr.currentUser.sync("statusesCount", twttr.currentUser.statusesCount + 1);
        var C = twttr.merge({},
        A.attributes);
        delete C.user;
        twttr.currentUser.sync("status", new twttr.API.Status(C));
        this.reloadDashboard()
    },
    renderRequestButton: function() {
        twttr.currentUser.friends.pending({
            success: twttr.bind(this,
            function(D) {
                if (D.length > 0) {
                    var A;
                    if (D.length === 1) {
                        A = _("{{num}} new follower request", {
                            num: D.length
                        })
                    } else {
                        A = _("{{num}} new follower requests", {
                            num: D.length
                        })
                    }
                    var C = new twttr.views.DashboardFriendRequests({
                        button_label: A,
                        screen_name: twttr.currentUser.screenName
                    });
                    var B = this.$find(".follower-request");
                    C.render(B, "append")
                }
            }),
            error: function(A) {}
        })
    }
});
twttr.klass.component("twttr.components.ProfileActivity").initializer(function(A) {
    this.cacheExpiry = 24 * 60 * 60 * 60;
    this.profileUser = A;
    this.isOwnProfile = twttr.helpers.isCurrentUser(A);
    if (this.isOwnProfile) {
        this.addActivityListeners()
    }
    this.renderComponent()
}).methods({
    FOLLOWERS_KEY: "recentFollowers",
    FOLLOWING_KEY: "recentlyFollowed",
    addActivityListeners: function() {
        var B = this;
        function A(H, I, F) {
            var E = ".following-activity",
            K = B.FOLLOWING_KEY;
            if (H === "follower") {
                E = ".new-followers-activity";
                K = B.FOLLOWERS_KEY
            }
            var C = I ? 1: -1;
            var L = B.$find(E + " .user-stat-link");
            var J = parseInt(L.html().split(",").join(""), 10) + C;
            L.html(twttr.util.addCommas(J));
            if (I) {
                var D = new twttr.views.UserThumbListItem(F).$html();
                D.prependTo(B.$find(E + " .inline-list"));
                B.$find(E + " .inline-list li:gt(6)").remove();
                var G = B.$find(E + " .inline-list").clone().appendTo($("<div/>")).parent().html();
                twttr.caches.User.set(K, G, B.cacheExpiry)
            } else {
                var D = B.$find(E + " .user-profile-link[data-user-id=" + F.id + "]").parent();
                D.remove();
                twttr.caches.User.remove(K)
            }
        }
        twttr.API.User.bind("follow.YourActivity",
        function(D, C) {
            A("follow", true, C)
        });
        twttr.API.User.bind("unfollow.YourActivity",
        function(D, C) {
            A("follow", false, C)
        });
        twttr.API.User.bind("acceptFollow.YourActivity",
        function(D, C) {
            A("follower", true, C)
        });
        twttr.API.User.bind("block.YourActivity",
        function(D, C) {
            A("follow", false, C);
            A("follower", false, C)
        })
    },
    _renderFollowList: function(C, A, D) {
        var B = "";
        if (!C.isEmpty()) {
            B = new twttr.views.FollowList({
                users: C
            }).html()
        }
        this.$find(A).append(B);
        if (this.isOwnProfile) {
            twttr.caches.User.set(D, B, this.cacheExpiry)
        }
    },
    _getRecentlyFollowed: function(B, A) {
        this.profileUser.friends({
            count: B,
            success: A
        })
    },
    _getRecentFollowers: function(B, A) {
        this.profileUser.followers({
            count: B,
            success: A
        })
    },
    renderComponent: function() {
        var D = this;
        var E = this._namespace.split(".")[2];
        if (!this.isOwnProfile) {
            E = "Other" + E
        }
        new twttr.views[E](this.profileUser).render(this.$node, "html");
        this.hasRendered();
        if (twttr.decider.isAvailable("dashboard_activity_following")) {
            var C = this.isOwnProfile ? 7: 15;
            if (this.isOwnProfile) {
                var A = twttr.caches.User.get("recentlyFollowed");
                if (twttr.is.def(A)) {
                    this.$find(".following-activity").append(A)
                } else {
                    this._getRecentlyFollowed(C, twttr.bind(this,
                    function(G, F) {
                        this._renderFollowList(G.slice(0, C), ".following-activity", this.FOLLOWING_KEY)
                    }))
                }
            } else {
                this._getRecentlyFollowed(C, twttr.bind(this,
                function(F) {
                    this._renderFollowList(F, ".following-activity", this.FOLLOWING_KEY)
                }))
            }
        }
        if (this.isOwnProfile) {
            if (twttr.decider.isAvailable("dashboard_activity_followers")) {
                var B = twttr.caches.User.get(this.FOLLOWERS_KEY);
                if (this.isOwnProfile && twttr.is.def(B)) {
                    this.$find(".new-followers-activity").append(B)
                } else {
                    this._getRecentFollowers(C, twttr.bind(this,
                    function(F) {
                        this._renderFollowList(F, ".new-followers-activity", this.FOLLOWERS_KEY)
                    }))
                }
            }
        }
    }
});
twttr.klass.component("twttr.components.YourActivity").superclass(twttr.components.ProfileActivity).initializer(function() {
    this.constructor.uber.constructor._initializer.apply(this, arguments)
}).methods({
    addActivityListeners: function() {
        var A = this;
        this.constructor.uber.addActivityListeners.apply(this, arguments);
        twttr.API.Status.bind("favorite",
        function(C, D) {
            var B = new twttr.views.LatestFavorite(D).html();
            twttr.caches.User.set("latestFavorite", B, A.cacheExpiry);
            twttr.currentUser.sync("favouritesCount", twttr.currentUser.favouritesCount + 1);
            A.renderComponent()
        });
        twttr.API.Status.bind("unfavorite",
        function(C, D) {
            var B = twttr.caches.User.get("latestFavorite");
            latestId = $(B).attr("data-item-id");
            if (latestId == D.id) {
                twttr.currentUser.favorites().first(function(E) {
                    var F = E ? new twttr.views.LatestFavorite(E).html() : "";
                    twttr.caches.User.set("latestFavorite", F, A.cacheExpiry);
                    twttr.currentUser.sync("favouritesCount", Math.max(twttr.currentUser.favouritesCount - 1, 0));
                    A.renderComponent()
                })
            }
        })
    },
    renderComponent: function() {
        var C = this;
        this.constructor.uber.renderComponent.apply(this, arguments);
        if (twttr.decider.isAvailable("dashboard_activity_favorites")) {
            var A = twttr.caches.User.get("latestFavorite");
            var B = this.$find("div.latest-favorite");
            if (twttr.is.def(A)) {
                B.append(A)
            } else {
                twttr.currentUser.favorites().first(twttr.bind(this,
                function(E) {
                    var F = "";
                    if (E) {
                        F = new twttr.views.LatestFavorite(E).html()
                    }
                    B.append(F);
                    twttr.caches.User.set("latestFavorite", F, this.cacheExpiry)
                }))
            }
        }
        if (twttr.decider.isAvailable("dashboard_activity_listed")) {
            var D = twttr.caches.User.get("recentLists");
            if (twttr.is.def(D)) {
                this.$find(".lists-activity").append(D)
            } else {
                twttr.currentUser.memberships().first(5, twttr.bind(this,
                function(E) {
                    var F = "";
                    if (!E.isEmpty()) {
                        F = new twttr.views.RecentLists(E).html()
                    }
                    this.$find(".lists-activity").append(F);
                    twttr.caches.User.set("recentLists", F, this.cacheExpiry)
                }))
            }
        }
    }
});
twttr.klass.component("twttr.components.WebSearchResults").initializer(function(A) {
    $.ajax({
        url: "http://api.bing.net/json.aspx?",
        dataType: "jsonp",
        jsonp: "JsonCallback",
        data: {
            Query: A,
            Sources: "Web",
            AppId: "9EF7B62614F07F5029E42D0A9D69730058B1393E",
            JsonType: "callback",
            "Web.Count": 4
        },
        success: twttr.bind(this,
        function(B) {
            if (B.SearchResponse.Web.Total > 0) {
                new twttr.views.WebSearchResults({
                    query: A,
                    results: B.SearchResponse.Web.Results
                }).render(this.$node, "append");
                this.hasRendered()
            }
        })
    })
}).deciderKey("web_search_results_component");
twttr.klass.component("twttr.components.PeopleResults").initializer(function(A) {
    if (A.split(/\s/).length > 2) {
        return
    }
    A = A.replace(/(^|\b)(from\:|to\:|near\:|source\:)/g, "");
    if (A.indexOf(":") != -1) {
        return
    }
    twttr.API.User.search(A, {
        reputable: true
    }).first(4, twttr.bind(this,
    function(B) {
        if (B.length() > 0) {
            new twttr.views.PeopleResults({
                query: A
            }).subview("found_people", new twttr.views.UserSmallList(B)).render(this.$node, "append").delegate(".people-results a", "mousedown",
            function(C) {
                scribe({
                    event_name: "onebox_click_result",
                    query: A,
                    result_user_id: $(this).parents("li:first").attr("data-user-id")
                },
                "onebox_user_search", {
                    filter: "phoenix_user_search"
                })
            });
            scribe({
                event_name: "onebox_search_results",
                query: A,
                user_results: B.map(function(C) {
                    return C.id
                }).toArray(),
                user_results_count: B.length()
            },
            "onebox_user_search", {
                filter: "phoenix_user_search"
            });
            this.hasRendered()
        }
    }))
}).deciderKey("onebox_user_search");
twttr.klass.component("twttr.components.ProfileActions").initializer(function(A) {
    var B = this;
    this.profileUser = A;
    this.currentRecommendations = [];
    twttr.currentUser.relationshipWith(this.profileUser, twttr.bind(this,
    function(C) {
        this._data = {
            user: A,
            id: A.id,
            screen_name: A.screenName,
            notifications: C.notifications,
            following: C.following,
            followed_by: C.followedBy,
            blocking: C.blocking,
            follow_request_sent: A.followRequestSent,
            want_retweets: C.wantRetweets,
            reported: false
        };
        this._renderActions();
        this.registerEvents()
    }))
}).mixin(twttr.mixins.whoToFollowHelper).methods({
    _renderActions: function() {
        this._deregisterTipsy();
        this.$node.empty();
        new twttr.views.ProfileActions(this._data).render(this.$node, "append");
        this.$profileActionController = this.$find(".profile-actions-button");
        this.$listController = this.$find(".list-action-button");
        this.profileActionsDropdown = null;
        this.listActionsDropdown = null;
        this._registerTipsy()
    },
    renderSimilarUsers: function() {
        if (!this.isWTFAvailable(true)) {
            return
        }
        var A = this;
        A.profileUser.similarUsers({
            limit: 2,
            success: function(B) {
                var D = A.recsToUsers(B);
                if (D.length()) {
                    var C = (new twttr.views.WhoToFollowDropdown({
                        user: A.profileUser.name
                    }).subview("recommended_followers", new twttr.views.UserSmallList(D)).render(A.$find(".profile-actions"), "after"));
                    A.trackImpressions(D, "whotofollow_post_follow_similar_users", {
                        tracking_context: "profile",
                        profile_user: A.profileUser.id
                    });
                    A.attachWTFProfileEvents("whotofollow_dropdown_profile_click", C);
                    A.attachWTFFollowEvents("whotofollow_dropdown_follow", C);
                    A.attachWTFHideEvents("whotofollow_dropdown_hide", C);
                    C.slideDown(300)
                }
            }
        })
    },
    registerEvents: function() {
        this.$node.delegate(".direct-message-action", "click", twttr.bind(this,
        function(A) {
            A.preventDefault();
            twttr.dialogs.dmSingle({
                user: {
                    user_id: this.profileUser.attributes.id,
                    name: this.profileUser.attributes.name,
                    profile_image_url: this.profileUser.attributes.profile_image_url
                },
                origin: "profile-actions-direct-message"
            }).open()
        }));
        this._registerDropdownEvents();
        this._registerDeviceEvents();
        this._registerRetweetEvents();
        this._registerProtectedEvents();
        this._registerFollowEvents();
        this._registerUnblockEvents();
        this._registerAPIListeners()
    },
    _registerTipsy: function() {
        this.$find(".device-notifications").tipsy({
            gravity: "s",
            html: true,
            title: function() {
                var A = $(this).hasClass("notifying") ? _("Tweets from this user are sent to your mobile phone.") : _("Tweets from this user are not sent to your mobile phone.");
                return new twttr.views.Tipsy({
                    title: A
                }).html()
            }
        });
        this.$find(".retweet-setting").tipsy({
            gravity: "s",
            html: true,
            title: function() {
                var A = $(this).hasClass("including") ? _("Retweets from this user will appear in your timeline.") : _("Retweets from this user won't appear in your timeline.");
                return new twttr.views.Tipsy({
                    title: A
                }).html()
            }
        })
    },
    _deregisterTipsy: function() {
        this.$find(".device-notifications").tipsy({
            stopThat: true
        });
        this.$find(".retweet-setting").tipsy({
            stopThat: true
        })
    },
    _registerDropdownEvents: function() {
        this.$node.delegate(".profile-actions-button", "click", twttr.bind(this,
        function(A) {
            A.preventDefault();
            if (this.profileActionsDropdown) {
                return
            }
            this.profileActionsDropdown = this._getActionsDropdown(this.$profileActionController);
            this.profileActionsDropdown.render(this.$profileActionController, "after").open()
        }));
        this.$node.delegate(".list-action-button", "click", twttr.bind(this,
        function(A) {
            A.preventDefault();
            if (this.listActionsDropdown) {
                return
            }
            var B = this.profileUser.id;
            twttr.viewHelpers.openListDropDown(this.profileUser, this.$listController, twttr.bind(this,
            function(C) {
                this.listActionsDropdown = C;
                C.render(this.$listController, "after", {
                    id: B,
                    key: "lists"
                }).open()
            }))
        }))
    },
    _registerDeviceEvents: function() {
        var A = this;
        this.$node.delegate(".device-notifications", "click",
        function(D) {
            D.preventDefault();
            if (!twttr.currentUser.deviceSetup) {
                var B = new twttr.widget.Prompt({
                    modal: true,
                    callback: function(F) {
                        if (F) {
                            twttr.router.routeTo(twttr.router.devicesPath())
                        }
                    },
                    template: {
                        title: _("Activate your phone?"),
                        content: (new twttr.views.PhoneSetupPrompt({
                            screen_name: A._data.screen_name,
                            ok: _("Ok"),
                            cancel: _("Cancel")
                        })).html()
                    }
                }).open();
                B.bind("close",
                function() {
                    B.remove()
                });
                return
            }
            var C = $(this);
            var E = C.hasClass("notifying") ? "setNotificationsOff": "setNotificationsOn";
            A.profileUser[E]()
        })
    },
    _registerRetweetEvents: function() {
        var A = this;
        this.$node.delegate(".retweet-setting", "click",
        function(D) {
            var C = $(this);
            D.preventDefault();
            var B = C.hasClass("including");
            var E = B ? "setWantRetweetsOff": "setWantRetweetsOn";
            A.profileUser[E]()
        })
    },
    _registerProtectedEvents: function() {
        var A = this;
        this.$node.delegate(".follow-request-button", "click",
        function(B) {
            A.profileUser.reload().follow({
                error: function(C) {
                    twttr.showError(JSON.parse(C.reason).error)
                }
            });
            B.preventDefault()
        });
        this.$node.delegate(".cancel-request-link", "click",
        function(B) {
            A.profileUser.reload().unfollow({
                error: function(C) {
                    twttr.showError(JSON.parse(C.reason).error)
                }
            });
            B.preventDefault()
        })
    },
    _registerFollowEvents: function() {
        var A = this;
        this.$node.delegate(".profile-follow-button", "click",
        function(C) {
            var B = A.profileUser.impressionId;
            A.profileUser.follow({
                success: function() {
                    A.renderSimilarUsers()
                },
                error: function(D) {
                    twttr.showError(JSON.parse(D.reason).error)
                },
                impression_id: B
            });
            C.preventDefault()
        });
        this.$node.delegate(".profile-unfollow-link", "click",
        function(C) {
            var B = A.profileUser.impressionId;
            A.profileUser.unfollow({
                error: function(D) {
                    twttr.showError(JSON.parse(D.reason).error)
                },
                impression_id: B
            });
            C.preventDefault()
        })
    },
    _registerUnblockEvents: function() {
        var A = this;
        this.$node.delegate(".profile-unblock-link", "click",
        function(B) {
            A.profileUser.unblock({
                error: function(C) {
                    twttr.showError(JSON.parse(C.reason).error)
                }
            });
            B.preventDefault()
        })
    },
    _updateDisplay: function(C, E) {
        var B = this,
        D = !E,
        A = !!E;
        switch (C) {
        case "follow":
            B._data.following = D;
            B._data.blocking = A;
            break;
        case "unfollow":
            B._data.following = A;
            B._data.blocking = A;
            B._data.follow_request_sent = A;
            break;
        case "follow_request":
            B._data.follow_request_sent = D;
            break;
        case "block":
            B._data.following = A;
            B._data.blocking = D;
            B._data.reported = A;
            break;
        case "unblock":
            B._data.following = A;
            B._data.blocking = A;
            B._data.reported = A;
            break;
        case "report":
            B._data.following = A;
            B._data.blocking = D;
            B._data.reported = D;
            break;
        case "subscribe":
            B._data.notifications = D;
            break;
        case "unsubscribe":
            B._data.notifications = A;
            break;
        case "does_want_retweets":
            B._data.want_retweets = D;
            break;
        case "doesnt_want_retweets":
            B._data.want_retweets = A;
            break
        }
        B._renderActions()
    },
    _registerAPIListeners: function() {
        var B = this;
        var A = {
            before: function(F, E) {
                var D = E.requestParameters[0];
                var C = D.user_id || D.user_ids;
                if (C === B._data.id) {
                    B._updateDisplay(F.type, false)
                }
            },
            error: function(G, C, F) {
                var E = F.requestParameters[0],
                D = E.user_id || E.user_ids;
                if (D === B._data.id) {
                    B._updateDisplay(G.type, true)
                }
            }
        };
        twttr.API.User.bind("follow", A);
        twttr.API.User.bind("unfollow", A);
        twttr.API.User.bind("follow_request", A);
        twttr.API.User.bind("block", A);
        twttr.API.User.bind("unblock", A);
        twttr.API.User.bind("report", A);
        twttr.API.User.bind("subscribe", A);
        twttr.API.User.bind("unsubscribe", A);
        twttr.API.User.bind("does_want_retweets", A);
        twttr.API.User.bind("doesnt_want_retweets", A)
    },
    _getActionsDropdown: function(B) {
        var C = this;
        var A = [];
        A.push({
            label: _("Mention {{screen_name}}", this._data),
            icon: "mention",
            handlers: {
                click: function() {
                    new twttr.widget.TweetDialog({
                        template: {
                            title: "Mention " + C.profileUser.screenName
                        },
                        draggable: true,
                        defaultContent: "@" + C.profileUser.screenName + " ",
                        origin: "profile-actions-dropdown-metion"
                    }).open().focus()
                }
            }
        });
        if (this._data.blocking) {
            A.push({
                label: _("Unblock {{screen_name}}", this._data),
                icon: "block",
                handlers: {
                    click: function() {
                        C.profileUser.unblock({
                            before: function() {
                                $('.stream .stream-tweet[data-user-id="' + C.profileUser.id + '"]').closest(".stream-item").show()
                            }
                        })
                    }
                }
            })
        } else {
            A.push({
                label: _("Block {{screen_name}}", this._data),
                icon: "block",
                handlers: {
                    click: function() {
                        C.profileUser.block({
                            before: function() {
                                $('.stream .stream-tweet[data-user-id="' + C.profileUser.id + '"]').closest(".stream-item").hide()
                            }
                        })
                    }
                }
            })
        }
        if (!this._data.blocking) {
            A.push({
                label: _("Report {{screen_name}} for spam", this._data),
                icon: "spam",
                handlers: {
                    click: function() {
                        C.profileUser.report({
                            before: function() {
                                $('.stream .stream-tweet[data-user-id="' + C.profileUser.id + '"]').closest(".stream-item").hide()
                            }
                        })
                    }
                }
            })
        }
        return new twttr.control.Dropdown(B, {
            items: A,
            direction: "right"
        })
    }
});
twttr.control.Dropdown.createCache("lists");
twttr.klass.component("twttr.components.RelatedTweets").mixin(twttr.mixins.tweetActionable).initializer(function(E, D) {
    var B = this;
    var A = D.hasPromotedTweet();
    var C = function(F) {
        $.each(F.array || [],
        function(K, H) {
            var J = H.annotations.Entity;
            if (J) {
                $.each(H.results.array,
                function(M, L) {
                    L.sync("query", J);
                    H.attributes.results[M].query = J
                })
            }
            $.each(H.results.array,
            function(M, L) {
                if (L.sponsoredResult) {
                    twttr.API.Status.logImpression(L.sponsoredResult.impression_id)
                }
            });
            new twttr.views.RelatedTweets(H).render(B.$node, "append");
            if (H.resultType == "Pic") {
                var I = twttr.map(H.attributes.results,
                function(L) {
                    return {
                        picUrl: L.picUrl,
                        linkToTweet: twttr.router.permalinkPath({
                            id: L.tweetId,
                            screen_name: H.annotations.User
                        })
                    }
                });
                var G = {
                    hideAttribution: true
                }; (new twttr.media.InlineMedia()).renderPicsByThisUser(I, G,
                function(L, M) {
                    B.$node.find(".related-images-container").append(M)
                })
            }
        });
        B.registerTweetActionEvents();
        B.hasRendered()
    };
    twttr.API.Status.related(E.id, {
        pc: !A,
        success: C
    })
}).deciderKey("related_tweets_component");
twttr.klass.component("twttr.components.RecentTweets").mixin(twttr.mixins.tweetActionable).initializer(function(A) {
    var B = this;
    A.timeline().first(3,
    function(C) {
        if (C.length() > 0) {
            new twttr.views.RecentTweets(C).render(B.$node, "append");
            B.registerTweetActionEvents();
            B.hasRendered()
        }
    })
}).deciderKey("recent_tweets_component");
twttr.klass.component("twttr.components.Retweeters").initializer(function(B) {
    var A = this;
    B.retweeters({
        count: 100,
        success: function(C) {
            if (C.length() > 0) {
                new twttr.views.Retweeters({
                    tweet: B,
                    count: C.length(),
                    retweeters: C.first(15)
                }).render(A.$node, "append");
                A.hasRendered()
            }
        }
    })
}).deciderKey("retweeters_component");
twttr.klass.component("twttr.components.MessageThread").initializer(function(A) {
    var B = this;
    new twttr.views.MessageThread(A.messages).render(this.$node, "append");
    twttr.messageManager.bind("newMessage." + A.threadId,
    function(D, C) {
        new twttr.views.Message(C).render(B.$find(".messages-pane"), "prepend")
    });
    twttr.messageManager.bind("deletedMessage." + A.threadId,
    function(D, C) {
        B.$find(".message[data-message-id=" + C + "]").remove()
    });
    this.hasRendered()
});
twttr.klass.component("twttr.components.SendMessageBox").initializer(function(A) {
    var C = this;
    var B = new twttr.TweetBox(this.$node, {
        id: "send-message-box-" + A,
        condensed: true,
        width: "452px",
        height: $.support.boxModel ? "36px": "54px",
        statusAction: "directMessage",
        origin: "direct_message_stream_box",
        template: {
            title: _("Send {{screen_name}} a message", {
                screen_name: A
            }),
            show_geo: false,
            button_text: _("Send")
        },
        data: {
            getUser: function() {
                return A
            }
        }
    });
    B.bind("dmSuccess",
    function(D, E) {
        C.trigger("sentMessage", [E])
    });
    this.$node.addClass("gray-component").addClass("send-message-box");
    this.hasRendered()
});
twttr.klass.component("twttr.components.InReplyTo").mixin(twttr.mixins.tweetActionable).initializer(function(B) {
    var A = this;
    if (B.isReply) {
        B.inReplyTo(function(C) {
            new twttr.views.InReplyTo(C).render(A.$node, "append");
            A.registerTweetActionEvents();
            A.hasRendered()
        })
    }
}).deciderKey("in_reply_to_component").methods({
    noSpacer: true
});
twttr.klass.component("twttr.components.MoreLists").initializer(function(B) {
    var A = this;
    B.user.lists(function(C) {
        if (C.length()) {
            new twttr.views.MoreLists({
                user: new twttr.views.BaseAPI(B.user),
                lists: new twttr.views.BaseAPIList(C)
            }).render(A.$node, "append");
            A.hasRendered()
        }
    })
}).deciderKey("more_lists_component");
twttr.klass.component("twttr.components.MachineTranslatedTweet").initializer(function(A) {
    this._initTranslation(A, (twttr.pageLocale || $("html").attr("lang") || "en"))
}).deciderKey("machine_translated_tweets").statics({
    languageNames: {
        de: _("German"),
        fr: _("French"),
        es: _("Spanish"),
        it: _("Italian"),
        ja: _("Japanese"),
        en: _("English")
    }
}).methods({
    languageName: function(A) {
        return twttr.components.MachineTranslatedTweet.languageNames[A]
    },
    _initTranslation: function(B, A) {
        if (!B.user["protected"]) {
            this.destLocale = A;
            this.fetchTranslation(B, this.destLocale)
        }
    },
    _preProcessTweetText: function(F) {
        var D = 0;
        var C = 0;
        var A = [];
        var B = [];
        var E = F.replace(/\B[@ï¼ ]([a-zA-Z0-9_]{1,20})/g,
        function(G, H) {
            A.push("@" + H);
            return ("_u" + (D++) + "_")
        });
        this._mentions = A;
        E = E.replace(/\B[#ï¼ƒ]([0-9A-Z_]*[A-Z_]+[A-Z0-9_]*)/ig,
        function(G, H) {
            B.push("#" + H);
            return ("_h" + (C++) + "_")
        });
        this._hashtags = B;
        return E
    },
    _postProcessTweetText: function(C) {
        var B = C;
        if (this._mentions && this._mentions.length > 0) {
            for (var A = 0; A < this._mentions.length; A++) {
                B = B.replace(("_u" + (A) + "_"), this._mentions[A])
            }
        }
        if (this._hashtags && this._hashtags.length > 0) {
            for (var A = 0; A < this._hashtags.length; A++) {
                B = B.replace(("_h" + (A) + "_"), this._hashtags[A])
            }
        }
        B = B.replace(/&#(\d+);/g,
        function(D, E) {
            return String.fromCharCode(E)
        });
        return twttr.util.linkify(B)
    },
    _translationTextEqual: function(A, B) {
        if (A == B) {
            return true
        } else {
            if (A.toLowerCase().replace(/[^a-zA-Z]+/g, "") == B.toLowerCase().replace(/[^a-zA-Z]+/g, "")) {
                return true
            }
        }
        return false
    },
    _shouldShowTranslation: function(A, D, B, C) {
        if (B == C) {
            return false
        } else {
            if (this._translationTextEqual(A, D)) {
                return false
            }
        }
        return true
    },
    fetchTranslation: function(B, C) {
        var A = this;
        this.sourceText = this._preProcessTweetText(B.text);
        scribble("machine-translated-tweet", {
            input: "request"
        });
        $.ajax({
            url: "http://ajax.googleapis.com/ajax/services/language/translate",
            dataType: "jsonp",
            data: {
                v: "1.0",
                q: this.sourceText,
                langpair: "|" + C
            },
            success: twttr.bind(this,
            function(D) {
                if (D && D.responseStatus && D.responseStatus == 200 && D.responseData) {
                    var G = D.responseData["translatedText"];
                    var F = D.responseData["detectedSourceLanguage"];
                    var E = A.languageName(F);
                    if (A._shouldShowTranslation(A.sourceText, G, F, A.destLocale)) {
                        new twttr.views.MachineTranslatedTweet({
                            translated_text: A._postProcessTweetText(G),
                            source_language: E
                        }).render(A.$node, "append");
                        scribble("machine-translated-tweet", {
                            input: "display"
                        });
                        A.hasRendered()
                    }
                }
            })
        })
    }
});
twttr.klass.component("twttr.components.PlaceTweets").initializer(function(A) {
    var B = this;
    if (A) {
        twttr.API.Status.search("place:" + A.id, {
            success: function(C) {
                C.first(5,
                function(E) {
                    if (E.length() > 0) {
                        var D = E.map(function(G) {
                            return new twttr.views.DetailsPaneTweet(G)
                        });
                        var F = {
                            place_id: A.id,
                            place_name: A.fullName,
                            tweets: D.array
                        };
                        new twttr.views.PlaceTweets(F).render(B.$node, "append");
                        B.hasRendered()
                    }
                })
            }
        })
    }
}).deciderKey("place_tweets_component");
twttr.klass("twttr.geo.PlaceCreationDialog",
function(B, F, D, E) {
    var G = this;
    G.container = B;
    if (D.contained_within !== undefined) {
        var A = twttr.geo.getLocationFromPlace(B);
        if (A) {
            G.lat = A.latitude;
            G.lon = A.longitude;
            G.accuracy = A.accuracy
        } else {
            G.lat = 38.7777;
            G.lon = -95.1875;
            G.accuracy = 2000000
        }
    } else {
        G.lat = D.lat;
        G.lon = D.lon;
        G.accuracy = D.accuracy
    }
    G.originalGeoParams = D;
    G.placeName = F;
    G.onPlaceCreated = E;
    G.draggedPin = false;
    G.streetAddress = "";
    G.markerAccurate = G.accuracy <= 100;
    var C = {
        template: {
            container_id: "geo_place_creation_dialog",
            title: '<span class="geo-place-creation-dialog-title"></span>',
            content: '<div class="geo-place-creation-dialog-content"></div>'
        },
        css: {
            width: 350
        },
        modal: true
    };
    G.dialog = new twttr.widget.GeoDialog(C);
    G.$content = $(".geo-place-creation-dialog-content");
    G.$title = $(".geo-place-creation-dialog-title");
    G.showWhereIsPlace()
}).methods({
    ERROR_REGION_UNAVAILABLE: _("Place creation for that region is not available yet."),
    ERROR_GENERIC: _("We couldn't add this place. Please try again."),
    queryMap: function() {
        var A = this;
        var B = twttr.geo.helpVal(A.$queryMapInput);
        if (!A.geoCoder) {
            A.geoCoder = new google.maps.Geocoder()
        }
        A.geoCoder.geocode({
            address: B,
            location: A.geoMap.getCenter()
        },
        function(E, C) {
            var D = "";
            switch (C) {
            case google.maps.GeocoderStatus.OK:
                A.geoMap.fitBounds(E[0].geometry.viewport, twttr.geo.PLACE_CREATION_DEFAULT_ZOOM_LEVEL);
                A.$movePinHint.clearQueue().stop().hide();
                A.updateMap();
                break;
            case google.maps.GeocoderStatus.ZERO_RESULTS:
                D = _("Unable to locate that address or place.");
                break;
            default:
                D = _("Geocoding service temporarily unavailable.")
            }
            A.$queryMapError.text(D)
        })
    },
    setContentAndTitle: function(A) {
        var B = this;
        B.$content.html(A);
        B.$title.html(B.$content.find("div:first").remove().html())
    },
    isPointOnMap: function(A, C) {
        var B = twttr.geo.POI_MAP_DEAD_ZONE;
        return A > B.left && C > B.top && A < this.$mapCanvas.width() - B.right && C < this.$mapCanvas.height() - B.bottom
    },
    updateMap: function() {
        var B = this;
        B.$queryMapError.empty();
        var A = B.geoMap.latLngToContainerPoint([B.lon, B.lat]);
        if (B.markerAccurate && B.isPointOnMap(A.x, A.y)) {
            B.marker.setVisible(true);
            B.$dropPinHint.clearQueue().stop().hide();
            B.$nextButton.removeClass("btn-disabled");
            B.$droppablePin.hide()
        } else {
            B.marker.setVisible(false);
            B.$movePinHint.clearQueue().stop().hide();
            B.$dropPinHint.filter(":hidden").clearQueue().fadeTo(0, 0).delay(200).show().queue(function(C) {
                var D = $(this);
                D.css("top", B.$mapCanvas.height() - D.height());
                C()
            }).fadeTo(500, 0.8);
            B.$nextButton.addClass("btn-disabled");
            B.$droppablePin.css({
                left: B.$mapCanvas.width() - 10 - twttr.geo.POI_MARKER_SIZE.width,
                top: B.$mapCanvas.height() + 7
            }).show()
        }
    },
    accuracyFromMapZoomLevel: function(D, E) {
        var B = this;
        var A = B.geoMap.latLngToContainerPoint([E, D]);
        var C = B.geoMap.containerPointToLatLng(A.x + 1, A.y + 1);
        return Math.round(1414 * twttr.geo.greatCircleDistanceInKm(D, E, C.lat(), C.lng()))
    },
    showWhereIsPlace: function() {
        var C = this;
        C.setContentAndTitle(new twttr.views.GeoWhereIsPlace({
            place_name: C.placeName
        }).html());
        var B = C.$content;
        C.$queryMap = B.find(".geo-query-map");
        C.$queryMapInput = C.$queryMap.find("input");
        C.$queryMapError = C.$queryMap.find(".geo-query-map-error");
        twttr.geo.helpText(C.$queryMapInput).keydown(function(D) {
            if (D.keyCode === twttr.constants.keyCodes.enter) {
                C.queryMap();
                D.stopPropagation();
                D.preventDefault()
            }
        });
        C.$queryMap.find("span").click(function(D) {
            C.queryMap()
        });
        var A = B.find(".geo-where-is-place");
        C.$mapCanvas = B.find(".geo-map-canvas");
        C.$movePinHint = B.find(".geo-move-pin-hint");
        C.$dropPinHint = B.find(".geo-drop-pin-hint");
        C.$droppablePin = B.find(".geo-droppable-pin");
        C.$nextButton = B.find(".geo-submit");
        if (!C.dialog.isOpen()) {
            C.dialog.open()
        }
        C.dialog.$container.attr("tabindex", "-1").focus();
        C.geoMap = new twttr.geo.Map(C.$mapCanvas);
        C.marker = C.geoMap.addPoi([C.lon, C.lat],
        function(D, E) {
            C.lat = D;
            C.lon = E;
            C.draggedPin = true;
            C.accuracy = C.accuracyFromMapZoomLevel(D, E);
            C.markerAccurate = true;
            C.updateMap()
        });
        if (!C.markerAccurate) {
            C.marker.setVisible(false)
        }
        C.geoMap.extendBoundsToIncludeCircle([C.lon, C.lat], C.accuracy);
        C.geoMap.adjustBounds(twttr.geo.PLACE_CREATION_DEFAULT_ZOOM_LEVEL);
        C.geoMap.createOverlay(function() {
            if (C.markerAccurate) {
                C.$movePinHint.delay(300).fadeTo(0, 0).show().fadeTo(500, 0.8);
                A.one("mousedown",
                function() {
                    C.$movePinHint.clearQueue().stop().hide()
                })
            }
            C.geoMap.addListener("dragstart",
            function() {
                if (C.markerAccurate) {
                    C.marker.setVisible(true)
                }
            });
            C.geoMap.addListener("dragend",
            function() {
                C.updateMap()
            });
            C.geoMap.addListener("zoom_changed",
            function() {
                C.updateMap()
            });
            var D = twttr.geo.POI_MAP_DEAD_ZONE;
            var E = twttr.geo.POI_MARKER_HOTSPOT;
            C.$droppablePin.draggable({
                containment: [A.offset().left - E.x + D.left + 1, A.offset().top - E.y + D.top + 1, A.offset().left + A.width() - E.x - D.right - 1, A.offset().top + A.height() - E.y - D.bottom - 1],
                addClasses: false,
                start: function() {
                    C.$dropPinHint.clearQueue().stop().hide()
                },
                stop: function(H, G) {
                    var F = G.position.left + E.x;
                    var I = G.position.top + E.y;
                    if (C.isPointOnMap(F, I)) {
                        C.marker.setPosition(C.geoMap.containerPointToLatLng(F, I))
                    } else {
                        C.updateMap()
                    }
                }
            });
            C.updateMap();
            C.$nextButton.bind("click geosubmit",
            function(F) {
                if ($(this).hasClass("btn-disabled")) {
                    return
                }
                C.determineContainer()
            })
        })
    },
    determineContainer: function() {
        var A = this;
        if (A.inProgress) {
            return
        }
        A.setStatus(true);
        twttr.API.Place.reverseGeocode(A.lat, A.lon, {
            granularity: "city",
            success: function(B) {
                A.container = twttr.geo.placesFromApi(B)[0];
                A.callSimilarPlaces()
            },
            error: function(B) {
                A.setStatus(false, B.status == 404 ? A.ERROR_REGION_UNAVAILABLE: A.ERROR_GENERIC)
            }
        })
    },
    callSimilarPlaces: function() {
        var A = this;
        var B = A.getPlaceCreationParams();
        twttr.API.Place.similar(B.lat, B.lon, B.name, twttr.merge(B, {
            success: function(C, D) {
                A.token = D.response.result.token;
                A.tokenPlaceName = B.name;
                A.setStatus(false);
                A.similarPlaces = D.response.result.places.slice(0, twttr.geo.MAX_SIMILAR_PLACES);
                if (A.similarPlaces.length > 0 && twttr.decider.isAvailable("geo_show_similar_places")) {
                    A.showSimilarPlaces()
                } else {
                    A.showConfirmPlaceCreation()
                }
            },
            error: function() {
                A.setStatus(false, A.ERROR_GENERIC);
                A.scribeCreatePlace("similar_places_error")
            }
        }))
    },
    callCreatePlace: function() {
        var A = this;
        if (A.inProgress) {
            return
        }
        if (A.tokenPlaceName != A.placeName) {
            A.callSimilarPlaces()
        }
        A.setStatus(true);
        var B = A.getPlaceCreationParams();
        if (twttr.geo.queryParams.nocreate !== undefined) {
            B.token = "bogus_token"
        }
        twttr.API.Place.create(B.token, B.lat, B.lon, B.name, B.contained_within, twttr.merge(B, {
            success: function(C) {
                A.dialog.destroy();
                A.onPlaceCreated(C.data());
                A.scribeCreatePlace("success")
            },
            error: function() {
                A.setStatus(false, A.ERROR_GENERIC);
                A.scribeCreatePlace("create_place_error")
            }
        }))
    },
    showSimilarPlaces: function() {
        var C = this;
        C.setContentAndTitle(new twttr.views.GeoSimilarPlaces().html());
        C.$content.find(".geo-submit").bind("click geosubmit",
        function() {
            C.showConfirmPlaceCreation()
        });
        C.$content.find(".geo-go-back").click(function(E) {
            E.preventDefault();
            C.showWhereIsPlace()
        });
        var D = C.$content.find(".geo-similar-places ul");
        twttr.each(C.similarPlaces,
        function(E) {
            $placeItem = twttr.geo.renderPlace("GeoSimilarPlaceItem", E);
            $placeItem.find("a").click(function(F) {
                F.preventDefault();
                C.dialog.destroy();
                C.onPlaceCreated(E)
            });
            D.append($placeItem)
        });
        C.geoMap = new twttr.geo.Map(C.$content.find(".geo-map-canvas"));
        C.geoMap.addPoi([C.lon, C.lat]);
        var A = C.$content.find(".geo-map-place-bubble");
        var B = C.$content.find(".geo-map-canvas").position();
        twttr.each(C.similarPlaces.reverse(),
        function(F) {
            var E = F.bounding_box.coordinates[0][0];
            var G = C.geoMap.addFocusablePoint(E,
            function(I, H) {
                if (I && H) {
                    A.find(".geo-place-title").text(F.name);
                    A.find(".geo-place-details").text(twttr.geo.getPlaceDetails(F));
                    A.show().css({
                        left: B.left + H.x - A.width() / 2,
                        top: B.top + H.y,
                        opacity: 0.8
                    })
                } else {
                    A.hide()
                }
            });
            D.find(".result-place-" + F.id).hover(function() {
                G(true)
            },
            function() {
                G(false)
            })
        });
        C.geoMap.adjustBounds(twttr.geo.SIMILAR_PLACES_MAX_ZOOM_LEVEL);
        C.geoMap.createOverlay()
    },
    capturePlaceCreationInputs: function() {
        var A = this;
        A.placeName = twttr.geo.helpVal(A.$name);
        A.streetAddress = twttr.geo.helpVal(A.$address);
        return A.placeName !== ""
    },
    showConfirmPlaceCreation: function() {
        var B = this;
        B.setContentAndTitle(new twttr.views.GeoConfirmPlaceCreation({
            city_name: B.container.full_name
        }).html());
        var A = B.$content;
        B.$name = A.find(".geo-place-creation-name");
        twttr.geo.helpText(B.$name.val(B.placeName)).bind("keydown keypress change",
        function() {
            setTimeout(function() {
                A.find(".geo-submit").toggleClass("btn-disabled", !B.capturePlaceCreationInputs())
            },
            0)
        });
        B.$address = A.find(".geo-place-creation-address");
        twttr.geo.helpText(B.$address.val(B.streetAddress || "")).focus();
        A.find(".geo-submit").bind("click geosubmit",
        function() {
            if (B.capturePlaceCreationInputs()) {
                B.callCreatePlace()
            }
        });
        A.find(".geo-go-back").click(function(C) {
            C.preventDefault();
            B.capturePlaceCreationInputs();
            B.showWhereIsPlace()
        });
        B.geoMap = new twttr.geo.Map(A.find(".geo-map-canvas"), {
            draggable: false,
            disableDoubleClickZoom: true,
            navigationControl: false
        });
        B.geoMap.addPoi([B.lon, B.lat]);
        B.geoMap.adjustBounds(twttr.geo.PLACE_CREATION_DEFAULT_ZOOM_LEVEL)
    },
    getPlaceCreationParams: function() {
        var B = this;
        var A = {
            lat: B.lat,
            lon: B.lon,
            name: B.placeName,
            contained_within: B.container.id,
            accuracy: B.accuracy
        };
        if (B.token) {
            A.token = B.token
        }
        if (B.streetAddress) {
            A["attribute:street_address"] = B.streetAddress
        }
        return A
    },
    scribeCreatePlace: function(A) {
        var B = this;
        twttr.geo.geoScribe("create_place", $.extend({
            status: A,
            original_lat: B.originalGeoParams.lat,
            original_lon: B.originalGeoParams.lon,
            original_accuracy: B.originalGeoParams.accuracy,
            dragged_pin: B.draggedPin
        },
        B.getPlaceCreationParams()))
    },
    setStatus: function(C, B) {
        this.inProgress = C;
        this.$content.find(".geo-progress").toggleClass("geo-spinner", C);
        var A = this.$content.find(".geo-place-creation-error");
        if (B) {
            A.text(B).show()
        } else {
            A.hide()
        }
    }
});
twttr.klass("twttr.geo.PlaceSearchDialog",
function(C, F) {
    var D = this;
    D.onPlaceAccepted = F;
    D.place = C.selectedPlace;
    D.placer = C;
    D.city = twttr.geo.getBestCity(D.place);
    D.originalCity = D.city;
    D.placeString = (D.place && D.place.place_type != "city") ? D.place.name: "";
    D.originalPlaceString = D.placeString;
    var B = {
        modal: true,
        template: {
            title: '<span class="geo_search_places_title"></span>',
            content: '<div class="geo_search_places_dialog_content"></div>'
        },
        css: {
            width: 450
        }
    };
    D.dialog = new twttr.widget.GeoDialog(B);
    var A = C.opts.geoParams;
    D.searchParams = {
        max_results: twttr.geo.MAX_PLACE_SEARCH_RESULTS
    };
    if (C.detectedPlace && D.city.id == twttr.geo.getBestCity(C.detectedPlace).id && A.lat !== undefined && A.lon !== undefined && A.accuracy !== undefined) {
        twttr.merge(D.searchParams, {
            lat: A.lat,
            lon: A.lon,
            accuracy: A.accuracy
        })
    } else {
        D.setSearchParamsFromCity()
    }
    D.setCityMode(false);
    var E = $("#place_search_results").html('<div style="height:250px;">&nbsp;</div>');
    D.dialog.open();
    E.hide();
    $("#place_search_query").focus().select()
}).method("scribeSearch",
function(B, C, A) {
    var D = this;
    twttr.geo.geoScribe(B, $.extend({
        query: twttr.geo.helpVal($("#place_search_query")),
        mode: C ? "city": "place",
        container_id: D.city.id,
        place_creation_allowed: D.shouldAllowPlaceCreation(C)
    },
    D.searchParams, A))
}).method("setCityMode",
function(C) {
    var D = this;
    var B = {
        city: this.city.full_name
    };
    if (D.city.full_name == "") {
        $(".geo_search_places_title").text(_("Where are you?"));
        $(".geo_search_places_dialog_content").html((new twttr.views.GeoCitySearch(B).html()));
        C = true
    } else {
        if (C) {
            $(".geo_search_places_title").text(_("Change City"));
            $(".geo_search_places_dialog_content").html((new twttr.views.GeoCitySearch(B).html()))
        } else {
            $(".geo_search_places_title").text(_("Where are you?"));
            $(".geo_search_places_dialog_content").html((new twttr.views.GeoPlaceSearch(B).html()))
        }
    }
    var A = $("#place_search_query");
    if (C) {
        A.val(D.city.full_name)
    } else {
        A.val(D.placeString)
    }
    twttr.geo.selectOnClick(twttr.geo.helpText(A));
    if (twttr.decider.isAvailable("geo_autocomplete")) {
        D.placeAutocomplete = new twttr.geo.autocomplete({
            $input: A,
            $dropdown: $(".place_search_dropdown"),
            getInputVal: function() {
                return twttr.geo.helpVal(A)
            },
            fetchMatches: function(F, H, G) {
                twttr.API.Place.search(twttr.merge({},
                D.searchParams, {
                    query: F,
                    autocomplete: "true",
                    max_results: twttr.geo.MAX_PLACE_AUTOCOMPLETE_RESULTS,
                    granularity: C ? "city": "poi",
                    success: function(I) {
                        H(twttr.geo.placesFromApi(I))
                    },
                    error: G
                }))
            },
            renderMatch: function(G, F, H) {
                return twttr.geo.renderPlace("GeoAutocompleteItem", G).click(function(J) {
                    var I = [];
                    twttr.each(H,
                    function(K) {
                        I.push(K.id)
                    });
                    D.placeAccepted(G, C);
                    D.scribeSearch("place_search_dialog_select_autocomplete", C, {
                        selected_id: G.id,
                        selected_index: F,
                        place_ids: I
                    })
                })
            },
            delay: twttr.geo.PLACE_SEARCH_AUTOCOMPLETE_DELAY
        })
    }
    var E = $("#place_search_form");
    E.submit(function(F) {
        F.preventDefault();
        var G = twttr.geo.helpVal(A);
        if (D.placeAutocomplete) {
            D.placeAutocomplete.hide()
        }
        if (!G) {
            D.placeAccepted(D.city, C);
            return
        }
        if (C && G == D.city.full_name) {
            D.setCityMode(false);
            return
        }
        D.setWaitCursor(true);
        $("#place_search_done").hide();
        $("#place_search_cancel").show();
        $("#place_search_results").html(Mustache.to_html('<div class="geo_search_message">{{_i}}Searching for "{{query}}"...{{/i}}</div>', {
            query: G
        })).show();
        twttr.API.Place.search(twttr.merge({},
        D.searchParams, {
            query: G,
            granularity: C ? "city": "poi",
            success: function(H) {
                D.setWaitCursor(false);
                D.searchResultPlaces = twttr.geo.placesFromApi(H);
                twttr.geo.loadMaps(function() {
                    D.displayResults(0, C)
                })
            },
            error: function(H, J, I) {
                D.setWaitCursor(false);
                D.displaySearchError(H, C)
            }
        }))
    });
    $(".place_search_submit").click(function() {
        D.searchTrigger = "click_icon";
        E.submit()
    });
    A.keydown(function(F) {
        if (F.keyCode == 13) {
            D.searchTrigger = "enter_key";
            F.preventDefault();
            E.submit()
        }
    });
    $("#place_search_done").click(function() {
        D.searchTrigger = "click_done";
        var F = twttr.geo.helpVal(A);
        if (D.place && D.place.name == F && D.city == D.originalCity) {
            D.placeAccepted(D.place, C);
            D.scribeSearch("place_search_dialog_done_no_changes", C)
        } else {
            E.submit()
        }
    });
    $("#place_search_cancel").click(function() {
        D.dialog.destroy();
        D.scribeSearch("place_search_dialog_close", C, {
            triggered_by: "click_cancel"
        })
    });
    $("#change_city").click(function(F) {
        F.preventDefault();
        D.placeString = twttr.geo.helpVal(A);
        D.setCityMode(true);
        D.scribeSearch("place_search_dialog_change_city")
    });
    A.focus().select()
}).method("setWaitCursor",
function(A) {
    $(".place_search_submit").toggleClass("loading", A)
}).method("shouldAllowPlaceCreation",
function(A) {
    return ! A && twttr.decider.isAvailable("geo_place_creation") && twttr.geo.mapsAvailable()
}).method("displayResults",
function(I, G) {
    var E = this;
    var B = I * twttr.geo.PLACE_SEARCH_RESULTS_PER_PAGE;
    var F = B + twttr.geo.PLACE_SEARCH_RESULTS_PER_PAGE;
    var A = E.searchResultPlaces.slice(B, F);
    var J = $("#place_search_results").empty();
    var H = twttr.geo.helpVal($("#place_search_query"));
    if (A.length == 0) {
        J.html(Mustache.to_html('<div class="geo_search_message">{{_i}}We couldn\'t find "{{query}}."{{/i}}</div>', {
            query: H
        }))
    }
    var C = [];
    var D = $("<ul/>").appendTo(J);
    twttr.each(A,
    function(K, L) {
        C.push(K.id);
        var M = twttr.geo.renderPlace("GeoSearchResultItem", K);
        M.find("a").click(function(N) {
            N.preventDefault();
            E.scribeSearch("place_search_dialog_select_result", G, {
                place_ids: C,
                selected_id: K.id,
                selected_index: L
            });
            E.placeAccepted(K, G)
        }).attr("title", twttr.geo.getPlaceDetails(K));
        D.append(M)
    });
    if (E.searchResultPlaces.length > twttr.geo.PLACE_SEARCH_RESULTS_PER_PAGE) {
        J.append(Mustache.to_html('<div class="geo_next_prev"><a href="#" id="geo_prev_result">&laquo;&nbsp;{{_i}}Prev{{/i}}</a><a href="#" id="geo_next_result">{{_i}}Next{{/i}}&nbsp;&raquo;</a></div>'), {});
        E.setNextPrev($("#geo_prev_result"), I > 0, I - 1, G);
        E.setNextPrev($("#geo_next_result"), F < E.searchResultPlaces.length, I + 1, G)
    }
    if (E.shouldAllowPlaceCreation(G)) {
        J.append(Mustache.to_html("<div class='geo_add_place'>{{#found}}{{_i}}Not what you're looking for?{{/i}}&#32;{{/found}}<a href='#'>{{_i}}Add this place!{{/i}}</a></div>", {
            found: A.length > 0
        }));
        $(".geo_add_place a").click(function(K) {
            K.preventDefault();
            E.dialog.destroy();
            new twttr.geo.PlaceCreationDialog(E.city, H, E.searchParams,
            function(L) {
                E.placeAccepted(L, false)
            });
            E.scribeSearch("place_search_dialog_add", G, {
                place_ids: C
            })
        })
    }
    E.scribeSearch("place_search_dialog_show_results", G, {
        place_ids: C,
        triggered_by: E.searchTrigger
    })
}).method("setNextPrev",
function(A, D, C, B) {
    var E = this;
    A.click(function(F) {
        F.preventDefault();
        if (D) {
            E.displayResults(C, B)
        }
    });
    if (!D) {
        A.addClass("link-disabled")
    }
}).method("placeAccepted",
function(A, B) {
    var C = this;
    if (B) {
        if (!A.id) {
            C.dialog.destroy()
        } else {
            if (C.city.id != A.id) {
                C.city = A;
                if (C.placeString != C.originalPlaceString) {
                    C.placeString = ""
                }
                C.setSearchParamsFromCity()
            }
        }
        C.setCityMode(false)
    } else {
        C.dialog.destroy();
        C.onPlaceAccepted(A)
    }
}).method("setSearchParamsFromCity",
function() {
    var A = this;
    if (A.city && A.city.id) {
        delete A.searchParams.lat;
        delete A.searchParams.lon;
        delete A.searchParams.accuracy;
        A.searchParams.contained_within = A.city.id
    }
}).method("displaySearchError",
function(B, A) {
    $("#place_search_results").text(_("Sorry, search is temporarily unavailable, please try again later."));
    this.scribeSearch("place_search_dialog_error", A)
});
twttr.klass("twttr.geo.PlacesDropdown",
function(B, E, D) {
    var C = this;
    C.placer = B;
    C.$container = E;
    C.onPlaceChange = D;
    var A = "<a class='place_link' href='#'><span class='place_name'></span> &#9662;</a><ul class='round places_list'/>";
    C.$container.find(".place_content").html(A);
    C.$placesList = C.$container.find(".place_content ul.places_list");
    C.buildPlacesDropdown();
    C.$container.find(".place_link").click(function(F) {
        F.preventDefault();
        if (C.$container.find(".place_content ul.places_list:visible").length > 0) {
            C.closeMenu()
        } else {
            C.openMenu();
            F.stopPropagation()
        }
    })
}).method("buildPlacesDropdown",
function() {
    var A = this;
    A.$placesList.empty();
    A.appendPoiPlaces(A.placer.places);
    A.appendNonPoiPlaces(A.placer.places);
    A.appendMorePlaces();
    A.showSelectedPlace()
}).method("appendPoiPlaces",
function(A) {
    var B = this;
    var C = false;
    twttr.each(A,
    function(D) {
        if (D.place_type == "poi") {
            B.$placesList.append(B.createPlaceItem(D));
            C = true
        }
    });
    return C
}).method("appendNonPoiPlaces",
function(A) {
    var B = this;
    twttr.each(A,
    function(C) {
        if (C.place_type != "poi") {
            B.$placesList.append(B.createPlaceItem(C))
        }
    })
}).method("createPlaceItem",
function(A) {
    var C = this;
    var B = twttr.geo.renderPlace("GeoDropdownItem", A);
    B.click(function(D) {
        D.preventDefault();
        C.closeMenu();
        C.onPlaceChange(A);
        twttr.geo.geoScribe("click_place_item", C.placer.getState())
    });
    return B
}).method("appendMorePlaces",
function() {
    var A = this;
    if (twttr.decider.isAvailable("geo_more_places")) {
        A.$placesList.append('<li class="geo_more_places"><span class="place_item_icon more_places">&nbsp;</span>' + _("Search places...") + "</li>");
        A.$placesList.find(".geo_more_places").click(function(B) {
            B.preventDefault();
            new twttr.geo.PlaceSearchDialog(A.placer,
            function(C) {
                A.onPlaceChange(C)
            });
            twttr.geo.geoScribe("click_search_places")
        })
    }
}).method("showSelectedPlace",
function() {
    var A = this.placer.selectedPlace;
    var B;
    if (A.place_type != "poi") {
        B = _("in {{full_name}}")
    } else {
        B = '<span class="place_icon">&nbsp;</span>' + _("at {{full_name}}")
    }
    twttr.geo.currentLocation.place_id = A.id;
    this.$container.find(".place_name").html(Mustache.to_html(B, A));
    this.$placesList.children("li.selected").removeClass("selected");
    this.$placesList.find(".place_" + A.id).addClass("selected")
}).method("openMenu",
function() {
    var B = this;
    var A = B.$container.find(".place_link");
    var C = A.position();
    B.$placesList.css({
        left: C.left,
        top: C.top + A.outerHeight()
    }).show();
    $("html").one("click",
    function() {
        B.closeMenu()
    });
    twttr.geo.geoScribe("open_places_dropdown", B.placer.getState())
}).method("closeMenu",
function() {
    this.$placesList.hide()
});
twttr.klass("twttr.geo.TweetGeo",
function(C, A, B) {
    this.opts = B;
    this.render(C, A)
}).methods({
    render: function(D, A) {
        var C = this;
        C.$target = A;
        var B = D.data();
        B.tweet_id = D.id;
        C.avatarUrl = D.user.profileImageUrl.replace(/(.+)(?:_normal)\.(\w+)$/, "$1_mini.$2");
        if (D.coordinates) {
            C.coordinates = D.coordinates.coordinates
        }
        if (D.place && D.place.id) {
            twttr.API.Place.find(D.place.id, {
                success: function(F) {
                    var E = F.data();
                    B.place = twttr.geo.getFullPlace(E);
                    C.finishRendering(B)
                },
                error: function() {
                    B.place.place_id = B.place.id;
                    C.finishRendering(B)
                }
            })
        } else {
            C.finishRendering(B)
        }
    },
    finishRendering: function(B) {
        var D = this;
        var A = (new twttr.views[D.opts.viewName](B)).$html();
        D.$target.append(A);
        var C = A.find(".map_canvas");
        twttr.geo.loadMaps(function() {
            D.geoMap = new twttr.geo.Map(C, D.opts.mapOptions);
            if (!D.geoMap.initialized) {
                return
            }
            var F = false;
            var E = B.place;
            if (E) {
                if (E.geometry) {
                    var G = E.geometry.coordinates;
                    if (E.geometry.type == "Polygon") {
                        D.geoMap.addPlacePolygon(G)
                    } else {
                        if (E.geometry.type == "MultiPolygon") {
                            twttr.each(G,
                            function(H) {
                                D.geoMap.addPlacePolygon(H)
                            })
                        } else {
                            if (E.geometry.type == "Point") {
                                D.geoMap.addPoint(G, D.avatarUrl);
                                F = true
                            }
                        }
                    }
                } else {
                    var G = E.bounding_box.coordinates;
                    if (G[0][0] == G[0][2]) {
                        D.geoMap.addPoint(G[0][0], D.avatarUrl);
                        F = true
                    } else {
                        D.geoMap.addPlacePolygon(G)
                    }
                }
            }
            if (!F && D.coordinates) {
                D.geoMap.addPoint(D.coordinates, D.avatarUrl)
            }
            D.geoMap.adjustBounds(13, !F && D.coordinates);
            C.bind("refreshMap",
            function() {
                D.geoMap.resize()
            })
        })
    }
});
twttr.klass.component("twttr.components.TweetGeoBig").initializer(function(A) {
    if (A.geo || (A.place && A.place.id) || A.coordinates) {
        new twttr.geo.TweetGeo(A, this.$node, {
            viewName: "GeoMapBig",
            mapOptions: {}
        });
        this.hasRendered()
    }
}).deciderKey("tweet_geo_component");
twttr.klass.component("twttr.components.TweetGeoSmall").initializer(function(A) {
    if (A.geo || (A.place && A.place.id) || A.coordinates) {
        new twttr.geo.TweetGeo(A, this.$node, {
            viewName: "GeoMapSmall",
            mapOptions: {
                draggable: false,
                disableDoubleClickZoom: true,
                navigationControl: false
            }
        });
        this.hasRendered()
    }
}).deciderKey("tweet_geo_component");
twttr.klass.component("twttr.components.NewestListMembers").initializer(function(B) {
    var A = this;
    B.members().first(4,
    function(C) {
        new twttr.views.NewestListMembers({
            list: B.attributes,
            members: new twttr.views.UserSmallList(C)
        }).render(A.$node, "append");
        A.hasRendered()
    })
}).deciderKey("newest_list_members_component");
twttr.klass.component("twttr.components.StreamEnd").initializer(function(A) {
    new twttr.views.StreamEnd({
        end_text: A
    }).render(this.$node, "append")
});
twttr.klass.component("twttr.components.StreamWhaleEnd").initializer(function(B) {
    var A = this;
    new twttr.views.StreamWhaleEnd({
        text: B
    }).render(this.$node, "append");
    this.$node.delegate(".try-again-after-whale", "click",
    function(C) {
        A.trigger("tryAgain")
    })
});
twttr.klass.component("twttr.components.NextSteps").initializer(function() {
    var A = this;
    this._steps = {
        tweeted: twttr.currentUser.statusesCount > 0,
        followed: twttr.currentUser.friendsCount > 0,
        mobiled: twttr.currentUser.deviceSetup
    };
    this._render();
    this.hasRendered();
    twttr.API.Status.bind("update",
    function(B, C) {
        A._steps.tweeted = true;
        A._render()
    });
    twttr.API.User.bind("follow",
    function(C, B) {
        A._steps.followed = true;
        A._render()
    })
}).methods({
    _render: function() {
        new twttr.views.NextSteps(this._steps).render(this.$node.empty(), "append")
    }
});
twttr.klass.component("twttr.components.AddPeople").initializer(function() {
    var A = this;
    this.$node.delegate(".button.search-for-list-people", "click",
    function(B) {
        A.doSearch()
    });
    this.$node.delegate("input", "keypress",
    function(B) {
        if (B.keyCode === 13) {
            A.doSearch()
        }
        B.stopPropagation()
    });
    this._render();
    this.hasRendered()
}).methods({
    doSearch: function() {
        twttr.router.routeTo(twttr.router.userSearchPath({
            query: this.$node.find("input").val()
        }));
        scribble("search-for-people", {
            input: "click"
        })
    },
    _render: function() {
        new twttr.views.AddPeople().render(this.$node.empty(), "append")
    }
});
twttr.klass.component("twttr.components.NoListMembers").initializer(function() {
    var A = this;
    this._render();
    this.hasRendered()
}).methods({
    _render: function() {
        new twttr.views.NoListMembers().render(this.$node.empty(), "append")
    }
});
twttr.klass.component("twttr.components.Media").initializer(function(D, B) {
    var C = this;
    this.$node.prepend($('<div class="tweet-media"/>'));
    this.$mediaNode = this.$node.find(".tweet-media");
    this.hasCalledHasRendered = false;
    var A = D.retweetingStatus ? D.retweetingStatus.user: D.user;
    twttr.currentUser.relationshipWith(A,
    function(E) {
        A.sync("following", E.following); (new twttr.media.InlineMedia()).render(D, {
            width: B
        },
        function(F, G) {
            C.conditionallyShowMedia(D, G, F)
        })
    })
}).deciderKey("inline_media_component").statics({
    restrictedCategories: ["photo", "video"]
}).methods({
    conditionallyShowMedia: function(E, B, A) {
        var C = this;
        var D = jQuery.inArray(A.getIcon(), twttr.components.Media.restrictedCategories) >= 0;
        var F = E.retweetingStatus ? E.retweetingStatus.user: E.user;
        if (!twttr.loggedIn) {
            C._renderBlockedMedia(B)
        } else {
            if (F.following || !D || F.id === twttr.currentUser.id) {
                C._renderMedia(B)
            } else {
                twttr.currentUser.showAllInlineMedia({
                    success: function(G) {
                        G ? C._renderMedia(B) : C._renderBlockedMedia(B)
                    },
                    error: function(G) {
                        twttr.showError(_("Couldn't get inline media settings: {{error_msg}}", {
                            error_msg: G.statusText
                        }))
                    }
                })
            }
        }
    },
    _renderMedia: function(A) {
        this.$mediaNode.append(A);
        if (!this.hasCalledHasRendered) {
            this.hasRendered();
            this.hasCalledHasRendered = true
        }
    },
    _renderBlockedMedia: function(B) {
        this._renderMedia(B);
        this.$mediaNode.hide();
        if (this.$node.find(".media-not-displayed:visible").get(0)) {
            return
        }
        new twttr.views.MediaNotDisplayed().render(this.$node, "prepend");
        var A = twttr.bind(this,
        function(C) {
            this.$mediaNode.show();
            this.$node.find(".media-not-displayed").hide()
        });
        this.$node.find(".display-this-media").click(A);
        this.$node.find(".always-display-media").click(function(C) {
            twttr.currentUser.updateShowAllInlineMedia(true, {
                success: function() {
                    A(C)
                },
                error: function(D) {
                    twttr.showError(_("Couldn't set inline media settings."))
                }
            })
        })
    }
});
twttr.klass.component("twttr.components.Footer").initializer(function() {
    this.view = new twttr.views.DashboardFooter({
        year: 2010
    }).render(this.$node, "append");
    this.hasRendered();
    this.registerEvents()
}).methods({
    registerEvents: function() {
        this.view.delegate("a", "mousedown",
        function(B) {
            var A = $(this);
            scribble("footer", {
                input: "click",
                name: A.text(),
                href: A.attr("href")
            })
        })
    }
});
twttr.klass.component("twttr.components.TweetPane").mixin(twttr.mixins.tweetActionable).initializer(function(A) {
    new twttr.views.TweetPane({
        tweet: new twttr.views.BaseTweet(A)
    }).render(this.$node, "append");
    this._tweetId = A.id;
    this.registerTweetActionEvents();
    this.hasRendered()
}).methods({
    onTweetActionDelete: function(A) {
        if (A === this._tweetId) {
            this.trigger("deleted")
        }
    }
});
twttr.klass.component("twttr.components.ProfilePane").initializer(function(A) {
    var B = new twttr.views.ProfilePane(A);
    B.render(this.$node, "append");
    twttr.viewHelpers.addMapLink(A.location, this.$find(".user-info .location"));
    if (twttr.loggedIn) {
        this.$node.append(new twttr.components.ProfileActions(A).$node)
    }
    this.hasRendered()
});
twttr.klass.component("twttr.components.DashboardProfileStats").initializer(function(A) {
    var D = this;
    new twttr.views.DashboardProfileStats(A).render(this.$node, "append");
    this.hasRendered();
    var B = A;
    function C(E) {
        var F = E ? 1: -1;
        B.attributes.friends_count += F;
        new twttr.views.DashboardProfileStats(B).render(D.$node, "html")
    }
    twttr.API.User.bind("follow.YourActivity",
    function(F, E) {
        if (B.id === twttr.currentUser.id) {
            C(true)
        }
    });
    twttr.API.User.bind("unfollow.YourActivity",
    function(F, E) {
        if (B.id === twttr.currentUser.id) {
            C(false)
        }
    })
});
twttr.klass.component("twttr.components.RSSFeeds").initializer(function(B, A) {
    B = B || "home";
    A = A || twttr.currentUser;
    this.view = new twttr.views.RssFeeds({
        feeds: [{
            href: "/statuses/friends_timeline/" + A.id + ".rss",
            title: B === "home" ? _("RSS Feed") : _("RSS Feed of {{username}}'s tweets", {
                username: A.screenName
            })
        }]
    }).render(this.$node, "append");
    this.hasRendered();
    this.registerEvents()
}).methods({
    registerEvents: function() {}
});
twttr.klass.component("twttr.components.JapaneseAd").initializer(function() {
    new twttr.views.JapaneseAd().render(this.$node, "append")
}).deciderKey("japanese_ad_component");
twttr.klass.component("twttr.components.WhatTheTrend").initializer(function(A) {
    $.ajax({
        url: "http://api.whatthetrend.com/api/trend/getByName/" + encodeURIComponent(A) + "/jsonp",
        dataType: "jsonp",
        success: twttr.bind(this,
        function(B) {
            if (B && B.api && B.api.trend && B.api.trend.blurb && B.api.trend.blurb.text) {
                new twttr.views.WhatTheTrend(B.api.trend).render(this.$node, "append")
            }
        })
    })
}).deciderKey("what_the_trend_component");
twttr.klass.component("twttr.components.ProtectedUser").initializer(function(A) {
    new twttr.views.ProtectedUser(A).render(this.$node, "append")
});
twttr.klass.component("twttr.components.PermalinkTweet").mixin(twttr.mixins.tweetActionable).initializer(function(A) {
    new twttr.views.PermalinkTweet(A).render(this.$node, "append");
    this._tweetId = A.id;
    this.registerTweetActionEvents();
    this.hasRendered()
}).methods({
    faveTweet: function(A) {
        this.tweetActionFavorite(this.$find(".tweet"), A)
    },
    replyTweet: function(A) {
        this.tweetActionReply(this.$find(".tweet"), A)
    },
    retweetTweet: function(A) {
        this.tweetActionRetweet(this.$find(".tweet"), A)
    },
    onTweetActionDelete: function(A) {
        if (A === this._tweetId) {
            this.trigger("deleted")
        }
    }
});
twttr.klass.component("twttr.components.PlacePeople").initializer(function(A) {
    var B = this;
    if (A) {
        twttr.API.Status.search("place:" + A.id, {
            success: function(C) {
                var E = {};
                var F = [];
                C.some(function(G) {
                    if (G.user && !(G.user.id in E)) {
                        E[G.user.id] = true;
                        F.push(G.user)
                    }
                    return F.length >= 10
                });
                if (F.length > 0) {
                    var D = $.extend({},
                    A, {
                        user_thumbs: new twttr.views.UserThumbList(new twttr.anywhere.api.util.BaseCollection(F))
                    });
                    new twttr.views.PlacePeople(D).render(B.$node, "append");
                    B.hasRendered()
                }
            }
        })
    }
}).deciderKey("place_people_component");
twttr.klass.component("twttr.components.PlaceBusiness").initializer(function(A) {
    var D = this;
    if (A && A.poi) {
        var B = {
            place_name: A.name
        };
        var C = twttr.geo.getPlaceAttribute(A, "twitter");
        if (C) {
            twttr.API.User.find(C,
            function(E) {
                B.user_list = new twttr.views.UserSmallList(new twttr.anywhere.api.util.BaseCollection([E]));
                if (E.status) {
                    B.tweet = new twttr.views.BaseTweet(E.status)
                }
                new twttr.views.PlaceBusinessClaimed(B).render(D.$node, "append");
                D.hasRendered()
            })
        } else {}
    }
}).deciderKey("place_business_component");
twttr.klass.component("twttr.components.NoUserExists").initializer(function() {
    this.$node.append("<p class='no-user tweet-text tweet-text-large'>" + _("This user does not exist.") + "</p>");
    this.hasRendered()
});
twttr.stream("twttr.streams.ListStream",
function(B, A) {
    this._cursor = -1;
    twttr.streams.Stream.apply(this, arguments)
}).superclass(twttr.streams.Stream).methods({
    itemViewClass: "StreamList",
    streamItemType: "list",
    streamItemId: function(A) {
        return A.uri
    },
    afterFirstSwitchingTo: function() {
        this.getMoreOldItems()
    },
    _fetchItems: function(A) {
        var B = this;
        if (!twttr.decider.isAvailable("list_streams") || (this.constructor._deciderKey && !twttr.decider.isAvailable(this.constructor._deciderKey))) {
            A(this, twttr.streams.DECIDER);
            return
        }
        twttr.API.User.find(this.screenName)[this.API_METHOD]({
            cursor: this._cursor,
            success: function(C, D) {
                B._cursor = D.response.next_cursor;
                B.push(C.array);
                A(B, twttr.streams.SUCCESS);
                if (!B._cursor) {
                    B.reachedTheEnd()
                }
            },
            error: function(C) {
                if (C.status === 502) {
                    A(B, twttr.streams.WHALE)
                } else {
                    A(B, twttr.streams.ERROR)
                }
            },
            timeout: function(C) {
                C.retry()
            },
            cancel: function() {
                A(B, twttr.streams.TIMEOUT)
            }
        })
    }
});
twttr.stream("twttr.streams.OwnLists",
function(B, A) {
    twttr.streams.ListStream.apply(this, arguments)
}).superclass(twttr.streams.ListStream).methods({
    API_METHOD: "lists",
    _setTitle: function(A) {
        if (this.stream_user_is_current_user()) {
            A(_("Your lists"))
        } else {
            A(_("{{username}}'s lists", {
                username: this.screenName
            }))
        }
    },
    _getEmptyStreamHtml: function() {
        if (this.stream_user_is_current_user()) {
            return _("You haven't created any lists yet.")
        } else {
            return _("@{{screen_name}} hasn't created any lists yet.", {
                screen_name: this.screenName
            })
        }
    }
}).statics({
    _deciderKey: "list_stream_own_lists"
});
twttr.stream("twttr.streams.Memberships",
function(B, A) {
    twttr.streams.ListStream.apply(this, arguments)
}).superclass(twttr.streams.ListStream).methods({
    API_METHOD: "memberships",
    _setTitle: function(A) {
        A(_("Lists following {{username}}", {
            username: this.screenName
        }))
    },
    _getEmptyStreamHtml: function() {
        if (this.stream_user_is_current_user()) {
            return _("You aren't listed yet.")
        } else {
            return _("@{{screen_name}} isn't listed yet.", {
                screen_name: this.screenName
            })
        }
    }
}).statics({
    _deciderKey: "list_stream_memberships"
});
twttr.stream("twttr.streams.Subscriptions",
function(B, A) {
    twttr.streams.ListStream.apply(this, arguments)
}).superclass(twttr.streams.ListStream).methods({
    API_METHOD: "subscriptions",
    _setTitle: function(A) {
        A(_("Lists {{username}} follows", {
            username: this.screenName
        }))
    },
    _getEmptyStreamHtml: function() {
        if (this.stream_user_is_current_user()) {
            return _("You aren't following any lists yet.")
        } else {
            return _("@{{screen_name}} isn't following any lists yet.", {
                screen_name: this.screenName
            })
        }
    }
}).statics({
    _deciderKey: "list_stream_subscriptions"
});
twttr.themes = {
    loadUserStyleFor: function(A) {
        if (twttr.helpers.isCurrentUser(A)) {
            A = twttr.currentUser
        }
        var B = $("body");
        B.removeClass("loading-body");
        if (A && !this._hasBrokenDefaults(A)) {
            if ($("style#user-style-" + A.screenName).length === 0) {
                new twttr.views.UserCss(A).render("head", "append")
            }
            if ($("style#user-style-" + A.screenName + "-bg-img").length === 0) {
                new twttr.views.BgImgCss(A).render("head", "append")
            }
            this._clearExistingTheme();
            B.addClass("user-style-" + A.screenName)
        } else {
            this.loadDefaultTheme()
        }
    },
    loadDefaultTheme: function() {
        var A = $("body");
        A.removeClass("loading-body");
        this._clearExistingTheme();
        A.addClass("user-style-twttr")
    },
    _brokenTheme: {
        profileBackgroundColor: "9ae4e8",
        profileBackgroundImageUrl: /\/images\/themes\/theme1\/bg.png$/i,
        profileBackgroundTile: false,
        profileLinkColor: "0000ff",
        profileSidebarBorderColor: "87bc44",
        profileSidebarFillColor: "e0ff92",
        profileTextColor: "000000",
        profileUseBackgroundImage: true
    },
    _hasBrokenDefaults: function(B) {
        for (var C in this._brokenTheme) {
            var A = this._brokenTheme[C],
            E = B[C],
            D = false;
            if (twttr.is.regex(A)) {
                D = !!E.match(A)
            } else {
                D = A === E
            }
            if (!D) {
                return false
            }
        }
        return true
    },
    _clearExistingTheme: function() {
        var A = $("body");
        $("style[id^=user-style]").each(function() {
            A.removeClass(this.id)
        });
        A.removeClass("user-style-twttr")
    }
};
twttr.admin = {
    addToolsFor: function(A, B) {
        if (!twttr.isAdmin) {
            return
        }
        this.removeTools();
        new twttr.views.UserAdminTools({
            screen_name: A,
            id: B
        }).render(".admin-panel-link", "after")
    },
    removeTools: function() {
        if (!twttr.isAdmin) {
            return
        }
        $(".user-admin-tools").remove()
    },
    registerListeners: function() {
        if (!twttr.isAdmin) {
            return
        }
        $(".become-user-button").live("click",
        function(A) {
            $(".become-user-form").submit();
            A.preventDefault();
            A.stopPropagation();
            return false
        })
    }
};
twttr.app = {
    init: function() {
        if (twttr.currentUser && twttr.currentUser.states) {
            var A = twttr.currentUser.states;
            if (A.pending_email) {
                twttr.banners.verifyEmail(A.pending_email).insert()
            }
            if (A.detached_email) {
                twttr.banners.detachedEmail().insert()
            }
            if (A.bouncing_email) {
                twttr.banners.bouncingEmail(A.bouncing_email).insert()
            }
            if (A.suspended) {
                twttr.banners.suspended().insert()
            }
        }
    },
    switchToPage: function(A) {
        if (this.currentPageName() !== A) {
            var E = this.currentPage();
            this._currentPageName = A;
            var B = twttr.util.capitalize(A);
            var C = false,
            D = this.pages[A];
            if (!D) {
                D = this.pages[A] = new twttr.components.pages[B]();
                D.bind("notFound",
                function() {
                    twttr.app.switchToPage("404").notFound()
                });
                C = true
            }
            if (E) {
                E.onSwitchAway();
                E.$node.detach();
                $("#page-container").empty().append(D.$node)
            } else {
                D._renderCallback = function() {
                    $("#page-container").empty().append(D.$node)
                }
            }
            D.highlightGlobalNav();
            D.onSwitchTo();
            if (C) {
                D.onFirstSwitch();
                if (!D.noAutoRender) {
                    D.render()
                }
            }
        }
        return this.currentPage()
    },
    currentPage: function() {
        return this.pages[this._currentPageName]
    },
    currentPageName: function() {
        return this._currentPageName
    },
    pages: {},
    caches: {
        deletedTweets: new twttr.LocalProvider("deleted_tweets")
    }
};